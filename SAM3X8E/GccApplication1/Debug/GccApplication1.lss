
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000188c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0008188c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  20000438  00081cc4  00010438  2**2
                  ALLOC
  3 .stack        00000400  20000480  00081d0c  00010438  2**0
                  ALLOC
  4 .heap         00000200  20000880  0008210c  00010438  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000429b  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009a0  00000000  00000000  00014757  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000062c  00000000  00000000  000150f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001b8  00000000  00000000  00015723  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000158db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011efd  00000000  00000000  00015a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004505  00000000  00000000  00027910  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055328  00000000  00000000  0002be15  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000005d4  00000000  00000000  00081140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20000880 	.word	0x20000880
   80004:	00080149 	.word	0x00080149
   80008:	000801d1 	.word	0x000801d1
   8000c:	000801d1 	.word	0x000801d1
   80010:	000801d1 	.word	0x000801d1
   80014:	000801d1 	.word	0x000801d1
   80018:	000801d1 	.word	0x000801d1
	...
   8002c:	000801d1 	.word	0x000801d1
   80030:	000801d1 	.word	0x000801d1
   80034:	00000000 	.word	0x00000000
   80038:	000801d1 	.word	0x000801d1
   8003c:	000801d1 	.word	0x000801d1
   80040:	000801d1 	.word	0x000801d1
   80044:	000801d1 	.word	0x000801d1
   80048:	000801d1 	.word	0x000801d1
   8004c:	000801d1 	.word	0x000801d1
   80050:	000801d1 	.word	0x000801d1
   80054:	000801d1 	.word	0x000801d1
   80058:	000801d1 	.word	0x000801d1
   8005c:	000801d1 	.word	0x000801d1
   80060:	00080921 	.word	0x00080921
   80064:	000801d1 	.word	0x000801d1
   80068:	00000000 	.word	0x00000000
   8006c:	000801d1 	.word	0x000801d1
   80070:	000802a9 	.word	0x000802a9
   80074:	000801d1 	.word	0x000801d1
   80078:	000802e1 	.word	0x000802e1
	...
   80084:	000801d1 	.word	0x000801d1
   80088:	000801d1 	.word	0x000801d1
   8008c:	000801d1 	.word	0x000801d1
   80090:	000801d1 	.word	0x000801d1
   80094:	000801d1 	.word	0x000801d1
   80098:	000801d1 	.word	0x000801d1
   8009c:	000801d1 	.word	0x000801d1
   800a0:	000801d1 	.word	0x000801d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000801d1 	.word	0x000801d1
   800ac:	00080825 	.word	0x00080825
   800b0:	000801d1 	.word	0x000801d1
   800b4:	000801d1 	.word	0x000801d1
   800b8:	000801d1 	.word	0x000801d1
   800bc:	000801d1 	.word	0x000801d1
   800c0:	000801d1 	.word	0x000801d1
   800c4:	000801d1 	.word	0x000801d1
   800c8:	000801d1 	.word	0x000801d1
   800cc:	000801d1 	.word	0x000801d1
   800d0:	000801d1 	.word	0x000801d1
   800d4:	000801d1 	.word	0x000801d1
   800d8:	000801d1 	.word	0x000801d1
   800dc:	000801d1 	.word	0x000801d1
   800e0:	000801d1 	.word	0x000801d1
   800e4:	000801d1 	.word	0x000801d1
   800e8:	000801d1 	.word	0x000801d1
   800ec:	000801d1 	.word	0x000801d1
   800f0:	000801d1 	.word	0x000801d1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000438 	.word	0x20000438
   80110:	00000000 	.word	0x00000000
   80114:	0008188c 	.word	0x0008188c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008188c 	.word	0x0008188c
   8013c:	2000043c 	.word	0x2000043c
   80140:	0008188c 	.word	0x0008188c
   80144:	00000000 	.word	0x00000000

00080148 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   8014e:	4b17      	ldr	r3, [pc, #92]	; (801ac <Reset_Handler+0x64>)
   80150:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   80152:	4b17      	ldr	r3, [pc, #92]	; (801b0 <Reset_Handler+0x68>)
   80154:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   80156:	687a      	ldr	r2, [r7, #4]
   80158:	683b      	ldr	r3, [r7, #0]
   8015a:	429a      	cmp	r2, r3
   8015c:	d00c      	beq.n	80178 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   8015e:	e007      	b.n	80170 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   80160:	683b      	ldr	r3, [r7, #0]
   80162:	1d1a      	adds	r2, r3, #4
   80164:	603a      	str	r2, [r7, #0]
   80166:	687a      	ldr	r2, [r7, #4]
   80168:	1d11      	adds	r1, r2, #4
   8016a:	6079      	str	r1, [r7, #4]
   8016c:	6812      	ldr	r2, [r2, #0]
   8016e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   80170:	683a      	ldr	r2, [r7, #0]
   80172:	4b10      	ldr	r3, [pc, #64]	; (801b4 <Reset_Handler+0x6c>)
   80174:	429a      	cmp	r2, r3
   80176:	d3f3      	bcc.n	80160 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80178:	4b0f      	ldr	r3, [pc, #60]	; (801b8 <Reset_Handler+0x70>)
   8017a:	603b      	str	r3, [r7, #0]
   8017c:	e004      	b.n	80188 <Reset_Handler+0x40>
                *pDest++ = 0;
   8017e:	683b      	ldr	r3, [r7, #0]
   80180:	1d1a      	adds	r2, r3, #4
   80182:	603a      	str	r2, [r7, #0]
   80184:	2200      	movs	r2, #0
   80186:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80188:	683a      	ldr	r2, [r7, #0]
   8018a:	4b0c      	ldr	r3, [pc, #48]	; (801bc <Reset_Handler+0x74>)
   8018c:	429a      	cmp	r2, r3
   8018e:	d3f6      	bcc.n	8017e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   80190:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x78>)
   80192:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80194:	4a0b      	ldr	r2, [pc, #44]	; (801c4 <Reset_Handler+0x7c>)
   80196:	687b      	ldr	r3, [r7, #4]
   80198:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8019c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   801a0:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   801a2:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x80>)
   801a4:	4798      	blx	r3

        /* Branch to main function */
        main();
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x84>)
   801a8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   801aa:	e7fe      	b.n	801aa <Reset_Handler+0x62>
   801ac:	0008188c 	.word	0x0008188c
   801b0:	20000000 	.word	0x20000000
   801b4:	20000438 	.word	0x20000438
   801b8:	20000438 	.word	0x20000438
   801bc:	20000480 	.word	0x20000480
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	00081359 	.word	0x00081359
   801cc:	00080319 	.word	0x00080319

000801d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   801d0:	b480      	push	{r7}
   801d2:	af00      	add	r7, sp, #0
        while (1) {
        }
   801d4:	e7fe      	b.n	801d4 <Dummy_Handler+0x4>
   801d6:	bf00      	nop

000801d8 <SystemInit>:
/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
   801d8:	b480      	push	{r7}
   801da:	af00      	add	r7, sp, #0
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801dc:	4b2a      	ldr	r3, [pc, #168]	; (80288 <SystemInit+0xb0>)
   801de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801e2:	601a      	str	r2, [r3, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801e4:	4b29      	ldr	r3, [pc, #164]	; (8028c <SystemInit+0xb4>)
   801e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801ea:	601a      	str	r2, [r3, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801ec:	4b28      	ldr	r3, [pc, #160]	; (80290 <SystemInit+0xb8>)
   801ee:	6a1b      	ldr	r3, [r3, #32]
   801f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   801f4:	2b00      	cmp	r3, #0
   801f6:	d109      	bne.n	8020c <SystemInit+0x34>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801f8:	4b25      	ldr	r3, [pc, #148]	; (80290 <SystemInit+0xb8>)
   801fa:	4a26      	ldr	r2, [pc, #152]	; (80294 <SystemInit+0xbc>)
   801fc:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801fe:	bf00      	nop
   80200:	4b23      	ldr	r3, [pc, #140]	; (80290 <SystemInit+0xb8>)
   80202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80204:	f003 0301 	and.w	r3, r3, #1
   80208:	2b00      	cmp	r3, #0
   8020a:	d0f9      	beq.n	80200 <SystemInit+0x28>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8020c:	4b20      	ldr	r3, [pc, #128]	; (80290 <SystemInit+0xb8>)
   8020e:	4a22      	ldr	r2, [pc, #136]	; (80298 <SystemInit+0xc0>)
   80210:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80212:	bf00      	nop
   80214:	4b1e      	ldr	r3, [pc, #120]	; (80290 <SystemInit+0xb8>)
   80216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8021c:	2b00      	cmp	r3, #0
   8021e:	d0f9      	beq.n	80214 <SystemInit+0x3c>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80220:	4b1b      	ldr	r3, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80222:	4a1b      	ldr	r2, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80224:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80226:	f022 0203 	bic.w	r2, r2, #3
   8022a:	f042 0201 	orr.w	r2, r2, #1
   8022e:	631a      	str	r2, [r3, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80230:	bf00      	nop
   80232:	4b17      	ldr	r3, [pc, #92]	; (80290 <SystemInit+0xb8>)
   80234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80236:	f003 0308 	and.w	r3, r3, #8
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f9      	beq.n	80232 <SystemInit+0x5a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8023e:	4b14      	ldr	r3, [pc, #80]	; (80290 <SystemInit+0xb8>)
   80240:	4a16      	ldr	r2, [pc, #88]	; (8029c <SystemInit+0xc4>)
   80242:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80244:	bf00      	nop
   80246:	4b12      	ldr	r3, [pc, #72]	; (80290 <SystemInit+0xb8>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f003 0302 	and.w	r3, r3, #2
   8024e:	2b00      	cmp	r3, #0
   80250:	d0f9      	beq.n	80246 <SystemInit+0x6e>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80252:	4b0f      	ldr	r3, [pc, #60]	; (80290 <SystemInit+0xb8>)
   80254:	2211      	movs	r2, #17
   80256:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80258:	bf00      	nop
   8025a:	4b0d      	ldr	r3, [pc, #52]	; (80290 <SystemInit+0xb8>)
   8025c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8025e:	f003 0308 	and.w	r3, r3, #8
   80262:	2b00      	cmp	r3, #0
   80264:	d0f9      	beq.n	8025a <SystemInit+0x82>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80266:	4b0a      	ldr	r3, [pc, #40]	; (80290 <SystemInit+0xb8>)
   80268:	2212      	movs	r2, #18
   8026a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8026c:	bf00      	nop
   8026e:	4b08      	ldr	r3, [pc, #32]	; (80290 <SystemInit+0xb8>)
   80270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80272:	f003 0308 	and.w	r3, r3, #8
   80276:	2b00      	cmp	r3, #0
   80278:	d0f9      	beq.n	8026e <SystemInit+0x96>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8027a:	4b09      	ldr	r3, [pc, #36]	; (802a0 <SystemInit+0xc8>)
   8027c:	4a09      	ldr	r2, [pc, #36]	; (802a4 <SystemInit+0xcc>)
   8027e:	601a      	str	r2, [r3, #0]
}
   80280:	46bd      	mov	sp, r7
   80282:	f85d 7b04 	ldr.w	r7, [sp], #4
   80286:	4770      	bx	lr
   80288:	400e0a00 	.word	0x400e0a00
   8028c:	400e0c00 	.word	0x400e0c00
   80290:	400e0600 	.word	0x400e0600
   80294:	00370809 	.word	0x00370809
   80298:	01370809 	.word	0x01370809
   8029c:	200d3f01 	.word	0x200d3f01
   802a0:	20000000 	.word	0x20000000
   802a4:	0501bd00 	.word	0x0501bd00

000802a8 <PIOB_Handler>:


// *************************************************************************************************************************************

void PIOB_Handler()
{
   802a8:	b480      	push	{r7}
   802aa:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTB we need to
	//  check if PB27 is the one triggering the interrupt.
	if((PIOB->PIO_ISR & PIO_PB27)==PIO_PB27){
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <PIOB_Handler+0x2c>)
   802ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   802b4:	2b00      	cmp	r3, #0
   802b6:	d009      	beq.n	802cc <PIOB_Handler+0x24>
		iEncoder_ST++;
   802b8:	4b07      	ldr	r3, [pc, #28]	; (802d8 <PIOB_Handler+0x30>)
   802ba:	681b      	ldr	r3, [r3, #0]
   802bc:	1c5a      	adds	r2, r3, #1
   802be:	4b06      	ldr	r3, [pc, #24]	; (802d8 <PIOB_Handler+0x30>)
   802c0:	601a      	str	r2, [r3, #0]
		iEncoder_ST_current++;
   802c2:	4b06      	ldr	r3, [pc, #24]	; (802dc <PIOB_Handler+0x34>)
   802c4:	681b      	ldr	r3, [r3, #0]
   802c6:	1c5a      	adds	r2, r3, #1
   802c8:	4b04      	ldr	r3, [pc, #16]	; (802dc <PIOB_Handler+0x34>)
   802ca:	601a      	str	r2, [r3, #0]
	}
}
   802cc:	46bd      	mov	sp, r7
   802ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   802d2:	4770      	bx	lr
   802d4:	400e1000 	.word	0x400e1000
   802d8:	20000458 	.word	0x20000458
   802dc:	20000460 	.word	0x20000460

000802e0 <PIOD_Handler>:

void PIOD_Handler()
{
   802e0:	b480      	push	{r7}
   802e2:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTD we need to
	//  check if PD8 is the one triggering the interrupt.
	if((PIOD->PIO_ISR & PIO_PD8)==PIO_PD8){
   802e4:	4b09      	ldr	r3, [pc, #36]	; (8030c <PIOD_Handler+0x2c>)
   802e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
   802ec:	2b00      	cmp	r3, #0
   802ee:	d009      	beq.n	80304 <PIOD_Handler+0x24>
		iEncoder_DR++;
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <PIOD_Handler+0x30>)
   802f2:	681b      	ldr	r3, [r3, #0]
   802f4:	1c5a      	adds	r2, r3, #1
   802f6:	4b06      	ldr	r3, [pc, #24]	; (80310 <PIOD_Handler+0x30>)
   802f8:	601a      	str	r2, [r3, #0]
		iEncoder_DR_current++;
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <PIOD_Handler+0x34>)
   802fc:	681b      	ldr	r3, [r3, #0]
   802fe:	1c5a      	adds	r2, r3, #1
   80300:	4b04      	ldr	r3, [pc, #16]	; (80314 <PIOD_Handler+0x34>)
   80302:	601a      	str	r2, [r3, #0]
	}
}
   80304:	46bd      	mov	sp, r7
   80306:	f85d 7b04 	ldr.w	r7, [sp], #4
   8030a:	4770      	bx	lr
   8030c:	400e1400 	.word	0x400e1400
   80310:	20000468 	.word	0x20000468
   80314:	2000045c 	.word	0x2000045c

00080318 <main>:
uint8_t c = 4;

// *************************************************************************************************************************************

int main(void)
{
   80318:	b580      	push	{r7, lr}
   8031a:	af00      	add	r7, sp, #0
    /* Initialize the SAM system */
    SystemInit();
   8031c:	4b09      	ldr	r3, [pc, #36]	; (80344 <main+0x2c>)
   8031e:	4798      	blx	r3
	/* Initialize pins */
	Pin_Configuration();
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <main+0x30>)
   80322:	4798      	blx	r3
	/* Initialize PWM generator */
	InitPWMController_MCLK(); 
   80324:	4b09      	ldr	r3, [pc, #36]	; (8034c <main+0x34>)
   80326:	4798      	blx	r3
	/* Initialize timers */
	Configure_Timers();
   80328:	4b09      	ldr	r3, [pc, #36]	; (80350 <main+0x38>)
   8032a:	4798      	blx	r3
	/* Configre UART */
	configure_uart();
   8032c:	4b09      	ldr	r3, [pc, #36]	; (80354 <main+0x3c>)
   8032e:	4798      	blx	r3
	
	
	/* Disable watchdog */
	WDT->WDT_MR |=  WDT_MR_WDDIS;
   80330:	4b09      	ldr	r3, [pc, #36]	; (80358 <main+0x40>)
   80332:	4a09      	ldr	r2, [pc, #36]	; (80358 <main+0x40>)
   80334:	6852      	ldr	r2, [r2, #4]
   80336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   8033a:	605a      	str	r2, [r3, #4]
	
	/* Run initialization sequence for motor drivers */
	InitMotors();
   8033c:	4b07      	ldr	r3, [pc, #28]	; (8035c <main+0x44>)
   8033e:	4798      	blx	r3
	
    while (1) 
    {
		
		
	}
   80340:	e7fe      	b.n	80340 <main+0x28>
   80342:	bf00      	nop
   80344:	000801d9 	.word	0x000801d9
   80348:	00080391 	.word	0x00080391
   8034c:	00080569 	.word	0x00080569
   80350:	000807c9 	.word	0x000807c9
   80354:	000809c5 	.word	0x000809c5
   80358:	400e1a50 	.word	0x400e1a50
   8035c:	00080721 	.word	0x00080721

00080360 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80360:	b480      	push	{r7}
   80362:	b083      	sub	sp, #12
   80364:	af00      	add	r7, sp, #0
   80366:	4603      	mov	r3, r0
   80368:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8036a:	4b08      	ldr	r3, [pc, #32]	; (8038c <NVIC_EnableIRQ+0x2c>)
   8036c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80370:	0952      	lsrs	r2, r2, #5
   80372:	79f9      	ldrb	r1, [r7, #7]
   80374:	f001 011f 	and.w	r1, r1, #31
   80378:	2001      	movs	r0, #1
   8037a:	fa00 f101 	lsl.w	r1, r0, r1
   8037e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80382:	370c      	adds	r7, #12
   80384:	46bd      	mov	sp, r7
   80386:	f85d 7b04 	ldr.w	r7, [sp], #4
   8038a:	4770      	bx	lr
   8038c:	e000e100 	.word	0xe000e100

00080390 <Pin_Configuration>:
// ----- Defines
#define _BV(bit) (0x1u << bit)

// *************************************************************************************************************************************
void Pin_Configuration()
{
   80390:	b580      	push	{r7, lr}
   80392:	af00      	add	r7, sp, #0
	// Enable clock for line C
		PMC->PMC_PCER0 |= _BV(ID_PIOC);
   80394:	4b6f      	ldr	r3, [pc, #444]	; (80554 <Pin_Configuration+0x1c4>)
   80396:	4a6f      	ldr	r2, [pc, #444]	; (80554 <Pin_Configuration+0x1c4>)
   80398:	6912      	ldr	r2, [r2, #16]
   8039a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8039e:	611a      	str	r2, [r3, #16]
	// Enable clock for line B
		PMC->PMC_PCER0 |= _BV(ID_PIOB);
   803a0:	4b6c      	ldr	r3, [pc, #432]	; (80554 <Pin_Configuration+0x1c4>)
   803a2:	4a6c      	ldr	r2, [pc, #432]	; (80554 <Pin_Configuration+0x1c4>)
   803a4:	6912      	ldr	r2, [r2, #16]
   803a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   803aa:	611a      	str	r2, [r3, #16]
	// Enable clock for line D
		PMC->PMC_PCER0 |= _BV(ID_PIOD);
   803ac:	4b69      	ldr	r3, [pc, #420]	; (80554 <Pin_Configuration+0x1c4>)
   803ae:	4a69      	ldr	r2, [pc, #420]	; (80554 <Pin_Configuration+0x1c4>)
   803b0:	6912      	ldr	r2, [r2, #16]
   803b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   803b6:	611a      	str	r2, [r3, #16]

	// Set pin 13[B27] as input for encoder data - left[ST]
		PIOB -> PIO_PER |= PIO_PB27;
   803b8:	4b67      	ldr	r3, [pc, #412]	; (80558 <Pin_Configuration+0x1c8>)
   803ba:	4a67      	ldr	r2, [pc, #412]	; (80558 <Pin_Configuration+0x1c8>)
   803bc:	6812      	ldr	r2, [r2, #0]
   803be:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   803c2:	601a      	str	r2, [r3, #0]
		PIOB -> PIO_ODR |= PIO_PB27;
   803c4:	4b64      	ldr	r3, [pc, #400]	; (80558 <Pin_Configuration+0x1c8>)
   803c6:	4a64      	ldr	r2, [pc, #400]	; (80558 <Pin_Configuration+0x1c8>)
   803c8:	6952      	ldr	r2, [r2, #20]
   803ca:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   803ce:	615a      	str	r2, [r3, #20]
		PIOB -> PIO_PUDR |= PIO_PB27;
   803d0:	4b61      	ldr	r3, [pc, #388]	; (80558 <Pin_Configuration+0x1c8>)
   803d2:	4a61      	ldr	r2, [pc, #388]	; (80558 <Pin_Configuration+0x1c8>)
   803d4:	6e12      	ldr	r2, [r2, #96]	; 0x60
   803d6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   803da:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOB->PIO_AIMER |= PIO_PB27;
   803dc:	4b5e      	ldr	r3, [pc, #376]	; (80558 <Pin_Configuration+0x1c8>)
   803de:	4a5e      	ldr	r2, [pc, #376]	; (80558 <Pin_Configuration+0x1c8>)
   803e0:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   803e4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   803e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOB->PIO_ESR |= PIO_PB27;
   803ec:	4b5a      	ldr	r3, [pc, #360]	; (80558 <Pin_Configuration+0x1c8>)
   803ee:	4a5a      	ldr	r2, [pc, #360]	; (80558 <Pin_Configuration+0x1c8>)
   803f0:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   803f4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   803f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Falling Edge/Low Level Select Register
		PIOB->PIO_REHLSR |= PIO_PB27;
   803fc:	4b56      	ldr	r3, [pc, #344]	; (80558 <Pin_Configuration+0x1c8>)
   803fe:	4a56      	ldr	r2, [pc, #344]	; (80558 <Pin_Configuration+0x1c8>)
   80400:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   80404:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80408:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTB.PB27
		PIOB->PIO_IER |= PIO_PB27;
   8040c:	4b52      	ldr	r3, [pc, #328]	; (80558 <Pin_Configuration+0x1c8>)
   8040e:	4a52      	ldr	r2, [pc, #328]	; (80558 <Pin_Configuration+0x1c8>)
   80410:	6c12      	ldr	r2, [r2, #64]	; 0x40
   80412:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80416:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOB_IRQn);
   80418:	200c      	movs	r0, #12
   8041a:	4b50      	ldr	r3, [pc, #320]	; (8055c <Pin_Configuration+0x1cc>)
   8041c:	4798      	blx	r3
	
	// Set pin 12[D8] as input for encoder data - right[DR]
		PIOD -> PIO_PER |= PIO_PD8;
   8041e:	4b50      	ldr	r3, [pc, #320]	; (80560 <Pin_Configuration+0x1d0>)
   80420:	4a4f      	ldr	r2, [pc, #316]	; (80560 <Pin_Configuration+0x1d0>)
   80422:	6812      	ldr	r2, [r2, #0]
   80424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80428:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_ODR |= PIO_PD8;
   8042a:	4b4d      	ldr	r3, [pc, #308]	; (80560 <Pin_Configuration+0x1d0>)
   8042c:	4a4c      	ldr	r2, [pc, #304]	; (80560 <Pin_Configuration+0x1d0>)
   8042e:	6952      	ldr	r2, [r2, #20]
   80430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80434:	615a      	str	r2, [r3, #20]
		PIOD -> PIO_PUDR |= PIO_PD8;
   80436:	4b4a      	ldr	r3, [pc, #296]	; (80560 <Pin_Configuration+0x1d0>)
   80438:	4a49      	ldr	r2, [pc, #292]	; (80560 <Pin_Configuration+0x1d0>)
   8043a:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8043c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80440:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOD -> PIO_AIMER |= PIO_PD8;
   80442:	4b47      	ldr	r3, [pc, #284]	; (80560 <Pin_Configuration+0x1d0>)
   80444:	4a46      	ldr	r2, [pc, #280]	; (80560 <Pin_Configuration+0x1d0>)
   80446:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   8044a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8044e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOD -> PIO_ESR |= PIO_PD8;
   80452:	4b43      	ldr	r3, [pc, #268]	; (80560 <Pin_Configuration+0x1d0>)
   80454:	4a42      	ldr	r2, [pc, #264]	; (80560 <Pin_Configuration+0x1d0>)
   80456:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   8045a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8045e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Falling Edge/Low Level Select Register
		PIOD -> PIO_REHLSR |= PIO_PD8;
   80462:	4b3f      	ldr	r3, [pc, #252]	; (80560 <Pin_Configuration+0x1d0>)
   80464:	4a3e      	ldr	r2, [pc, #248]	; (80560 <Pin_Configuration+0x1d0>)
   80466:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   8046a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8046e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTD.PD8
		PIOD -> PIO_IER |= PIO_PD8;
   80472:	4b3b      	ldr	r3, [pc, #236]	; (80560 <Pin_Configuration+0x1d0>)
   80474:	4a3a      	ldr	r2, [pc, #232]	; (80560 <Pin_Configuration+0x1d0>)
   80476:	6c12      	ldr	r2, [r2, #64]	; 0x40
   80478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8047c:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOD_IRQn);
   8047e:	200e      	movs	r0, #14
   80480:	4b36      	ldr	r3, [pc, #216]	; (8055c <Pin_Configuration+0x1cc>)
   80482:	4798      	blx	r3
		
	// Set pin 11[D7] as output for Buzzer - PCB2 pin U
		PIOD -> PIO_PER |= PIO_PD7; // PIO_PER = PIO enable register
   80484:	4b36      	ldr	r3, [pc, #216]	; (80560 <Pin_Configuration+0x1d0>)
   80486:	4a36      	ldr	r2, [pc, #216]	; (80560 <Pin_Configuration+0x1d0>)
   80488:	6812      	ldr	r2, [r2, #0]
   8048a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8048e:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_OER |= PIO_PD7; // PIO_OER = Output Enable Register
   80490:	4b33      	ldr	r3, [pc, #204]	; (80560 <Pin_Configuration+0x1d0>)
   80492:	4a33      	ldr	r2, [pc, #204]	; (80560 <Pin_Configuration+0x1d0>)
   80494:	6912      	ldr	r2, [r2, #16]
   80496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8049a:	611a      	str	r2, [r3, #16]
		PIOD -> PIO_PUDR |= PIO_PD7; // Disable pull-up on pin D7
   8049c:	4b30      	ldr	r3, [pc, #192]	; (80560 <Pin_Configuration+0x1d0>)
   8049e:	4a30      	ldr	r2, [pc, #192]	; (80560 <Pin_Configuration+0x1d0>)
   804a0:	6e12      	ldr	r2, [r2, #96]	; 0x60
   804a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804a6:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 9[C21] as PWM output for motors - left[ST]
		PIOC->PIO_PDR |= PIO_PC22; // PIO_PDR = PIO Disable register
   804a8:	4b2e      	ldr	r3, [pc, #184]	; (80564 <Pin_Configuration+0x1d4>)
   804aa:	4a2e      	ldr	r2, [pc, #184]	; (80564 <Pin_Configuration+0x1d4>)
   804ac:	6852      	ldr	r2, [r2, #4]
   804ae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804b2:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC22; // PIO_ABSR = Peripheral AB Select Register
   804b4:	4b2b      	ldr	r3, [pc, #172]	; (80564 <Pin_Configuration+0x1d4>)
   804b6:	4a2b      	ldr	r2, [pc, #172]	; (80564 <Pin_Configuration+0x1d4>)
   804b8:	6f12      	ldr	r2, [r2, #112]	; 0x70
   804ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804be:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC22; // Enable output on pin C22
   804c0:	4b28      	ldr	r3, [pc, #160]	; (80564 <Pin_Configuration+0x1d4>)
   804c2:	4a28      	ldr	r2, [pc, #160]	; (80564 <Pin_Configuration+0x1d4>)
   804c4:	6912      	ldr	r2, [r2, #16]
   804c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804ca:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC22; // Disable pull-up on pin C22
   804cc:	4b25      	ldr	r3, [pc, #148]	; (80564 <Pin_Configuration+0x1d4>)
   804ce:	4a25      	ldr	r2, [pc, #148]	; (80564 <Pin_Configuration+0x1d4>)
   804d0:	6e12      	ldr	r2, [r2, #96]	; 0x60
   804d2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804d6:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 8[C22] as PWM output for motors - right[DR]
		PIOC->PIO_PDR |= PIO_PC21; // Disable PIO Control on PC21 and set up for Peripheral B
   804d8:	4b22      	ldr	r3, [pc, #136]	; (80564 <Pin_Configuration+0x1d4>)
   804da:	4a22      	ldr	r2, [pc, #136]	; (80564 <Pin_Configuration+0x1d4>)
   804dc:	6852      	ldr	r2, [r2, #4]
   804de:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   804e2:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC21;
   804e4:	4b1f      	ldr	r3, [pc, #124]	; (80564 <Pin_Configuration+0x1d4>)
   804e6:	4a1f      	ldr	r2, [pc, #124]	; (80564 <Pin_Configuration+0x1d4>)
   804e8:	6f12      	ldr	r2, [r2, #112]	; 0x70
   804ea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   804ee:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC21; // Enable output on pin C21
   804f0:	4b1c      	ldr	r3, [pc, #112]	; (80564 <Pin_Configuration+0x1d4>)
   804f2:	4a1c      	ldr	r2, [pc, #112]	; (80564 <Pin_Configuration+0x1d4>)
   804f4:	6912      	ldr	r2, [r2, #16]
   804f6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   804fa:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC21; // Enable pull-up on pin C21
   804fc:	4b19      	ldr	r3, [pc, #100]	; (80564 <Pin_Configuration+0x1d4>)
   804fe:	4a19      	ldr	r2, [pc, #100]	; (80564 <Pin_Configuration+0x1d4>)
   80500:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80502:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   80506:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 7[C23] as output for LED - PCB2 pinS
		PIOC -> PIO_PER |= PIO_PC23;
   80508:	4b16      	ldr	r3, [pc, #88]	; (80564 <Pin_Configuration+0x1d4>)
   8050a:	4a16      	ldr	r2, [pc, #88]	; (80564 <Pin_Configuration+0x1d4>)
   8050c:	6812      	ldr	r2, [r2, #0]
   8050e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80512:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC23;
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <Pin_Configuration+0x1d4>)
   80516:	4a13      	ldr	r2, [pc, #76]	; (80564 <Pin_Configuration+0x1d4>)
   80518:	6912      	ldr	r2, [r2, #16]
   8051a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8051e:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC23;
   80520:	4b10      	ldr	r3, [pc, #64]	; (80564 <Pin_Configuration+0x1d4>)
   80522:	4a10      	ldr	r2, [pc, #64]	; (80564 <Pin_Configuration+0x1d4>)
   80524:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80526:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8052a:	661a      	str	r2, [r3, #96]	; 0x60
		
	// Set pin 6[C24] as output for PUMP - PCB2 pinH
		PIOC -> PIO_PER |= PIO_PC24;
   8052c:	4b0d      	ldr	r3, [pc, #52]	; (80564 <Pin_Configuration+0x1d4>)
   8052e:	4a0d      	ldr	r2, [pc, #52]	; (80564 <Pin_Configuration+0x1d4>)
   80530:	6812      	ldr	r2, [r2, #0]
   80532:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80536:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC24;
   80538:	4b0a      	ldr	r3, [pc, #40]	; (80564 <Pin_Configuration+0x1d4>)
   8053a:	4a0a      	ldr	r2, [pc, #40]	; (80564 <Pin_Configuration+0x1d4>)
   8053c:	6912      	ldr	r2, [r2, #16]
   8053e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80542:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC24;
   80544:	4b07      	ldr	r3, [pc, #28]	; (80564 <Pin_Configuration+0x1d4>)
   80546:	4a07      	ldr	r2, [pc, #28]	; (80564 <Pin_Configuration+0x1d4>)
   80548:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8054a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8054e:	661a      	str	r2, [r3, #96]	; 0x60
		////Falling Edge/Low Level Select Register
		//PIOB->PIO_REHLSR |= PIO_PB27;
		////Finally enable interrupts on PORTB.PB27
		//PIOB->PIO_IER |= PIO_PB27;
		//NVIC_EnableIRQ(PIOB_IRQn);
}
   80550:	bd80      	pop	{r7, pc}
   80552:	bf00      	nop
   80554:	400e0600 	.word	0x400e0600
   80558:	400e1000 	.word	0x400e1000
   8055c:	00080361 	.word	0x00080361
   80560:	400e1400 	.word	0x400e1400
   80564:	400e1200 	.word	0x400e1200

00080568 <InitPWMController_MCLK>:
void ControlledDrive(uint8_t percentage_ST, uint8_t percentage_DR);

// *************************************************************************************************************************************

void InitPWMController_MCLK()
{
   80568:	b580      	push	{r7, lr}
   8056a:	af00      	add	r7, sp, #0
	//Enable the PWM clock (36) 
	PMC->PMC_PCER1 |= _BV((ID_PWM - 32)); // PMC_PCER1 = Peripheral Clock Enable Register 1
   8056c:	4b14      	ldr	r3, [pc, #80]	; (805c0 <InitPWMController_MCLK+0x58>)
   8056e:	4a14      	ldr	r2, [pc, #80]	; (805c0 <InitPWMController_MCLK+0x58>)
   80570:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   80574:	f042 0210 	orr.w	r2, r2, #16
   80578:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	//Channel Prescaler - Use ClockA as configured in PWM_CLK
	//Preliminary frequency = 84000000 / 1024 = 82031 Hz
	PWM->PWM_CH_NUM[CHAN_ST].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   8057c:	4b11      	ldr	r3, [pc, #68]	; (805c4 <InitPWMController_MCLK+0x5c>)
   8057e:	220a      	movs	r2, #10
   80580:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[CHAN_DR].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   80584:	4b0f      	ldr	r3, [pc, #60]	; (805c4 <InitPWMController_MCLK+0x5c>)
   80586:	220a      	movs	r2, #10
   80588:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	//Final frequency = 82031 / 1600 = 51 Hz
	SetPeriod(CHAN_ST, 1640);
   8058c:	2004      	movs	r0, #4
   8058e:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   80592:	4b0d      	ldr	r3, [pc, #52]	; (805c8 <InitPWMController_MCLK+0x60>)
   80594:	4798      	blx	r3
	//Duty cycle = (200 / 400) * 100 = 50%
	SetDuty(CHAN_ST, 100);
   80596:	2004      	movs	r0, #4
   80598:	2164      	movs	r1, #100	; 0x64
   8059a:	4b0c      	ldr	r3, [pc, #48]	; (805cc <InitPWMController_MCLK+0x64>)
   8059c:	4798      	blx	r3
	
	//Final frequency = 82031 / 1600 = 51Hz
	SetPeriod(CHAN_DR, 1640);
   8059e:	2005      	movs	r0, #5
   805a0:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   805a4:	4b08      	ldr	r3, [pc, #32]	; (805c8 <InitPWMController_MCLK+0x60>)
   805a6:	4798      	blx	r3
	//Duty cycle = (x / 800) * 100 = y%
	SetDuty(CHAN_DR, 100);
   805a8:	2005      	movs	r0, #5
   805aa:	2164      	movs	r1, #100	; 0x64
   805ac:	4b07      	ldr	r3, [pc, #28]	; (805cc <InitPWMController_MCLK+0x64>)
   805ae:	4798      	blx	r3
	
	PWM->PWM_ENA = _BV(CHAN_DR); // PWM_ENA = PWM Enable Register
   805b0:	4b04      	ldr	r3, [pc, #16]	; (805c4 <InitPWMController_MCLK+0x5c>)
   805b2:	2220      	movs	r2, #32
   805b4:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA = _BV(CHAN_ST); // PWM_ENA = PWM Enable Register
   805b6:	4b03      	ldr	r3, [pc, #12]	; (805c4 <InitPWMController_MCLK+0x5c>)
   805b8:	2210      	movs	r2, #16
   805ba:	605a      	str	r2, [r3, #4]
}
   805bc:	bd80      	pop	{r7, pc}
   805be:	bf00      	nop
   805c0:	400e0600 	.word	0x400e0600
   805c4:	40094000 	.word	0x40094000
   805c8:	000805d1 	.word	0x000805d1
   805cc:	0008061d 	.word	0x0008061d

000805d0 <SetPeriod>:

static void SetPeriod(uint32_t chan, int period)
{
   805d0:	b480      	push	{r7}
   805d2:	b083      	sub	sp, #12
   805d4:	af00      	add	r7, sp, #0
   805d6:	6078      	str	r0, [r7, #4]
   805d8:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   805da:	4b0f      	ldr	r3, [pc, #60]	; (80618 <SetPeriod+0x48>)
   805dc:	68da      	ldr	r2, [r3, #12]
   805de:	687b      	ldr	r3, [r7, #4]
   805e0:	2101      	movs	r1, #1
   805e2:	fa01 f303 	lsl.w	r3, r1, r3
   805e6:	4013      	ands	r3, r2
   805e8:	2b00      	cmp	r3, #0
   805ea:	d108      	bne.n	805fe <SetPeriod+0x2e>
		PWM->PWM_CH_NUM[chan].PWM_CPRD = period; // PWM_CPRD = PWM Channel Period Register
   805ec:	490a      	ldr	r1, [pc, #40]	; (80618 <SetPeriod+0x48>)
   805ee:	683a      	ldr	r2, [r7, #0]
   805f0:	687b      	ldr	r3, [r7, #4]
   805f2:	015b      	lsls	r3, r3, #5
   805f4:	440b      	add	r3, r1
   805f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805fa:	605a      	str	r2, [r3, #4]
   805fc:	e007      	b.n	8060e <SetPeriod+0x3e>
	else
		PWM->PWM_CH_NUM[chan].PWM_CPRDUPD = period; // PWM_CPRDUPD = PWM Channel Period Update Register
   805fe:	4906      	ldr	r1, [pc, #24]	; (80618 <SetPeriod+0x48>)
   80600:	683a      	ldr	r2, [r7, #0]
   80602:	687b      	ldr	r3, [r7, #4]
   80604:	015b      	lsls	r3, r3, #5
   80606:	440b      	add	r3, r1
   80608:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8060c:	601a      	str	r2, [r3, #0]
}
   8060e:	370c      	adds	r7, #12
   80610:	46bd      	mov	sp, r7
   80612:	f85d 7b04 	ldr.w	r7, [sp], #4
   80616:	4770      	bx	lr
   80618:	40094000 	.word	0x40094000

0008061c <SetDuty>:

static void SetDuty(uint32_t chan, int duty)
{
   8061c:	b480      	push	{r7}
   8061e:	b083      	sub	sp, #12
   80620:	af00      	add	r7, sp, #0
   80622:	6078      	str	r0, [r7, #4]
   80624:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   80626:	4b0f      	ldr	r3, [pc, #60]	; (80664 <SetDuty+0x48>)
   80628:	68da      	ldr	r2, [r3, #12]
   8062a:	687b      	ldr	r3, [r7, #4]
   8062c:	2101      	movs	r1, #1
   8062e:	fa01 f303 	lsl.w	r3, r1, r3
   80632:	4013      	ands	r3, r2
   80634:	2b00      	cmp	r3, #0
   80636:	d107      	bne.n	80648 <SetDuty+0x2c>
		PWM->PWM_CH_NUM[chan].PWM_CDTY = duty;
   80638:	490a      	ldr	r1, [pc, #40]	; (80664 <SetDuty+0x48>)
   8063a:	683a      	ldr	r2, [r7, #0]
   8063c:	687b      	ldr	r3, [r7, #4]
   8063e:	3310      	adds	r3, #16
   80640:	015b      	lsls	r3, r3, #5
   80642:	440b      	add	r3, r1
   80644:	605a      	str	r2, [r3, #4]
   80646:	e007      	b.n	80658 <SetDuty+0x3c>
	else
		PWM->PWM_CH_NUM[chan].PWM_CDTYUPD = duty;
   80648:	4906      	ldr	r1, [pc, #24]	; (80664 <SetDuty+0x48>)
   8064a:	683a      	ldr	r2, [r7, #0]
   8064c:	687b      	ldr	r3, [r7, #4]
   8064e:	015b      	lsls	r3, r3, #5
   80650:	440b      	add	r3, r1
   80652:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80656:	601a      	str	r2, [r3, #0]
}
   80658:	370c      	adds	r7, #12
   8065a:	46bd      	mov	sp, r7
   8065c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80660:	4770      	bx	lr
   80662:	bf00      	nop
   80664:	40094000 	.word	0x40094000

00080668 <WriteMotors>:

void WriteMotors(int percent_ST, int percent_DR)
{
   80668:	b590      	push	{r4, r7, lr}
   8066a:	b083      	sub	sp, #12
   8066c:	af00      	add	r7, sp, #0
   8066e:	6078      	str	r0, [r7, #4]
   80670:	6039      	str	r1, [r7, #0]
	SetDuty(CHAN_ST,123+(percent_ST/2.43)); // PWM motor stanga
   80672:	4b25      	ldr	r3, [pc, #148]	; (80708 <WriteMotors+0xa0>)
   80674:	6878      	ldr	r0, [r7, #4]
   80676:	4798      	blx	r3
   80678:	4602      	mov	r2, r0
   8067a:	460b      	mov	r3, r1
   8067c:	4c23      	ldr	r4, [pc, #140]	; (8070c <WriteMotors+0xa4>)
   8067e:	4610      	mov	r0, r2
   80680:	4619      	mov	r1, r3
   80682:	a31d      	add	r3, pc, #116	; (adr r3, 806f8 <WriteMotors+0x90>)
   80684:	e9d3 2300 	ldrd	r2, r3, [r3]
   80688:	47a0      	blx	r4
   8068a:	4602      	mov	r2, r0
   8068c:	460b      	mov	r3, r1
   8068e:	4c20      	ldr	r4, [pc, #128]	; (80710 <WriteMotors+0xa8>)
   80690:	4610      	mov	r0, r2
   80692:	4619      	mov	r1, r3
   80694:	a31a      	add	r3, pc, #104	; (adr r3, 80700 <WriteMotors+0x98>)
   80696:	e9d3 2300 	ldrd	r2, r3, [r3]
   8069a:	47a0      	blx	r4
   8069c:	4602      	mov	r2, r0
   8069e:	460b      	mov	r3, r1
   806a0:	4c1c      	ldr	r4, [pc, #112]	; (80714 <WriteMotors+0xac>)
   806a2:	4610      	mov	r0, r2
   806a4:	4619      	mov	r1, r3
   806a6:	47a0      	blx	r4
   806a8:	4603      	mov	r3, r0
   806aa:	2004      	movs	r0, #4
   806ac:	4619      	mov	r1, r3
   806ae:	4b1a      	ldr	r3, [pc, #104]	; (80718 <WriteMotors+0xb0>)
   806b0:	4798      	blx	r3
	SetDuty(CHAN_DR,123-(percent_DR/2.43)); // PWM motor dreapta
   806b2:	4b15      	ldr	r3, [pc, #84]	; (80708 <WriteMotors+0xa0>)
   806b4:	6838      	ldr	r0, [r7, #0]
   806b6:	4798      	blx	r3
   806b8:	4602      	mov	r2, r0
   806ba:	460b      	mov	r3, r1
   806bc:	4c13      	ldr	r4, [pc, #76]	; (8070c <WriteMotors+0xa4>)
   806be:	4610      	mov	r0, r2
   806c0:	4619      	mov	r1, r3
   806c2:	a30d      	add	r3, pc, #52	; (adr r3, 806f8 <WriteMotors+0x90>)
   806c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   806c8:	47a0      	blx	r4
   806ca:	4602      	mov	r2, r0
   806cc:	460b      	mov	r3, r1
   806ce:	4c13      	ldr	r4, [pc, #76]	; (8071c <WriteMotors+0xb4>)
   806d0:	a10b      	add	r1, pc, #44	; (adr r1, 80700 <WriteMotors+0x98>)
   806d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   806d6:	47a0      	blx	r4
   806d8:	4602      	mov	r2, r0
   806da:	460b      	mov	r3, r1
   806dc:	4c0d      	ldr	r4, [pc, #52]	; (80714 <WriteMotors+0xac>)
   806de:	4610      	mov	r0, r2
   806e0:	4619      	mov	r1, r3
   806e2:	47a0      	blx	r4
   806e4:	4603      	mov	r3, r0
   806e6:	2005      	movs	r0, #5
   806e8:	4619      	mov	r1, r3
   806ea:	4b0b      	ldr	r3, [pc, #44]	; (80718 <WriteMotors+0xb0>)
   806ec:	4798      	blx	r3
}
   806ee:	370c      	adds	r7, #12
   806f0:	46bd      	mov	sp, r7
   806f2:	bd90      	pop	{r4, r7, pc}
   806f4:	f3af 8000 	nop.w
   806f8:	d70a3d71 	.word	0xd70a3d71
   806fc:	400370a3 	.word	0x400370a3
   80700:	00000000 	.word	0x00000000
   80704:	405ec000 	.word	0x405ec000
   80708:	00080e19 	.word	0x00080e19
   8070c:	00081139 	.word	0x00081139
   80710:	00080b81 	.word	0x00080b81
   80714:	00081309 	.word	0x00081309
   80718:	0008061d 	.word	0x0008061d
   8071c:	00080b7d 	.word	0x00080b7d

00080720 <InitMotors>:

void InitMotors()
{
   80720:	b580      	push	{r7, lr}
   80722:	af00      	add	r7, sp, #0
	WriteMotors(0,0);
   80724:	2000      	movs	r0, #0
   80726:	2100      	movs	r1, #0
   80728:	4b18      	ldr	r3, [pc, #96]	; (8078c <InitMotors+0x6c>)
   8072a:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23; 
   8072c:	4b18      	ldr	r3, [pc, #96]	; (80790 <InitMotors+0x70>)
   8072e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80732:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   80734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80738:	4b16      	ldr	r3, [pc, #88]	; (80794 <InitMotors+0x74>)
   8073a:	4798      	blx	r3
	
	WriteMotors(100,100);//Stop Motors; Percent_RIGHT|Percent_LEFT
   8073c:	2064      	movs	r0, #100	; 0x64
   8073e:	2164      	movs	r1, #100	; 0x64
   80740:	4b12      	ldr	r3, [pc, #72]	; (8078c <InitMotors+0x6c>)
   80742:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   80744:	4b12      	ldr	r3, [pc, #72]	; (80790 <InitMotors+0x70>)
   80746:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8074a:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(1000);
   8074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80750:	4b10      	ldr	r3, [pc, #64]	; (80794 <InitMotors+0x74>)
   80752:	4798      	blx	r3
	
	WriteMotors(-100,-100);
   80754:	f06f 0063 	mvn.w	r0, #99	; 0x63
   80758:	f06f 0163 	mvn.w	r1, #99	; 0x63
   8075c:	4b0b      	ldr	r3, [pc, #44]	; (8078c <InitMotors+0x6c>)
   8075e:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23;
   80760:	4b0b      	ldr	r3, [pc, #44]	; (80790 <InitMotors+0x70>)
   80762:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80766:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   80768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8076c:	4b09      	ldr	r3, [pc, #36]	; (80794 <InitMotors+0x74>)
   8076e:	4798      	blx	r3
	
	WriteMotors(0,0);//Stop Motors; Percent_RIGHT|Percent_LEFT
   80770:	2000      	movs	r0, #0
   80772:	2100      	movs	r1, #0
   80774:	4b05      	ldr	r3, [pc, #20]	; (8078c <InitMotors+0x6c>)
   80776:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   80778:	4b05      	ldr	r3, [pc, #20]	; (80790 <InitMotors+0x70>)
   8077a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8077e:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(3000);
   80780:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80784:	4b03      	ldr	r3, [pc, #12]	; (80794 <InitMotors+0x74>)
   80786:	4798      	blx	r3
}  
   80788:	bd80      	pop	{r7, pc}
   8078a:	bf00      	nop
   8078c:	00080669 	.word	0x00080669
   80790:	400e1200 	.word	0x400e1200
   80794:	00080849 	.word	0x00080849

00080798 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80798:	b480      	push	{r7}
   8079a:	b083      	sub	sp, #12
   8079c:	af00      	add	r7, sp, #0
   8079e:	4603      	mov	r3, r0
   807a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   807a2:	4b08      	ldr	r3, [pc, #32]	; (807c4 <NVIC_EnableIRQ+0x2c>)
   807a4:	f997 2007 	ldrsb.w	r2, [r7, #7]
   807a8:	0952      	lsrs	r2, r2, #5
   807aa:	79f9      	ldrb	r1, [r7, #7]
   807ac:	f001 011f 	and.w	r1, r1, #31
   807b0:	2001      	movs	r0, #1
   807b2:	fa00 f101 	lsl.w	r1, r0, r1
   807b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   807ba:	370c      	adds	r7, #12
   807bc:	46bd      	mov	sp, r7
   807be:	f85d 7b04 	ldr.w	r7, [sp], #4
   807c2:	4770      	bx	lr
   807c4:	e000e100 	.word	0xe000e100

000807c8 <Configure_Timers>:
void Configure_TC0(void);
void delay_ms(uint32_t iPrescription);

// *************************************************************************************************************************************

void Configure_Timers(){
   807c8:	b580      	push	{r7, lr}
   807ca:	af00      	add	r7, sp, #0
	Configure_TC0();
   807cc:	4b01      	ldr	r3, [pc, #4]	; (807d4 <Configure_Timers+0xc>)
   807ce:	4798      	blx	r3
}
   807d0:	bd80      	pop	{r7, pc}
   807d2:	bf00      	nop
   807d4:	000807d9 	.word	0x000807d9

000807d8 <Configure_TC0>:

void Configure_TC0()
{
   807d8:	b580      	push	{r7, lr}
   807da:	af00      	add	r7, sp, #0
	// Enable TC0 in PMC power management controller - ID 27
	PMC->PMC_PCER0 |= 1 << ID_TC0;
   807dc:	4b0e      	ldr	r3, [pc, #56]	; (80818 <Configure_TC0+0x40>)
   807de:	4a0e      	ldr	r2, [pc, #56]	; (80818 <Configure_TC0+0x40>)
   807e0:	6912      	ldr	r2, [r2, #16]
   807e2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   807e6:	611a      	str	r2, [r3, #16]
	
	// Disable the clock for TC0
	TC0->TC_CHANNEL->TC_CCR = TC_CCR_CLKDIS;
   807e8:	4b0c      	ldr	r3, [pc, #48]	; (8081c <Configure_TC0+0x44>)
   807ea:	2202      	movs	r2, #2
   807ec:	601a      	str	r2, [r3, #0]
	
	// Disable interrupts
	TC0->TC_CHANNEL->TC_IDR = 0xFFFFFFFF;
   807ee:	4b0b      	ldr	r3, [pc, #44]	; (8081c <Configure_TC0+0x44>)
   807f0:	f04f 32ff 	mov.w	r2, #4294967295
   807f4:	629a      	str	r2, [r3, #40]	; 0x28
	
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   807f6:	4b09      	ldr	r3, [pc, #36]	; (8081c <Configure_TC0+0x44>)
   807f8:	6a1b      	ldr	r3, [r3, #32]
	
	// Set Mode
	TC0->TC_CHANNEL->TC_CMR = TC_CMR_CPCTRG | TC_CMR_TCCLKS_TIMER_CLOCK5;
   807fa:	4b08      	ldr	r3, [pc, #32]	; (8081c <Configure_TC0+0x44>)
   807fc:	f244 0204 	movw	r2, #16388	; 0x4004
   80800:	605a      	str	r2, [r3, #4]
	
	// Set compare value register TC_CR
	TC0->TC_CHANNEL[0].TC_RC = 10000;
   80802:	4b06      	ldr	r3, [pc, #24]	; (8081c <Configure_TC0+0x44>)
   80804:	f242 7210 	movw	r2, #10000	; 0x2710
   80808:	61da      	str	r2, [r3, #28]
	
	// Configure and enable interrupt on RC compare
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
   8080a:	201b      	movs	r0, #27
   8080c:	4b04      	ldr	r3, [pc, #16]	; (80820 <Configure_TC0+0x48>)
   8080e:	4798      	blx	r3
	TC0->TC_CHANNEL->TC_IER = TC_IER_CPCS;
   80810:	4b02      	ldr	r3, [pc, #8]	; (8081c <Configure_TC0+0x44>)
   80812:	2210      	movs	r2, #16
   80814:	625a      	str	r2, [r3, #36]	; 0x24
	
	// Enable interrupts
	//TC0->TC_CHANNEL->TC_IER = 0xFFFFFFFF;
}
   80816:	bd80      	pop	{r7, pc}
   80818:	400e0600 	.word	0x400e0600
   8081c:	40080000 	.word	0x40080000
   80820:	00080799 	.word	0x00080799

00080824 <TC0_Handler>:

void TC0_Handler(void)
{
   80824:	b480      	push	{r7}
   80826:	af00      	add	r7, sp, #0
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80828:	4b05      	ldr	r3, [pc, #20]	; (80840 <TC0_Handler+0x1c>)
   8082a:	6a1b      	ldr	r3, [r3, #32]
	
	// Disable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;
   8082c:	4b04      	ldr	r3, [pc, #16]	; (80840 <TC0_Handler+0x1c>)
   8082e:	2202      	movs	r2, #2
   80830:	601a      	str	r2, [r3, #0]
	
	iDelay = 1;
   80832:	4b04      	ldr	r3, [pc, #16]	; (80844 <TC0_Handler+0x20>)
   80834:	2201      	movs	r2, #1
   80836:	701a      	strb	r2, [r3, #0]
}
   80838:	46bd      	mov	sp, r7
   8083a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8083e:	4770      	bx	lr
   80840:	40080000 	.word	0x40080000
   80844:	20000454 	.word	0x20000454

00080848 <delay_ms>:

void delay_ms(uint32_t iPrescription)
{
   80848:	b480      	push	{r7}
   8084a:	b083      	sub	sp, #12
   8084c:	af00      	add	r7, sp, #0
   8084e:	6078      	str	r0, [r7, #4]
	// Set compare value for TC0
	TC0->TC_CHANNEL[0].TC_RC = iPrescription*29;
   80850:	490b      	ldr	r1, [pc, #44]	; (80880 <delay_ms+0x38>)
   80852:	687a      	ldr	r2, [r7, #4]
   80854:	4613      	mov	r3, r2
   80856:	00db      	lsls	r3, r3, #3
   80858:	1a9b      	subs	r3, r3, r2
   8085a:	009b      	lsls	r3, r3, #2
   8085c:	4413      	add	r3, r2
   8085e:	61cb      	str	r3, [r1, #28]
	
	// Reset and enable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN|TC_CCR_SWTRG;
   80860:	4b07      	ldr	r3, [pc, #28]	; (80880 <delay_ms+0x38>)
   80862:	2205      	movs	r2, #5
   80864:	601a      	str	r2, [r3, #0]
	
	while(!iDelay);
   80866:	bf00      	nop
   80868:	4b06      	ldr	r3, [pc, #24]	; (80884 <delay_ms+0x3c>)
   8086a:	781b      	ldrb	r3, [r3, #0]
   8086c:	2b00      	cmp	r3, #0
   8086e:	d0fb      	beq.n	80868 <delay_ms+0x20>
	
	iDelay = 0;
   80870:	4b04      	ldr	r3, [pc, #16]	; (80884 <delay_ms+0x3c>)
   80872:	2200      	movs	r2, #0
   80874:	701a      	strb	r2, [r3, #0]
   80876:	370c      	adds	r7, #12
   80878:	46bd      	mov	sp, r7
   8087a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8087e:	4770      	bx	lr
   80880:	40080000 	.word	0x40080000
   80884:	20000454 	.word	0x20000454

00080888 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80888:	b480      	push	{r7}
   8088a:	b083      	sub	sp, #12
   8088c:	af00      	add	r7, sp, #0
   8088e:	4603      	mov	r3, r0
   80890:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80892:	4b08      	ldr	r3, [pc, #32]	; (808b4 <NVIC_EnableIRQ+0x2c>)
   80894:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80898:	0952      	lsrs	r2, r2, #5
   8089a:	79f9      	ldrb	r1, [r7, #7]
   8089c:	f001 011f 	and.w	r1, r1, #31
   808a0:	2001      	movs	r0, #1
   808a2:	fa00 f101 	lsl.w	r1, r0, r1
   808a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   808aa:	370c      	adds	r7, #12
   808ac:	46bd      	mov	sp, r7
   808ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   808b2:	4770      	bx	lr
   808b4:	e000e100 	.word	0xe000e100

000808b8 <uart_getchar>:


// *************************************************************************************************************************************

inline int uart_getchar(uint8_t *c)
{
   808b8:	b480      	push	{r7}
   808ba:	b083      	sub	sp, #12
   808bc:	af00      	add	r7, sp, #0
   808be:	6078      	str	r0, [r7, #4]
	// Check if the receiver is ready
	if((UART->UART_SR & UART_SR_RXRDY) == 0)
   808c0:	4b09      	ldr	r3, [pc, #36]	; (808e8 <uart_getchar+0x30>)
   808c2:	695b      	ldr	r3, [r3, #20]
   808c4:	f003 0301 	and.w	r3, r3, #1
   808c8:	2b00      	cmp	r3, #0
   808ca:	d101      	bne.n	808d0 <uart_getchar+0x18>
	return 1;
   808cc:	2301      	movs	r3, #1
   808ce:	e005      	b.n	808dc <uart_getchar+0x24>
	
	// Read the character
	*c = (uint8_t) UART->UART_RHR;
   808d0:	4b05      	ldr	r3, [pc, #20]	; (808e8 <uart_getchar+0x30>)
   808d2:	699b      	ldr	r3, [r3, #24]
   808d4:	b2da      	uxtb	r2, r3
   808d6:	687b      	ldr	r3, [r7, #4]
   808d8:	701a      	strb	r2, [r3, #0]
	return 0;
   808da:	2300      	movs	r3, #0
}
   808dc:	4618      	mov	r0, r3
   808de:	370c      	adds	r7, #12
   808e0:	46bd      	mov	sp, r7
   808e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   808e6:	4770      	bx	lr
   808e8:	400e0800 	.word	0x400e0800

000808ec <uart_putchar>:

inline int uart_putchar(const uint8_t c)
{
   808ec:	b480      	push	{r7}
   808ee:	b083      	sub	sp, #12
   808f0:	af00      	add	r7, sp, #0
   808f2:	4603      	mov	r3, r0
   808f4:	71fb      	strb	r3, [r7, #7]
	// Check if the transmitter is ready
	if(!(UART->UART_SR & UART_SR_TXRDY))
   808f6:	4b09      	ldr	r3, [pc, #36]	; (8091c <uart_putchar+0x30>)
   808f8:	695b      	ldr	r3, [r3, #20]
   808fa:	f003 0302 	and.w	r3, r3, #2
   808fe:	2b00      	cmp	r3, #0
   80900:	d101      	bne.n	80906 <uart_putchar+0x1a>
	return 1;
   80902:	2301      	movs	r3, #1
   80904:	e003      	b.n	8090e <uart_putchar+0x22>
	
	// Send the character
	UART->UART_THR = c;
   80906:	4b05      	ldr	r3, [pc, #20]	; (8091c <uart_putchar+0x30>)
   80908:	79fa      	ldrb	r2, [r7, #7]
   8090a:	61da      	str	r2, [r3, #28]
	return 0;
   8090c:	2300      	movs	r3, #0
}
   8090e:	4618      	mov	r0, r3
   80910:	370c      	adds	r7, #12
   80912:	46bd      	mov	sp, r7
   80914:	f85d 7b04 	ldr.w	r7, [sp], #4
   80918:	4770      	bx	lr
   8091a:	bf00      	nop
   8091c:	400e0800 	.word	0x400e0800

00080920 <UART_Handler>:

void UART_Handler(void)
{
   80920:	b580      	push	{r7, lr}
   80922:	b082      	sub	sp, #8
   80924:	af00      	add	r7, sp, #0
	uint8_t c = 0;
   80926:	2300      	movs	r3, #0
   80928:	70fb      	strb	r3, [r7, #3]
	int i = 0;
   8092a:	2300      	movs	r3, #0
   8092c:	607b      	str	r3, [r7, #4]
	memset(buffer, 0, sizeof(buffer));
   8092e:	481e      	ldr	r0, [pc, #120]	; (809a8 <UART_Handler+0x88>)
   80930:	2100      	movs	r1, #0
   80932:	2214      	movs	r2, #20
   80934:	4b1d      	ldr	r3, [pc, #116]	; (809ac <UART_Handler+0x8c>)
   80936:	4798      	blx	r3
	
	// Check if the interrupt source is receive ready
	if(UART->UART_IMR & UART_IMR_RXRDY)
   80938:	4b1d      	ldr	r3, [pc, #116]	; (809b0 <UART_Handler+0x90>)
   8093a:	691b      	ldr	r3, [r3, #16]
   8093c:	f003 0301 	and.w	r3, r3, #1
   80940:	2b00      	cmp	r3, #0
   80942:	d02d      	beq.n	809a0 <UART_Handler+0x80>
	{
		while(1)
		{
			while(!uart_getchar(&c)){
   80944:	e005      	b.n	80952 <UART_Handler+0x32>
				buffer[i++]=c;
   80946:	687b      	ldr	r3, [r7, #4]
   80948:	1c5a      	adds	r2, r3, #1
   8094a:	607a      	str	r2, [r7, #4]
   8094c:	78f9      	ldrb	r1, [r7, #3]
   8094e:	4a16      	ldr	r2, [pc, #88]	; (809a8 <UART_Handler+0x88>)
   80950:	54d1      	strb	r1, [r2, r3]
	// Check if the interrupt source is receive ready
	if(UART->UART_IMR & UART_IMR_RXRDY)
	{
		while(1)
		{
			while(!uart_getchar(&c)){
   80952:	1cfb      	adds	r3, r7, #3
   80954:	4618      	mov	r0, r3
   80956:	4b17      	ldr	r3, [pc, #92]	; (809b4 <UART_Handler+0x94>)
   80958:	4798      	blx	r3
   8095a:	4603      	mov	r3, r0
   8095c:	2b00      	cmp	r3, #0
   8095e:	d0f2      	beq.n	80946 <UART_Handler+0x26>
				buffer[i++]=c;
			}
			if(c == '\n' || (i >sizeof(buffer)-3))
   80960:	78fb      	ldrb	r3, [r7, #3]
   80962:	2b0a      	cmp	r3, #10
   80964:	d003      	beq.n	8096e <UART_Handler+0x4e>
   80966:	687b      	ldr	r3, [r7, #4]
   80968:	2b11      	cmp	r3, #17
   8096a:	d800      	bhi.n	8096e <UART_Handler+0x4e>
				break;
		}
   8096c:	e7ea      	b.n	80944 <UART_Handler+0x24>
		buffer[i++] = '\r';
   8096e:	687b      	ldr	r3, [r7, #4]
   80970:	1c5a      	adds	r2, r3, #1
   80972:	607a      	str	r2, [r7, #4]
   80974:	4a0c      	ldr	r2, [pc, #48]	; (809a8 <UART_Handler+0x88>)
   80976:	210d      	movs	r1, #13
   80978:	54d1      	strb	r1, [r2, r3]
		buffer[i++] = '\n';
   8097a:	687b      	ldr	r3, [r7, #4]
   8097c:	1c5a      	adds	r2, r3, #1
   8097e:	607a      	str	r2, [r7, #4]
   80980:	4a09      	ldr	r2, [pc, #36]	; (809a8 <UART_Handler+0x88>)
   80982:	210a      	movs	r1, #10
   80984:	54d1      	strb	r1, [r2, r3]
		sendString("Received: ", 10);
   80986:	480c      	ldr	r0, [pc, #48]	; (809b8 <UART_Handler+0x98>)
   80988:	210a      	movs	r1, #10
   8098a:	4b0c      	ldr	r3, [pc, #48]	; (809bc <UART_Handler+0x9c>)
   8098c:	4798      	blx	r3
		sendString(buffer, i);
   8098e:	687b      	ldr	r3, [r7, #4]
   80990:	b29b      	uxth	r3, r3
   80992:	4805      	ldr	r0, [pc, #20]	; (809a8 <UART_Handler+0x88>)
   80994:	4619      	mov	r1, r3
   80996:	4b09      	ldr	r3, [pc, #36]	; (809bc <UART_Handler+0x9c>)
   80998:	4798      	blx	r3
		parseSpeed(buffer);
   8099a:	4803      	ldr	r0, [pc, #12]	; (809a8 <UART_Handler+0x88>)
   8099c:	4b08      	ldr	r3, [pc, #32]	; (809c0 <UART_Handler+0xa0>)
   8099e:	4798      	blx	r3
		
	}
}
   809a0:	3708      	adds	r7, #8
   809a2:	46bd      	mov	sp, r7
   809a4:	bd80      	pop	{r7, pc}
   809a6:	bf00      	nop
   809a8:	2000046c 	.word	0x2000046c
   809ac:	000813a9 	.word	0x000813a9
   809b0:	400e0800 	.word	0x400e0800
   809b4:	000808b9 	.word	0x000808b9
   809b8:	00081734 	.word	0x00081734
   809bc:	00080a7d 	.word	0x00080a7d
   809c0:	00080abd 	.word	0x00080abd

000809c4 <configure_uart>:

void configure_uart(void)
{
   809c4:	b580      	push	{r7, lr}
   809c6:	b082      	sub	sp, #8
   809c8:	af00      	add	r7, sp, #0
	uint32_t ul_sr;
	
	// ==> Pin configuration
	// Disable interrupts on Rx and Tx
	PIOA->PIO_IDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809ca:	4b28      	ldr	r3, [pc, #160]	; (80a6c <configure_uart+0xa8>)
   809cc:	4a27      	ldr	r2, [pc, #156]	; (80a6c <configure_uart+0xa8>)
   809ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
   809d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   809d4:	645a      	str	r2, [r3, #68]	; 0x44
	
	// Disable the PIO of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809d6:	4b25      	ldr	r3, [pc, #148]	; (80a6c <configure_uart+0xa8>)
   809d8:	4a24      	ldr	r2, [pc, #144]	; (80a6c <configure_uart+0xa8>)
   809da:	6852      	ldr	r2, [r2, #4]
   809dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   809e0:	605a      	str	r2, [r3, #4]
	
	// Read current peripheral AB select register and set the Rx and Tx pins to 0 (Peripheral A function)
	ul_sr = PIOA->PIO_ABSR;
   809e2:	4b22      	ldr	r3, [pc, #136]	; (80a6c <configure_uart+0xa8>)
   809e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   809e6:	607b      	str	r3, [r7, #4]
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   809e8:	4b20      	ldr	r3, [pc, #128]	; (80a6c <configure_uart+0xa8>)
   809ea:	4a20      	ldr	r2, [pc, #128]	; (80a6c <configure_uart+0xa8>)
   809ec:	6f11      	ldr	r1, [r2, #112]	; 0x70
   809ee:	687a      	ldr	r2, [r7, #4]
   809f0:	400a      	ands	r2, r1
   809f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   809f6:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Enable the pull up on the Rx and Tx pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809f8:	4b1c      	ldr	r3, [pc, #112]	; (80a6c <configure_uart+0xa8>)
   809fa:	f44f 7240 	mov.w	r2, #768	; 0x300
   809fe:	665a      	str	r2, [r3, #100]	; 0x64
	
	// ==> Actual uart configuration
	// Enable the peripheral uart controller
	PMC->PMC_PCER0 |= 1 << ID_UART;
   80a00:	4b1b      	ldr	r3, [pc, #108]	; (80a70 <configure_uart+0xac>)
   80a02:	4a1b      	ldr	r2, [pc, #108]	; (80a70 <configure_uart+0xac>)
   80a04:	6912      	ldr	r2, [r2, #16]
   80a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80a0a:	611a      	str	r2, [r3, #16]
	
	// Reset and disable receiver & transmitter
	UART->UART_CR |= UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80a0c:	4b19      	ldr	r3, [pc, #100]	; (80a74 <configure_uart+0xb0>)
   80a0e:	4a19      	ldr	r2, [pc, #100]	; (80a74 <configure_uart+0xb0>)
   80a10:	6812      	ldr	r2, [r2, #0]
   80a12:	f042 02ac 	orr.w	r2, r2, #172	; 0xac
   80a16:	601a      	str	r2, [r3, #0]
	
	// Set the baudrate to 115200
	UART->UART_BRGR |= 45; // 84000000 / 16 * x = BaudRate (write x into UART_BRGR)
   80a18:	4b16      	ldr	r3, [pc, #88]	; (80a74 <configure_uart+0xb0>)
   80a1a:	4a16      	ldr	r2, [pc, #88]	; (80a74 <configure_uart+0xb0>)
   80a1c:	6a12      	ldr	r2, [r2, #32]
   80a1e:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
   80a22:	621a      	str	r2, [r3, #32]
	
	// No Parity
	UART->UART_MR |= UART_MR_PAR_NO;
   80a24:	4b13      	ldr	r3, [pc, #76]	; (80a74 <configure_uart+0xb0>)
   80a26:	4a13      	ldr	r2, [pc, #76]	; (80a74 <configure_uart+0xb0>)
   80a28:	6852      	ldr	r2, [r2, #4]
   80a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   80a2e:	605a      	str	r2, [r3, #4]
	
	// Disable PDC channel requests
	UART->UART_PTCR |= UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80a30:	4a10      	ldr	r2, [pc, #64]	; (80a74 <configure_uart+0xb0>)
   80a32:	4b10      	ldr	r3, [pc, #64]	; (80a74 <configure_uart+0xb0>)
   80a34:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   80a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80a3c:	f043 0302 	orr.w	r3, r3, #2
   80a40:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	
	// Disable / Enable interrupts on end of receive
	UART->UART_IDR = 0xFFFFFFFF;
   80a44:	4b0b      	ldr	r3, [pc, #44]	; (80a74 <configure_uart+0xb0>)
   80a46:	f04f 32ff 	mov.w	r2, #4294967295
   80a4a:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ((IRQn_Type) ID_UART);
   80a4c:	2008      	movs	r0, #8
   80a4e:	4b0a      	ldr	r3, [pc, #40]	; (80a78 <configure_uart+0xb4>)
   80a50:	4798      	blx	r3
	UART->UART_IER = UART_IER_RXRDY;
   80a52:	4b08      	ldr	r3, [pc, #32]	; (80a74 <configure_uart+0xb0>)
   80a54:	2201      	movs	r2, #1
   80a56:	609a      	str	r2, [r3, #8]
	
	// Enable receiver and trasmitter
	UART->UART_CR |= UART_CR_RXEN | UART_CR_TXEN;
   80a58:	4b06      	ldr	r3, [pc, #24]	; (80a74 <configure_uart+0xb0>)
   80a5a:	4a06      	ldr	r2, [pc, #24]	; (80a74 <configure_uart+0xb0>)
   80a5c:	6812      	ldr	r2, [r2, #0]
   80a5e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   80a62:	601a      	str	r2, [r3, #0]
	
}
   80a64:	3708      	adds	r7, #8
   80a66:	46bd      	mov	sp, r7
   80a68:	bd80      	pop	{r7, pc}
   80a6a:	bf00      	nop
   80a6c:	400e0e00 	.word	0x400e0e00
   80a70:	400e0600 	.word	0x400e0600
   80a74:	400e0800 	.word	0x400e0800
   80a78:	00080889 	.word	0x00080889

00080a7c <sendString>:


void sendString(const char* c, uint16_t length){
   80a7c:	b580      	push	{r7, lr}
   80a7e:	b084      	sub	sp, #16
   80a80:	af00      	add	r7, sp, #0
   80a82:	6078      	str	r0, [r7, #4]
   80a84:	460b      	mov	r3, r1
   80a86:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<length;i++){
   80a88:	2300      	movs	r3, #0
   80a8a:	60fb      	str	r3, [r7, #12]
   80a8c:	e00d      	b.n	80aaa <sendString+0x2e>
		while(uart_putchar(*(c+i)));
   80a8e:	bf00      	nop
   80a90:	68fb      	ldr	r3, [r7, #12]
   80a92:	687a      	ldr	r2, [r7, #4]
   80a94:	4413      	add	r3, r2
   80a96:	781b      	ldrb	r3, [r3, #0]
   80a98:	4618      	mov	r0, r3
   80a9a:	4b07      	ldr	r3, [pc, #28]	; (80ab8 <sendString+0x3c>)
   80a9c:	4798      	blx	r3
   80a9e:	4603      	mov	r3, r0
   80aa0:	2b00      	cmp	r3, #0
   80aa2:	d1f5      	bne.n	80a90 <sendString+0x14>
	
}


void sendString(const char* c, uint16_t length){
	for(int i = 0;i<length;i++){
   80aa4:	68fb      	ldr	r3, [r7, #12]
   80aa6:	3301      	adds	r3, #1
   80aa8:	60fb      	str	r3, [r7, #12]
   80aaa:	887a      	ldrh	r2, [r7, #2]
   80aac:	68fb      	ldr	r3, [r7, #12]
   80aae:	429a      	cmp	r2, r3
   80ab0:	dced      	bgt.n	80a8e <sendString+0x12>
		while(uart_putchar(*(c+i)));
	}
}
   80ab2:	3710      	adds	r7, #16
   80ab4:	46bd      	mov	sp, r7
   80ab6:	bd80      	pop	{r7, pc}
   80ab8:	000808ed 	.word	0x000808ed

00080abc <parseSpeed>:
		i--;
	}
}

void parseSpeed(char* buffer, int len)
{
   80abc:	b580      	push	{r7, lr}
   80abe:	b088      	sub	sp, #32
   80ac0:	af00      	add	r7, sp, #0
   80ac2:	6078      	str	r0, [r7, #4]
   80ac4:	6039      	str	r1, [r7, #0]
	char* token1;
	token1 = strtok(buffer, "#");
   80ac6:	6878      	ldr	r0, [r7, #4]
   80ac8:	4923      	ldr	r1, [pc, #140]	; (80b58 <parseSpeed+0x9c>)
   80aca:	4b24      	ldr	r3, [pc, #144]	; (80b5c <parseSpeed+0xa0>)
   80acc:	4798      	blx	r3
   80ace:	61f8      	str	r0, [r7, #28]
	if(token1 != NULL)
   80ad0:	69fb      	ldr	r3, [r7, #28]
   80ad2:	2b00      	cmp	r3, #0
   80ad4:	d03d      	beq.n	80b52 <parseSpeed+0x96>
	{
		char* token2;
		token2 = strtok(NULL, "#");
   80ad6:	2000      	movs	r0, #0
   80ad8:	491f      	ldr	r1, [pc, #124]	; (80b58 <parseSpeed+0x9c>)
   80ada:	4b20      	ldr	r3, [pc, #128]	; (80b5c <parseSpeed+0xa0>)
   80adc:	4798      	blx	r3
   80ade:	61b8      	str	r0, [r7, #24]
		if(token2 != NULL)
   80ae0:	69bb      	ldr	r3, [r7, #24]
   80ae2:	2b00      	cmp	r3, #0
   80ae4:	d035      	beq.n	80b52 <parseSpeed+0x96>
		{
			sendString("Speed1: ", 8);
   80ae6:	481e      	ldr	r0, [pc, #120]	; (80b60 <parseSpeed+0xa4>)
   80ae8:	2108      	movs	r1, #8
   80aea:	4b1e      	ldr	r3, [pc, #120]	; (80b64 <parseSpeed+0xa8>)
   80aec:	4798      	blx	r3
			sendString(token1, strlen(token1));
   80aee:	69f8      	ldr	r0, [r7, #28]
   80af0:	4b1d      	ldr	r3, [pc, #116]	; (80b68 <parseSpeed+0xac>)
   80af2:	4798      	blx	r3
   80af4:	4603      	mov	r3, r0
   80af6:	b29b      	uxth	r3, r3
   80af8:	69f8      	ldr	r0, [r7, #28]
   80afa:	4619      	mov	r1, r3
   80afc:	4b19      	ldr	r3, [pc, #100]	; (80b64 <parseSpeed+0xa8>)
   80afe:	4798      	blx	r3
			sendString(" Speed2: ", 8);
   80b00:	481a      	ldr	r0, [pc, #104]	; (80b6c <parseSpeed+0xb0>)
   80b02:	2108      	movs	r1, #8
   80b04:	4b17      	ldr	r3, [pc, #92]	; (80b64 <parseSpeed+0xa8>)
   80b06:	4798      	blx	r3
			sendString(token2, strlen(token2));
   80b08:	69b8      	ldr	r0, [r7, #24]
   80b0a:	4b17      	ldr	r3, [pc, #92]	; (80b68 <parseSpeed+0xac>)
   80b0c:	4798      	blx	r3
   80b0e:	4603      	mov	r3, r0
   80b10:	b29b      	uxth	r3, r3
   80b12:	69b8      	ldr	r0, [r7, #24]
   80b14:	4619      	mov	r1, r3
   80b16:	4b13      	ldr	r3, [pc, #76]	; (80b64 <parseSpeed+0xa8>)
   80b18:	4798      	blx	r3
			
			char *end;
			int speed1 = strtol(token1, &end, 10);
   80b1a:	f107 030c 	add.w	r3, r7, #12
   80b1e:	69f8      	ldr	r0, [r7, #28]
   80b20:	4619      	mov	r1, r3
   80b22:	220a      	movs	r2, #10
   80b24:	4b12      	ldr	r3, [pc, #72]	; (80b70 <parseSpeed+0xb4>)
   80b26:	4798      	blx	r3
   80b28:	6178      	str	r0, [r7, #20]
			int speed2 = strtol(token2, &end, 10);
   80b2a:	f107 030c 	add.w	r3, r7, #12
   80b2e:	69b8      	ldr	r0, [r7, #24]
   80b30:	4619      	mov	r1, r3
   80b32:	220a      	movs	r2, #10
   80b34:	4b0e      	ldr	r3, [pc, #56]	; (80b70 <parseSpeed+0xb4>)
   80b36:	4798      	blx	r3
   80b38:	6138      	str	r0, [r7, #16]
			char parsed[2];
			parsed[0]=speed1;
   80b3a:	697b      	ldr	r3, [r7, #20]
   80b3c:	b2db      	uxtb	r3, r3
   80b3e:	723b      	strb	r3, [r7, #8]
			parsed[1]=speed2;
   80b40:	693b      	ldr	r3, [r7, #16]
   80b42:	b2db      	uxtb	r3, r3
   80b44:	727b      	strb	r3, [r7, #9]
			sendString(parsed, 2);
   80b46:	f107 0308 	add.w	r3, r7, #8
   80b4a:	4618      	mov	r0, r3
   80b4c:	2102      	movs	r1, #2
   80b4e:	4b05      	ldr	r3, [pc, #20]	; (80b64 <parseSpeed+0xa8>)
   80b50:	4798      	blx	r3
		}
	}
   80b52:	3720      	adds	r7, #32
   80b54:	46bd      	mov	sp, r7
   80b56:	bd80      	pop	{r7, pc}
   80b58:	00081740 	.word	0x00081740
   80b5c:	0008149d 	.word	0x0008149d
   80b60:	00081744 	.word	0x00081744
   80b64:	00080a7d 	.word	0x00080a7d
   80b68:	0008143d 	.word	0x0008143d
   80b6c:	00081750 	.word	0x00081750
   80b70:	00081625 	.word	0x00081625

00080b74 <__aeabi_drsub>:
   80b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80b78:	e002      	b.n	80b80 <__adddf3>
   80b7a:	bf00      	nop

00080b7c <__aeabi_dsub>:
   80b7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080b80 <__adddf3>:
   80b80:	b530      	push	{r4, r5, lr}
   80b82:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80b86:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80b8a:	ea94 0f05 	teq	r4, r5
   80b8e:	bf08      	it	eq
   80b90:	ea90 0f02 	teqeq	r0, r2
   80b94:	bf1f      	itttt	ne
   80b96:	ea54 0c00 	orrsne.w	ip, r4, r0
   80b9a:	ea55 0c02 	orrsne.w	ip, r5, r2
   80b9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80ba2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80ba6:	f000 80e2 	beq.w	80d6e <__adddf3+0x1ee>
   80baa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80bae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80bb2:	bfb8      	it	lt
   80bb4:	426d      	neglt	r5, r5
   80bb6:	dd0c      	ble.n	80bd2 <__adddf3+0x52>
   80bb8:	442c      	add	r4, r5
   80bba:	ea80 0202 	eor.w	r2, r0, r2
   80bbe:	ea81 0303 	eor.w	r3, r1, r3
   80bc2:	ea82 0000 	eor.w	r0, r2, r0
   80bc6:	ea83 0101 	eor.w	r1, r3, r1
   80bca:	ea80 0202 	eor.w	r2, r0, r2
   80bce:	ea81 0303 	eor.w	r3, r1, r3
   80bd2:	2d36      	cmp	r5, #54	; 0x36
   80bd4:	bf88      	it	hi
   80bd6:	bd30      	pophi	{r4, r5, pc}
   80bd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80bdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80be0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80be4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80be8:	d002      	beq.n	80bf0 <__adddf3+0x70>
   80bea:	4240      	negs	r0, r0
   80bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80bf0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80bf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80bf8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80bfc:	d002      	beq.n	80c04 <__adddf3+0x84>
   80bfe:	4252      	negs	r2, r2
   80c00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80c04:	ea94 0f05 	teq	r4, r5
   80c08:	f000 80a7 	beq.w	80d5a <__adddf3+0x1da>
   80c0c:	f1a4 0401 	sub.w	r4, r4, #1
   80c10:	f1d5 0e20 	rsbs	lr, r5, #32
   80c14:	db0d      	blt.n	80c32 <__adddf3+0xb2>
   80c16:	fa02 fc0e 	lsl.w	ip, r2, lr
   80c1a:	fa22 f205 	lsr.w	r2, r2, r5
   80c1e:	1880      	adds	r0, r0, r2
   80c20:	f141 0100 	adc.w	r1, r1, #0
   80c24:	fa03 f20e 	lsl.w	r2, r3, lr
   80c28:	1880      	adds	r0, r0, r2
   80c2a:	fa43 f305 	asr.w	r3, r3, r5
   80c2e:	4159      	adcs	r1, r3
   80c30:	e00e      	b.n	80c50 <__adddf3+0xd0>
   80c32:	f1a5 0520 	sub.w	r5, r5, #32
   80c36:	f10e 0e20 	add.w	lr, lr, #32
   80c3a:	2a01      	cmp	r2, #1
   80c3c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80c40:	bf28      	it	cs
   80c42:	f04c 0c02 	orrcs.w	ip, ip, #2
   80c46:	fa43 f305 	asr.w	r3, r3, r5
   80c4a:	18c0      	adds	r0, r0, r3
   80c4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80c50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80c54:	d507      	bpl.n	80c66 <__adddf3+0xe6>
   80c56:	f04f 0e00 	mov.w	lr, #0
   80c5a:	f1dc 0c00 	rsbs	ip, ip, #0
   80c5e:	eb7e 0000 	sbcs.w	r0, lr, r0
   80c62:	eb6e 0101 	sbc.w	r1, lr, r1
   80c66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80c6a:	d31b      	bcc.n	80ca4 <__adddf3+0x124>
   80c6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80c70:	d30c      	bcc.n	80c8c <__adddf3+0x10c>
   80c72:	0849      	lsrs	r1, r1, #1
   80c74:	ea5f 0030 	movs.w	r0, r0, rrx
   80c78:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80c7c:	f104 0401 	add.w	r4, r4, #1
   80c80:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80c84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80c88:	f080 809a 	bcs.w	80dc0 <__adddf3+0x240>
   80c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80c90:	bf08      	it	eq
   80c92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80c96:	f150 0000 	adcs.w	r0, r0, #0
   80c9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80c9e:	ea41 0105 	orr.w	r1, r1, r5
   80ca2:	bd30      	pop	{r4, r5, pc}
   80ca4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80ca8:	4140      	adcs	r0, r0
   80caa:	eb41 0101 	adc.w	r1, r1, r1
   80cae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80cb2:	f1a4 0401 	sub.w	r4, r4, #1
   80cb6:	d1e9      	bne.n	80c8c <__adddf3+0x10c>
   80cb8:	f091 0f00 	teq	r1, #0
   80cbc:	bf04      	itt	eq
   80cbe:	4601      	moveq	r1, r0
   80cc0:	2000      	moveq	r0, #0
   80cc2:	fab1 f381 	clz	r3, r1
   80cc6:	bf08      	it	eq
   80cc8:	3320      	addeq	r3, #32
   80cca:	f1a3 030b 	sub.w	r3, r3, #11
   80cce:	f1b3 0220 	subs.w	r2, r3, #32
   80cd2:	da0c      	bge.n	80cee <__adddf3+0x16e>
   80cd4:	320c      	adds	r2, #12
   80cd6:	dd08      	ble.n	80cea <__adddf3+0x16a>
   80cd8:	f102 0c14 	add.w	ip, r2, #20
   80cdc:	f1c2 020c 	rsb	r2, r2, #12
   80ce0:	fa01 f00c 	lsl.w	r0, r1, ip
   80ce4:	fa21 f102 	lsr.w	r1, r1, r2
   80ce8:	e00c      	b.n	80d04 <__adddf3+0x184>
   80cea:	f102 0214 	add.w	r2, r2, #20
   80cee:	bfd8      	it	le
   80cf0:	f1c2 0c20 	rsble	ip, r2, #32
   80cf4:	fa01 f102 	lsl.w	r1, r1, r2
   80cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
   80cfc:	bfdc      	itt	le
   80cfe:	ea41 010c 	orrle.w	r1, r1, ip
   80d02:	4090      	lslle	r0, r2
   80d04:	1ae4      	subs	r4, r4, r3
   80d06:	bfa2      	ittt	ge
   80d08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80d0c:	4329      	orrge	r1, r5
   80d0e:	bd30      	popge	{r4, r5, pc}
   80d10:	ea6f 0404 	mvn.w	r4, r4
   80d14:	3c1f      	subs	r4, #31
   80d16:	da1c      	bge.n	80d52 <__adddf3+0x1d2>
   80d18:	340c      	adds	r4, #12
   80d1a:	dc0e      	bgt.n	80d3a <__adddf3+0x1ba>
   80d1c:	f104 0414 	add.w	r4, r4, #20
   80d20:	f1c4 0220 	rsb	r2, r4, #32
   80d24:	fa20 f004 	lsr.w	r0, r0, r4
   80d28:	fa01 f302 	lsl.w	r3, r1, r2
   80d2c:	ea40 0003 	orr.w	r0, r0, r3
   80d30:	fa21 f304 	lsr.w	r3, r1, r4
   80d34:	ea45 0103 	orr.w	r1, r5, r3
   80d38:	bd30      	pop	{r4, r5, pc}
   80d3a:	f1c4 040c 	rsb	r4, r4, #12
   80d3e:	f1c4 0220 	rsb	r2, r4, #32
   80d42:	fa20 f002 	lsr.w	r0, r0, r2
   80d46:	fa01 f304 	lsl.w	r3, r1, r4
   80d4a:	ea40 0003 	orr.w	r0, r0, r3
   80d4e:	4629      	mov	r1, r5
   80d50:	bd30      	pop	{r4, r5, pc}
   80d52:	fa21 f004 	lsr.w	r0, r1, r4
   80d56:	4629      	mov	r1, r5
   80d58:	bd30      	pop	{r4, r5, pc}
   80d5a:	f094 0f00 	teq	r4, #0
   80d5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80d62:	bf06      	itte	eq
   80d64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80d68:	3401      	addeq	r4, #1
   80d6a:	3d01      	subne	r5, #1
   80d6c:	e74e      	b.n	80c0c <__adddf3+0x8c>
   80d6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80d72:	bf18      	it	ne
   80d74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80d78:	d029      	beq.n	80dce <__adddf3+0x24e>
   80d7a:	ea94 0f05 	teq	r4, r5
   80d7e:	bf08      	it	eq
   80d80:	ea90 0f02 	teqeq	r0, r2
   80d84:	d005      	beq.n	80d92 <__adddf3+0x212>
   80d86:	ea54 0c00 	orrs.w	ip, r4, r0
   80d8a:	bf04      	itt	eq
   80d8c:	4619      	moveq	r1, r3
   80d8e:	4610      	moveq	r0, r2
   80d90:	bd30      	pop	{r4, r5, pc}
   80d92:	ea91 0f03 	teq	r1, r3
   80d96:	bf1e      	ittt	ne
   80d98:	2100      	movne	r1, #0
   80d9a:	2000      	movne	r0, #0
   80d9c:	bd30      	popne	{r4, r5, pc}
   80d9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80da2:	d105      	bne.n	80db0 <__adddf3+0x230>
   80da4:	0040      	lsls	r0, r0, #1
   80da6:	4149      	adcs	r1, r1
   80da8:	bf28      	it	cs
   80daa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80dae:	bd30      	pop	{r4, r5, pc}
   80db0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80db4:	bf3c      	itt	cc
   80db6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80dba:	bd30      	popcc	{r4, r5, pc}
   80dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80dc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80dc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80dc8:	f04f 0000 	mov.w	r0, #0
   80dcc:	bd30      	pop	{r4, r5, pc}
   80dce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80dd2:	bf1a      	itte	ne
   80dd4:	4619      	movne	r1, r3
   80dd6:	4610      	movne	r0, r2
   80dd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80ddc:	bf1c      	itt	ne
   80dde:	460b      	movne	r3, r1
   80de0:	4602      	movne	r2, r0
   80de2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80de6:	bf06      	itte	eq
   80de8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80dec:	ea91 0f03 	teqeq	r1, r3
   80df0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80df4:	bd30      	pop	{r4, r5, pc}
   80df6:	bf00      	nop

00080df8 <__aeabi_ui2d>:
   80df8:	f090 0f00 	teq	r0, #0
   80dfc:	bf04      	itt	eq
   80dfe:	2100      	moveq	r1, #0
   80e00:	4770      	bxeq	lr
   80e02:	b530      	push	{r4, r5, lr}
   80e04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80e08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80e0c:	f04f 0500 	mov.w	r5, #0
   80e10:	f04f 0100 	mov.w	r1, #0
   80e14:	e750      	b.n	80cb8 <__adddf3+0x138>
   80e16:	bf00      	nop

00080e18 <__aeabi_i2d>:
   80e18:	f090 0f00 	teq	r0, #0
   80e1c:	bf04      	itt	eq
   80e1e:	2100      	moveq	r1, #0
   80e20:	4770      	bxeq	lr
   80e22:	b530      	push	{r4, r5, lr}
   80e24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80e28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80e2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80e30:	bf48      	it	mi
   80e32:	4240      	negmi	r0, r0
   80e34:	f04f 0100 	mov.w	r1, #0
   80e38:	e73e      	b.n	80cb8 <__adddf3+0x138>
   80e3a:	bf00      	nop

00080e3c <__aeabi_f2d>:
   80e3c:	0042      	lsls	r2, r0, #1
   80e3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80e42:	ea4f 0131 	mov.w	r1, r1, rrx
   80e46:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80e4a:	bf1f      	itttt	ne
   80e4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80e50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80e54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80e58:	4770      	bxne	lr
   80e5a:	f092 0f00 	teq	r2, #0
   80e5e:	bf14      	ite	ne
   80e60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80e64:	4770      	bxeq	lr
   80e66:	b530      	push	{r4, r5, lr}
   80e68:	f44f 7460 	mov.w	r4, #896	; 0x380
   80e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80e70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80e74:	e720      	b.n	80cb8 <__adddf3+0x138>
   80e76:	bf00      	nop

00080e78 <__aeabi_ul2d>:
   80e78:	ea50 0201 	orrs.w	r2, r0, r1
   80e7c:	bf08      	it	eq
   80e7e:	4770      	bxeq	lr
   80e80:	b530      	push	{r4, r5, lr}
   80e82:	f04f 0500 	mov.w	r5, #0
   80e86:	e00a      	b.n	80e9e <__aeabi_l2d+0x16>

00080e88 <__aeabi_l2d>:
   80e88:	ea50 0201 	orrs.w	r2, r0, r1
   80e8c:	bf08      	it	eq
   80e8e:	4770      	bxeq	lr
   80e90:	b530      	push	{r4, r5, lr}
   80e92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80e96:	d502      	bpl.n	80e9e <__aeabi_l2d+0x16>
   80e98:	4240      	negs	r0, r0
   80e9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80e9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80ea2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80ea6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80eaa:	f43f aedc 	beq.w	80c66 <__adddf3+0xe6>
   80eae:	f04f 0203 	mov.w	r2, #3
   80eb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80eb6:	bf18      	it	ne
   80eb8:	3203      	addne	r2, #3
   80eba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80ebe:	bf18      	it	ne
   80ec0:	3203      	addne	r2, #3
   80ec2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80ec6:	f1c2 0320 	rsb	r3, r2, #32
   80eca:	fa00 fc03 	lsl.w	ip, r0, r3
   80ece:	fa20 f002 	lsr.w	r0, r0, r2
   80ed2:	fa01 fe03 	lsl.w	lr, r1, r3
   80ed6:	ea40 000e 	orr.w	r0, r0, lr
   80eda:	fa21 f102 	lsr.w	r1, r1, r2
   80ede:	4414      	add	r4, r2
   80ee0:	e6c1      	b.n	80c66 <__adddf3+0xe6>
   80ee2:	bf00      	nop

00080ee4 <__aeabi_dmul>:
   80ee4:	b570      	push	{r4, r5, r6, lr}
   80ee6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80eea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80eee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80ef2:	bf1d      	ittte	ne
   80ef4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80ef8:	ea94 0f0c 	teqne	r4, ip
   80efc:	ea95 0f0c 	teqne	r5, ip
   80f00:	f000 f8de 	bleq	810c0 <__aeabi_dmul+0x1dc>
   80f04:	442c      	add	r4, r5
   80f06:	ea81 0603 	eor.w	r6, r1, r3
   80f0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80f0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80f12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80f16:	bf18      	it	ne
   80f18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80f1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80f24:	d038      	beq.n	80f98 <__aeabi_dmul+0xb4>
   80f26:	fba0 ce02 	umull	ip, lr, r0, r2
   80f2a:	f04f 0500 	mov.w	r5, #0
   80f2e:	fbe1 e502 	umlal	lr, r5, r1, r2
   80f32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80f36:	fbe0 e503 	umlal	lr, r5, r0, r3
   80f3a:	f04f 0600 	mov.w	r6, #0
   80f3e:	fbe1 5603 	umlal	r5, r6, r1, r3
   80f42:	f09c 0f00 	teq	ip, #0
   80f46:	bf18      	it	ne
   80f48:	f04e 0e01 	orrne.w	lr, lr, #1
   80f4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80f50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80f54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80f58:	d204      	bcs.n	80f64 <__aeabi_dmul+0x80>
   80f5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80f5e:	416d      	adcs	r5, r5
   80f60:	eb46 0606 	adc.w	r6, r6, r6
   80f64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80f68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   80f6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   80f70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   80f74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   80f78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   80f7c:	bf88      	it	hi
   80f7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   80f82:	d81e      	bhi.n	80fc2 <__aeabi_dmul+0xde>
   80f84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   80f88:	bf08      	it	eq
   80f8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   80f8e:	f150 0000 	adcs.w	r0, r0, #0
   80f92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80f96:	bd70      	pop	{r4, r5, r6, pc}
   80f98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   80f9c:	ea46 0101 	orr.w	r1, r6, r1
   80fa0:	ea40 0002 	orr.w	r0, r0, r2
   80fa4:	ea81 0103 	eor.w	r1, r1, r3
   80fa8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   80fac:	bfc2      	ittt	gt
   80fae:	ebd4 050c 	rsbsgt	r5, r4, ip
   80fb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   80fb6:	bd70      	popgt	{r4, r5, r6, pc}
   80fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80fbc:	f04f 0e00 	mov.w	lr, #0
   80fc0:	3c01      	subs	r4, #1
   80fc2:	f300 80ab 	bgt.w	8111c <__aeabi_dmul+0x238>
   80fc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   80fca:	bfde      	ittt	le
   80fcc:	2000      	movle	r0, #0
   80fce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   80fd2:	bd70      	pople	{r4, r5, r6, pc}
   80fd4:	f1c4 0400 	rsb	r4, r4, #0
   80fd8:	3c20      	subs	r4, #32
   80fda:	da35      	bge.n	81048 <__aeabi_dmul+0x164>
   80fdc:	340c      	adds	r4, #12
   80fde:	dc1b      	bgt.n	81018 <__aeabi_dmul+0x134>
   80fe0:	f104 0414 	add.w	r4, r4, #20
   80fe4:	f1c4 0520 	rsb	r5, r4, #32
   80fe8:	fa00 f305 	lsl.w	r3, r0, r5
   80fec:	fa20 f004 	lsr.w	r0, r0, r4
   80ff0:	fa01 f205 	lsl.w	r2, r1, r5
   80ff4:	ea40 0002 	orr.w	r0, r0, r2
   80ff8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   80ffc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81004:	fa21 f604 	lsr.w	r6, r1, r4
   81008:	eb42 0106 	adc.w	r1, r2, r6
   8100c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81010:	bf08      	it	eq
   81012:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81016:	bd70      	pop	{r4, r5, r6, pc}
   81018:	f1c4 040c 	rsb	r4, r4, #12
   8101c:	f1c4 0520 	rsb	r5, r4, #32
   81020:	fa00 f304 	lsl.w	r3, r0, r4
   81024:	fa20 f005 	lsr.w	r0, r0, r5
   81028:	fa01 f204 	lsl.w	r2, r1, r4
   8102c:	ea40 0002 	orr.w	r0, r0, r2
   81030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81034:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81038:	f141 0100 	adc.w	r1, r1, #0
   8103c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81040:	bf08      	it	eq
   81042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81046:	bd70      	pop	{r4, r5, r6, pc}
   81048:	f1c4 0520 	rsb	r5, r4, #32
   8104c:	fa00 f205 	lsl.w	r2, r0, r5
   81050:	ea4e 0e02 	orr.w	lr, lr, r2
   81054:	fa20 f304 	lsr.w	r3, r0, r4
   81058:	fa01 f205 	lsl.w	r2, r1, r5
   8105c:	ea43 0302 	orr.w	r3, r3, r2
   81060:	fa21 f004 	lsr.w	r0, r1, r4
   81064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81068:	fa21 f204 	lsr.w	r2, r1, r4
   8106c:	ea20 0002 	bic.w	r0, r0, r2
   81070:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81078:	bf08      	it	eq
   8107a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8107e:	bd70      	pop	{r4, r5, r6, pc}
   81080:	f094 0f00 	teq	r4, #0
   81084:	d10f      	bne.n	810a6 <__aeabi_dmul+0x1c2>
   81086:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8108a:	0040      	lsls	r0, r0, #1
   8108c:	eb41 0101 	adc.w	r1, r1, r1
   81090:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81094:	bf08      	it	eq
   81096:	3c01      	subeq	r4, #1
   81098:	d0f7      	beq.n	8108a <__aeabi_dmul+0x1a6>
   8109a:	ea41 0106 	orr.w	r1, r1, r6
   8109e:	f095 0f00 	teq	r5, #0
   810a2:	bf18      	it	ne
   810a4:	4770      	bxne	lr
   810a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   810aa:	0052      	lsls	r2, r2, #1
   810ac:	eb43 0303 	adc.w	r3, r3, r3
   810b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   810b4:	bf08      	it	eq
   810b6:	3d01      	subeq	r5, #1
   810b8:	d0f7      	beq.n	810aa <__aeabi_dmul+0x1c6>
   810ba:	ea43 0306 	orr.w	r3, r3, r6
   810be:	4770      	bx	lr
   810c0:	ea94 0f0c 	teq	r4, ip
   810c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   810c8:	bf18      	it	ne
   810ca:	ea95 0f0c 	teqne	r5, ip
   810ce:	d00c      	beq.n	810ea <__aeabi_dmul+0x206>
   810d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   810d4:	bf18      	it	ne
   810d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   810da:	d1d1      	bne.n	81080 <__aeabi_dmul+0x19c>
   810dc:	ea81 0103 	eor.w	r1, r1, r3
   810e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   810e4:	f04f 0000 	mov.w	r0, #0
   810e8:	bd70      	pop	{r4, r5, r6, pc}
   810ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   810ee:	bf06      	itte	eq
   810f0:	4610      	moveq	r0, r2
   810f2:	4619      	moveq	r1, r3
   810f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   810f8:	d019      	beq.n	8112e <__aeabi_dmul+0x24a>
   810fa:	ea94 0f0c 	teq	r4, ip
   810fe:	d102      	bne.n	81106 <__aeabi_dmul+0x222>
   81100:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81104:	d113      	bne.n	8112e <__aeabi_dmul+0x24a>
   81106:	ea95 0f0c 	teq	r5, ip
   8110a:	d105      	bne.n	81118 <__aeabi_dmul+0x234>
   8110c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81110:	bf1c      	itt	ne
   81112:	4610      	movne	r0, r2
   81114:	4619      	movne	r1, r3
   81116:	d10a      	bne.n	8112e <__aeabi_dmul+0x24a>
   81118:	ea81 0103 	eor.w	r1, r1, r3
   8111c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81120:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81124:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81128:	f04f 0000 	mov.w	r0, #0
   8112c:	bd70      	pop	{r4, r5, r6, pc}
   8112e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81132:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81136:	bd70      	pop	{r4, r5, r6, pc}

00081138 <__aeabi_ddiv>:
   81138:	b570      	push	{r4, r5, r6, lr}
   8113a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8113e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81142:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81146:	bf1d      	ittte	ne
   81148:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8114c:	ea94 0f0c 	teqne	r4, ip
   81150:	ea95 0f0c 	teqne	r5, ip
   81154:	f000 f8a7 	bleq	812a6 <__aeabi_ddiv+0x16e>
   81158:	eba4 0405 	sub.w	r4, r4, r5
   8115c:	ea81 0e03 	eor.w	lr, r1, r3
   81160:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81164:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81168:	f000 8088 	beq.w	8127c <__aeabi_ddiv+0x144>
   8116c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81170:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81174:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81178:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8117c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81180:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81184:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81188:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8118c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81190:	429d      	cmp	r5, r3
   81192:	bf08      	it	eq
   81194:	4296      	cmpeq	r6, r2
   81196:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8119a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8119e:	d202      	bcs.n	811a6 <__aeabi_ddiv+0x6e>
   811a0:	085b      	lsrs	r3, r3, #1
   811a2:	ea4f 0232 	mov.w	r2, r2, rrx
   811a6:	1ab6      	subs	r6, r6, r2
   811a8:	eb65 0503 	sbc.w	r5, r5, r3
   811ac:	085b      	lsrs	r3, r3, #1
   811ae:	ea4f 0232 	mov.w	r2, r2, rrx
   811b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   811b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   811ba:	ebb6 0e02 	subs.w	lr, r6, r2
   811be:	eb75 0e03 	sbcs.w	lr, r5, r3
   811c2:	bf22      	ittt	cs
   811c4:	1ab6      	subcs	r6, r6, r2
   811c6:	4675      	movcs	r5, lr
   811c8:	ea40 000c 	orrcs.w	r0, r0, ip
   811cc:	085b      	lsrs	r3, r3, #1
   811ce:	ea4f 0232 	mov.w	r2, r2, rrx
   811d2:	ebb6 0e02 	subs.w	lr, r6, r2
   811d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   811da:	bf22      	ittt	cs
   811dc:	1ab6      	subcs	r6, r6, r2
   811de:	4675      	movcs	r5, lr
   811e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   811e4:	085b      	lsrs	r3, r3, #1
   811e6:	ea4f 0232 	mov.w	r2, r2, rrx
   811ea:	ebb6 0e02 	subs.w	lr, r6, r2
   811ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   811f2:	bf22      	ittt	cs
   811f4:	1ab6      	subcs	r6, r6, r2
   811f6:	4675      	movcs	r5, lr
   811f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   811fc:	085b      	lsrs	r3, r3, #1
   811fe:	ea4f 0232 	mov.w	r2, r2, rrx
   81202:	ebb6 0e02 	subs.w	lr, r6, r2
   81206:	eb75 0e03 	sbcs.w	lr, r5, r3
   8120a:	bf22      	ittt	cs
   8120c:	1ab6      	subcs	r6, r6, r2
   8120e:	4675      	movcs	r5, lr
   81210:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81214:	ea55 0e06 	orrs.w	lr, r5, r6
   81218:	d018      	beq.n	8124c <__aeabi_ddiv+0x114>
   8121a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8121e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81222:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81226:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8122a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8122e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81232:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81236:	d1c0      	bne.n	811ba <__aeabi_ddiv+0x82>
   81238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8123c:	d10b      	bne.n	81256 <__aeabi_ddiv+0x11e>
   8123e:	ea41 0100 	orr.w	r1, r1, r0
   81242:	f04f 0000 	mov.w	r0, #0
   81246:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8124a:	e7b6      	b.n	811ba <__aeabi_ddiv+0x82>
   8124c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81250:	bf04      	itt	eq
   81252:	4301      	orreq	r1, r0
   81254:	2000      	moveq	r0, #0
   81256:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8125a:	bf88      	it	hi
   8125c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81260:	f63f aeaf 	bhi.w	80fc2 <__aeabi_dmul+0xde>
   81264:	ebb5 0c03 	subs.w	ip, r5, r3
   81268:	bf04      	itt	eq
   8126a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8126e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81272:	f150 0000 	adcs.w	r0, r0, #0
   81276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8127a:	bd70      	pop	{r4, r5, r6, pc}
   8127c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81280:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81284:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81288:	bfc2      	ittt	gt
   8128a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8128e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81292:	bd70      	popgt	{r4, r5, r6, pc}
   81294:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81298:	f04f 0e00 	mov.w	lr, #0
   8129c:	3c01      	subs	r4, #1
   8129e:	e690      	b.n	80fc2 <__aeabi_dmul+0xde>
   812a0:	ea45 0e06 	orr.w	lr, r5, r6
   812a4:	e68d      	b.n	80fc2 <__aeabi_dmul+0xde>
   812a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   812aa:	ea94 0f0c 	teq	r4, ip
   812ae:	bf08      	it	eq
   812b0:	ea95 0f0c 	teqeq	r5, ip
   812b4:	f43f af3b 	beq.w	8112e <__aeabi_dmul+0x24a>
   812b8:	ea94 0f0c 	teq	r4, ip
   812bc:	d10a      	bne.n	812d4 <__aeabi_ddiv+0x19c>
   812be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   812c2:	f47f af34 	bne.w	8112e <__aeabi_dmul+0x24a>
   812c6:	ea95 0f0c 	teq	r5, ip
   812ca:	f47f af25 	bne.w	81118 <__aeabi_dmul+0x234>
   812ce:	4610      	mov	r0, r2
   812d0:	4619      	mov	r1, r3
   812d2:	e72c      	b.n	8112e <__aeabi_dmul+0x24a>
   812d4:	ea95 0f0c 	teq	r5, ip
   812d8:	d106      	bne.n	812e8 <__aeabi_ddiv+0x1b0>
   812da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   812de:	f43f aefd 	beq.w	810dc <__aeabi_dmul+0x1f8>
   812e2:	4610      	mov	r0, r2
   812e4:	4619      	mov	r1, r3
   812e6:	e722      	b.n	8112e <__aeabi_dmul+0x24a>
   812e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   812ec:	bf18      	it	ne
   812ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   812f2:	f47f aec5 	bne.w	81080 <__aeabi_dmul+0x19c>
   812f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   812fa:	f47f af0d 	bne.w	81118 <__aeabi_dmul+0x234>
   812fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81302:	f47f aeeb 	bne.w	810dc <__aeabi_dmul+0x1f8>
   81306:	e712      	b.n	8112e <__aeabi_dmul+0x24a>

00081308 <__aeabi_d2iz>:
   81308:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8130c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81310:	d215      	bcs.n	8133e <__aeabi_d2iz+0x36>
   81312:	d511      	bpl.n	81338 <__aeabi_d2iz+0x30>
   81314:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81318:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8131c:	d912      	bls.n	81344 <__aeabi_d2iz+0x3c>
   8131e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81326:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8132a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8132e:	fa23 f002 	lsr.w	r0, r3, r2
   81332:	bf18      	it	ne
   81334:	4240      	negne	r0, r0
   81336:	4770      	bx	lr
   81338:	f04f 0000 	mov.w	r0, #0
   8133c:	4770      	bx	lr
   8133e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81342:	d105      	bne.n	81350 <__aeabi_d2iz+0x48>
   81344:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81348:	bf08      	it	eq
   8134a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8134e:	4770      	bx	lr
   81350:	f04f 0000 	mov.w	r0, #0
   81354:	4770      	bx	lr
   81356:	bf00      	nop

00081358 <__libc_init_array>:
   81358:	b570      	push	{r4, r5, r6, lr}
   8135a:	4e0f      	ldr	r6, [pc, #60]	; (81398 <__libc_init_array+0x40>)
   8135c:	4d0f      	ldr	r5, [pc, #60]	; (8139c <__libc_init_array+0x44>)
   8135e:	1b76      	subs	r6, r6, r5
   81360:	10b6      	asrs	r6, r6, #2
   81362:	d007      	beq.n	81374 <__libc_init_array+0x1c>
   81364:	3d04      	subs	r5, #4
   81366:	2400      	movs	r4, #0
   81368:	3401      	adds	r4, #1
   8136a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8136e:	4798      	blx	r3
   81370:	42a6      	cmp	r6, r4
   81372:	d1f9      	bne.n	81368 <__libc_init_array+0x10>
   81374:	4e0a      	ldr	r6, [pc, #40]	; (813a0 <__libc_init_array+0x48>)
   81376:	4d0b      	ldr	r5, [pc, #44]	; (813a4 <__libc_init_array+0x4c>)
   81378:	f000 fa76 	bl	81868 <_init>
   8137c:	1b76      	subs	r6, r6, r5
   8137e:	10b6      	asrs	r6, r6, #2
   81380:	d008      	beq.n	81394 <__libc_init_array+0x3c>
   81382:	3d04      	subs	r5, #4
   81384:	2400      	movs	r4, #0
   81386:	3401      	adds	r4, #1
   81388:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8138c:	4798      	blx	r3
   8138e:	42a6      	cmp	r6, r4
   81390:	d1f9      	bne.n	81386 <__libc_init_array+0x2e>
   81392:	bd70      	pop	{r4, r5, r6, pc}
   81394:	bd70      	pop	{r4, r5, r6, pc}
   81396:	bf00      	nop
   81398:	00081874 	.word	0x00081874
   8139c:	00081874 	.word	0x00081874
   813a0:	0008187c 	.word	0x0008187c
   813a4:	00081874 	.word	0x00081874

000813a8 <memset>:
   813a8:	b4f0      	push	{r4, r5, r6, r7}
   813aa:	0784      	lsls	r4, r0, #30
   813ac:	d043      	beq.n	81436 <memset+0x8e>
   813ae:	1e54      	subs	r4, r2, #1
   813b0:	2a00      	cmp	r2, #0
   813b2:	d03e      	beq.n	81432 <memset+0x8a>
   813b4:	b2cd      	uxtb	r5, r1
   813b6:	4603      	mov	r3, r0
   813b8:	e003      	b.n	813c2 <memset+0x1a>
   813ba:	1e62      	subs	r2, r4, #1
   813bc:	2c00      	cmp	r4, #0
   813be:	d038      	beq.n	81432 <memset+0x8a>
   813c0:	4614      	mov	r4, r2
   813c2:	f803 5b01 	strb.w	r5, [r3], #1
   813c6:	079a      	lsls	r2, r3, #30
   813c8:	d1f7      	bne.n	813ba <memset+0x12>
   813ca:	2c03      	cmp	r4, #3
   813cc:	d92a      	bls.n	81424 <memset+0x7c>
   813ce:	b2cd      	uxtb	r5, r1
   813d0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   813d4:	2c0f      	cmp	r4, #15
   813d6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   813da:	d915      	bls.n	81408 <memset+0x60>
   813dc:	f1a4 0710 	sub.w	r7, r4, #16
   813e0:	093f      	lsrs	r7, r7, #4
   813e2:	f103 0610 	add.w	r6, r3, #16
   813e6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   813ea:	461a      	mov	r2, r3
   813ec:	6015      	str	r5, [r2, #0]
   813ee:	6055      	str	r5, [r2, #4]
   813f0:	6095      	str	r5, [r2, #8]
   813f2:	60d5      	str	r5, [r2, #12]
   813f4:	3210      	adds	r2, #16
   813f6:	42b2      	cmp	r2, r6
   813f8:	d1f8      	bne.n	813ec <memset+0x44>
   813fa:	f004 040f 	and.w	r4, r4, #15
   813fe:	3701      	adds	r7, #1
   81400:	2c03      	cmp	r4, #3
   81402:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81406:	d90d      	bls.n	81424 <memset+0x7c>
   81408:	461e      	mov	r6, r3
   8140a:	4622      	mov	r2, r4
   8140c:	3a04      	subs	r2, #4
   8140e:	2a03      	cmp	r2, #3
   81410:	f846 5b04 	str.w	r5, [r6], #4
   81414:	d8fa      	bhi.n	8140c <memset+0x64>
   81416:	1f22      	subs	r2, r4, #4
   81418:	f022 0203 	bic.w	r2, r2, #3
   8141c:	3204      	adds	r2, #4
   8141e:	4413      	add	r3, r2
   81420:	f004 0403 	and.w	r4, r4, #3
   81424:	b12c      	cbz	r4, 81432 <memset+0x8a>
   81426:	b2c9      	uxtb	r1, r1
   81428:	441c      	add	r4, r3
   8142a:	f803 1b01 	strb.w	r1, [r3], #1
   8142e:	42a3      	cmp	r3, r4
   81430:	d1fb      	bne.n	8142a <memset+0x82>
   81432:	bcf0      	pop	{r4, r5, r6, r7}
   81434:	4770      	bx	lr
   81436:	4614      	mov	r4, r2
   81438:	4603      	mov	r3, r0
   8143a:	e7c6      	b.n	813ca <memset+0x22>

0008143c <strlen>:
   8143c:	f020 0103 	bic.w	r1, r0, #3
   81440:	f010 0003 	ands.w	r0, r0, #3
   81444:	f1c0 0000 	rsb	r0, r0, #0
   81448:	f851 3b04 	ldr.w	r3, [r1], #4
   8144c:	f100 0c04 	add.w	ip, r0, #4
   81450:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81454:	f06f 0200 	mvn.w	r2, #0
   81458:	bf1c      	itt	ne
   8145a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8145e:	4313      	orrne	r3, r2
   81460:	f04f 0c01 	mov.w	ip, #1
   81464:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81468:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8146c:	eba3 020c 	sub.w	r2, r3, ip
   81470:	ea22 0203 	bic.w	r2, r2, r3
   81474:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81478:	bf04      	itt	eq
   8147a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8147e:	3004      	addeq	r0, #4
   81480:	d0f4      	beq.n	8146c <strlen+0x30>
   81482:	f013 0fff 	tst.w	r3, #255	; 0xff
   81486:	bf1f      	itttt	ne
   81488:	3001      	addne	r0, #1
   8148a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8148e:	3001      	addne	r0, #1
   81490:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81494:	bf18      	it	ne
   81496:	3001      	addne	r0, #1
   81498:	4770      	bx	lr
   8149a:	bf00      	nop

0008149c <strtok>:
   8149c:	4a02      	ldr	r2, [pc, #8]	; (814a8 <strtok+0xc>)
   8149e:	2301      	movs	r3, #1
   814a0:	6812      	ldr	r2, [r2, #0]
   814a2:	325c      	adds	r2, #92	; 0x5c
   814a4:	f000 b802 	b.w	814ac <__strtok_r>
   814a8:	20000430 	.word	0x20000430

000814ac <__strtok_r>:
   814ac:	b4f0      	push	{r4, r5, r6, r7}
   814ae:	b320      	cbz	r0, 814fa <__strtok_r+0x4e>
   814b0:	4607      	mov	r7, r0
   814b2:	f817 6b01 	ldrb.w	r6, [r7], #1
   814b6:	460d      	mov	r5, r1
   814b8:	e001      	b.n	814be <__strtok_r+0x12>
   814ba:	42a6      	cmp	r6, r4
   814bc:	d016      	beq.n	814ec <__strtok_r+0x40>
   814be:	f815 4b01 	ldrb.w	r4, [r5], #1
   814c2:	2c00      	cmp	r4, #0
   814c4:	d1f9      	bne.n	814ba <__strtok_r+0xe>
   814c6:	b1ee      	cbz	r6, 81504 <__strtok_r+0x58>
   814c8:	463e      	mov	r6, r7
   814ca:	f816 5b01 	ldrb.w	r5, [r6], #1
   814ce:	460c      	mov	r4, r1
   814d0:	e000      	b.n	814d4 <__strtok_r+0x28>
   814d2:	b173      	cbz	r3, 814f2 <__strtok_r+0x46>
   814d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   814d8:	42ab      	cmp	r3, r5
   814da:	d1fa      	bne.n	814d2 <__strtok_r+0x26>
   814dc:	b15d      	cbz	r5, 814f6 <__strtok_r+0x4a>
   814de:	2300      	movs	r3, #0
   814e0:	703b      	strb	r3, [r7, #0]
   814e2:	6016      	str	r6, [r2, #0]
   814e4:	4606      	mov	r6, r0
   814e6:	4630      	mov	r0, r6
   814e8:	bcf0      	pop	{r4, r5, r6, r7}
   814ea:	4770      	bx	lr
   814ec:	b163      	cbz	r3, 81508 <__strtok_r+0x5c>
   814ee:	4638      	mov	r0, r7
   814f0:	e7de      	b.n	814b0 <__strtok_r+0x4>
   814f2:	4637      	mov	r7, r6
   814f4:	e7e8      	b.n	814c8 <__strtok_r+0x1c>
   814f6:	462e      	mov	r6, r5
   814f8:	e7f3      	b.n	814e2 <__strtok_r+0x36>
   814fa:	6810      	ldr	r0, [r2, #0]
   814fc:	2800      	cmp	r0, #0
   814fe:	d1d7      	bne.n	814b0 <__strtok_r+0x4>
   81500:	4606      	mov	r6, r0
   81502:	e7f0      	b.n	814e6 <__strtok_r+0x3a>
   81504:	6016      	str	r6, [r2, #0]
   81506:	e7ee      	b.n	814e6 <__strtok_r+0x3a>
   81508:	6017      	str	r7, [r2, #0]
   8150a:	4606      	mov	r6, r0
   8150c:	7003      	strb	r3, [r0, #0]
   8150e:	e7ea      	b.n	814e6 <__strtok_r+0x3a>

00081510 <_strtol_r>:
   81510:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81514:	4c42      	ldr	r4, [pc, #264]	; (81620 <_strtol_r+0x110>)
   81516:	b082      	sub	sp, #8
   81518:	f8d4 c000 	ldr.w	ip, [r4]
   8151c:	9001      	str	r0, [sp, #4]
   8151e:	460e      	mov	r6, r1
   81520:	e000      	b.n	81524 <_strtol_r+0x14>
   81522:	4626      	mov	r6, r4
   81524:	4634      	mov	r4, r6
   81526:	f814 5b01 	ldrb.w	r5, [r4], #1
   8152a:	eb0c 0005 	add.w	r0, ip, r5
   8152e:	7840      	ldrb	r0, [r0, #1]
   81530:	f000 0008 	and.w	r0, r0, #8
   81534:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   81538:	2800      	cmp	r0, #0
   8153a:	d1f2      	bne.n	81522 <_strtol_r+0x12>
   8153c:	2d2d      	cmp	r5, #45	; 0x2d
   8153e:	d05b      	beq.n	815f8 <_strtol_r+0xe8>
   81540:	2d2b      	cmp	r5, #43	; 0x2b
   81542:	bf04      	itt	eq
   81544:	7875      	ldrbeq	r5, [r6, #1]
   81546:	1cb4      	addeq	r4, r6, #2
   81548:	f033 0010 	bics.w	r0, r3, #16
   8154c:	d03c      	beq.n	815c8 <_strtol_r+0xb8>
   8154e:	4699      	mov	r9, r3
   81550:	f1ba 0f00 	cmp.w	sl, #0
   81554:	bf0c      	ite	eq
   81556:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
   8155a:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
   8155e:	fbbb f8f9 	udiv	r8, fp, r9
   81562:	2700      	movs	r7, #0
   81564:	fb09 bb18 	mls	fp, r9, r8, fp
   81568:	4638      	mov	r0, r7
   8156a:	e00c      	b.n	81586 <_strtol_r+0x76>
   8156c:	3d30      	subs	r5, #48	; 0x30
   8156e:	42ab      	cmp	r3, r5
   81570:	dd19      	ble.n	815a6 <_strtol_r+0x96>
   81572:	1c7e      	adds	r6, r7, #1
   81574:	d005      	beq.n	81582 <_strtol_r+0x72>
   81576:	4540      	cmp	r0, r8
   81578:	d823      	bhi.n	815c2 <_strtol_r+0xb2>
   8157a:	d020      	beq.n	815be <_strtol_r+0xae>
   8157c:	fb09 5000 	mla	r0, r9, r0, r5
   81580:	2701      	movs	r7, #1
   81582:	f814 5b01 	ldrb.w	r5, [r4], #1
   81586:	eb0c 0605 	add.w	r6, ip, r5
   8158a:	7876      	ldrb	r6, [r6, #1]
   8158c:	f016 0f04 	tst.w	r6, #4
   81590:	d1ec      	bne.n	8156c <_strtol_r+0x5c>
   81592:	f016 0603 	ands.w	r6, r6, #3
   81596:	d006      	beq.n	815a6 <_strtol_r+0x96>
   81598:	2e01      	cmp	r6, #1
   8159a:	bf14      	ite	ne
   8159c:	2657      	movne	r6, #87	; 0x57
   8159e:	2637      	moveq	r6, #55	; 0x37
   815a0:	1bad      	subs	r5, r5, r6
   815a2:	42ab      	cmp	r3, r5
   815a4:	dce5      	bgt.n	81572 <_strtol_r+0x62>
   815a6:	1c7b      	adds	r3, r7, #1
   815a8:	d015      	beq.n	815d6 <_strtol_r+0xc6>
   815aa:	f1ba 0f00 	cmp.w	sl, #0
   815ae:	d121      	bne.n	815f4 <_strtol_r+0xe4>
   815b0:	b10a      	cbz	r2, 815b6 <_strtol_r+0xa6>
   815b2:	b9ef      	cbnz	r7, 815f0 <_strtol_r+0xe0>
   815b4:	6011      	str	r1, [r2, #0]
   815b6:	b002      	add	sp, #8
   815b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   815bc:	4770      	bx	lr
   815be:	455d      	cmp	r5, fp
   815c0:	dddc      	ble.n	8157c <_strtol_r+0x6c>
   815c2:	f04f 37ff 	mov.w	r7, #4294967295
   815c6:	e7dc      	b.n	81582 <_strtol_r+0x72>
   815c8:	2d30      	cmp	r5, #48	; 0x30
   815ca:	d01a      	beq.n	81602 <_strtol_r+0xf2>
   815cc:	2b00      	cmp	r3, #0
   815ce:	d1be      	bne.n	8154e <_strtol_r+0x3e>
   815d0:	230a      	movs	r3, #10
   815d2:	4699      	mov	r9, r3
   815d4:	e7bc      	b.n	81550 <_strtol_r+0x40>
   815d6:	9901      	ldr	r1, [sp, #4]
   815d8:	f1ba 0f00 	cmp.w	sl, #0
   815dc:	f04f 0322 	mov.w	r3, #34	; 0x22
   815e0:	bf0c      	ite	eq
   815e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   815e6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   815ea:	600b      	str	r3, [r1, #0]
   815ec:	2a00      	cmp	r2, #0
   815ee:	d0e2      	beq.n	815b6 <_strtol_r+0xa6>
   815f0:	1e61      	subs	r1, r4, #1
   815f2:	e7df      	b.n	815b4 <_strtol_r+0xa4>
   815f4:	4240      	negs	r0, r0
   815f6:	e7db      	b.n	815b0 <_strtol_r+0xa0>
   815f8:	1cb4      	adds	r4, r6, #2
   815fa:	7875      	ldrb	r5, [r6, #1]
   815fc:	f04f 0a01 	mov.w	sl, #1
   81600:	e7a2      	b.n	81548 <_strtol_r+0x38>
   81602:	7820      	ldrb	r0, [r4, #0]
   81604:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   81608:	2858      	cmp	r0, #88	; 0x58
   8160a:	d003      	beq.n	81614 <_strtol_r+0x104>
   8160c:	2b00      	cmp	r3, #0
   8160e:	d19e      	bne.n	8154e <_strtol_r+0x3e>
   81610:	2308      	movs	r3, #8
   81612:	e79c      	b.n	8154e <_strtol_r+0x3e>
   81614:	2310      	movs	r3, #16
   81616:	7865      	ldrb	r5, [r4, #1]
   81618:	4699      	mov	r9, r3
   8161a:	3402      	adds	r4, #2
   8161c:	e798      	b.n	81550 <_strtol_r+0x40>
   8161e:	bf00      	nop
   81620:	20000434 	.word	0x20000434

00081624 <strtol>:
   81624:	b430      	push	{r4, r5}
   81626:	4c04      	ldr	r4, [pc, #16]	; (81638 <strtol+0x14>)
   81628:	460d      	mov	r5, r1
   8162a:	4613      	mov	r3, r2
   8162c:	4601      	mov	r1, r0
   8162e:	462a      	mov	r2, r5
   81630:	6820      	ldr	r0, [r4, #0]
   81632:	bc30      	pop	{r4, r5}
   81634:	f7ff bf6c 	b.w	81510 <_strtol_r>
   81638:	20000430 	.word	0x20000430

0008163c <register_fini>:
   8163c:	4b02      	ldr	r3, [pc, #8]	; (81648 <register_fini+0xc>)
   8163e:	b113      	cbz	r3, 81646 <register_fini+0xa>
   81640:	4802      	ldr	r0, [pc, #8]	; (8164c <register_fini+0x10>)
   81642:	f000 b805 	b.w	81650 <atexit>
   81646:	4770      	bx	lr
   81648:	00000000 	.word	0x00000000
   8164c:	0008165d 	.word	0x0008165d

00081650 <atexit>:
   81650:	4601      	mov	r1, r0
   81652:	2000      	movs	r0, #0
   81654:	4602      	mov	r2, r0
   81656:	4603      	mov	r3, r0
   81658:	f000 b818 	b.w	8168c <__register_exitproc>

0008165c <__libc_fini_array>:
   8165c:	b538      	push	{r3, r4, r5, lr}
   8165e:	4d09      	ldr	r5, [pc, #36]	; (81684 <__libc_fini_array+0x28>)
   81660:	4c09      	ldr	r4, [pc, #36]	; (81688 <__libc_fini_array+0x2c>)
   81662:	1b64      	subs	r4, r4, r5
   81664:	10a4      	asrs	r4, r4, #2
   81666:	bf18      	it	ne
   81668:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   8166c:	d005      	beq.n	8167a <__libc_fini_array+0x1e>
   8166e:	3c01      	subs	r4, #1
   81670:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81674:	4798      	blx	r3
   81676:	2c00      	cmp	r4, #0
   81678:	d1f9      	bne.n	8166e <__libc_fini_array+0x12>
   8167a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8167e:	f000 b8fd 	b.w	8187c <_fini>
   81682:	bf00      	nop
   81684:	00081888 	.word	0x00081888
   81688:	0008188c 	.word	0x0008188c

0008168c <__register_exitproc>:
   8168c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8168e:	4c27      	ldr	r4, [pc, #156]	; (8172c <__register_exitproc+0xa0>)
   81690:	b085      	sub	sp, #20
   81692:	6826      	ldr	r6, [r4, #0]
   81694:	4607      	mov	r7, r0
   81696:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8169a:	2c00      	cmp	r4, #0
   8169c:	d040      	beq.n	81720 <__register_exitproc+0x94>
   8169e:	6865      	ldr	r5, [r4, #4]
   816a0:	2d1f      	cmp	r5, #31
   816a2:	dd1e      	ble.n	816e2 <__register_exitproc+0x56>
   816a4:	4822      	ldr	r0, [pc, #136]	; (81730 <__register_exitproc+0xa4>)
   816a6:	b918      	cbnz	r0, 816b0 <__register_exitproc+0x24>
   816a8:	f04f 30ff 	mov.w	r0, #4294967295
   816ac:	b005      	add	sp, #20
   816ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   816b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   816b4:	9103      	str	r1, [sp, #12]
   816b6:	9202      	str	r2, [sp, #8]
   816b8:	9301      	str	r3, [sp, #4]
   816ba:	f3af 8000 	nop.w
   816be:	9903      	ldr	r1, [sp, #12]
   816c0:	4604      	mov	r4, r0
   816c2:	9a02      	ldr	r2, [sp, #8]
   816c4:	9b01      	ldr	r3, [sp, #4]
   816c6:	2800      	cmp	r0, #0
   816c8:	d0ee      	beq.n	816a8 <__register_exitproc+0x1c>
   816ca:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   816ce:	2000      	movs	r0, #0
   816d0:	6025      	str	r5, [r4, #0]
   816d2:	6060      	str	r0, [r4, #4]
   816d4:	4605      	mov	r5, r0
   816d6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   816da:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   816de:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   816e2:	b93f      	cbnz	r7, 816f4 <__register_exitproc+0x68>
   816e4:	1c6b      	adds	r3, r5, #1
   816e6:	2000      	movs	r0, #0
   816e8:	3502      	adds	r5, #2
   816ea:	6063      	str	r3, [r4, #4]
   816ec:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   816f0:	b005      	add	sp, #20
   816f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   816f4:	2601      	movs	r6, #1
   816f6:	40ae      	lsls	r6, r5
   816f8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   816fc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   81700:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   81704:	2f02      	cmp	r7, #2
   81706:	ea42 0206 	orr.w	r2, r2, r6
   8170a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8170e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   81712:	d1e7      	bne.n	816e4 <__register_exitproc+0x58>
   81714:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81718:	431e      	orrs	r6, r3
   8171a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8171e:	e7e1      	b.n	816e4 <__register_exitproc+0x58>
   81720:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81724:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81728:	e7b9      	b.n	8169e <__register_exitproc+0x12>
   8172a:	bf00      	nop
   8172c:	00081760 	.word	0x00081760
   81730:	00000000 	.word	0x00000000
   81734:	65636552 	.word	0x65636552
   81738:	64657669 	.word	0x64657669
   8173c:	0000203a 	.word	0x0000203a
   81740:	00000023 	.word	0x00000023
   81744:	65657053 	.word	0x65657053
   81748:	203a3164 	.word	0x203a3164
   8174c:	00000000 	.word	0x00000000
   81750:	65705320 	.word	0x65705320
   81754:	3a326465 	.word	0x3a326465
   81758:	00000020 	.word	0x00000020
   8175c:	00000043 	.word	0x00000043

00081760 <_global_impure_ptr>:
   81760:	20000008                                ... 

00081764 <_ctype_>:
   81764:	20202000 20202020 28282020 20282828     .         ((((( 
   81774:	20202020 20202020 20202020 20202020                     
   81784:	10108820 10101010 10101010 10101010      ...............
   81794:	04040410 04040404 10040404 10101010     ................
   817a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   817b4:	01010101 01010101 01010101 10101010     ................
   817c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   817d4:	02020202 02020202 02020202 10101010     ................
   817e4:	00000020 00000000 00000000 00000000      ...............
	...

00081868 <_init>:
   81868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8186a:	bf00      	nop
   8186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8186e:	bc08      	pop	{r3}
   81870:	469e      	mov	lr, r3
   81872:	4770      	bx	lr

00081874 <__init_array_start>:
   81874:	0008163d 	.word	0x0008163d

00081878 <__frame_dummy_init_array_entry>:
   81878:	00080119                                ....

0008187c <_fini>:
   8187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8187e:	bf00      	nop
   81880:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81882:	bc08      	pop	{r3}
   81884:	469e      	mov	lr, r3
   81886:	4770      	bx	lr

00081888 <__fini_array_start>:
   81888:	000800f5 	.word	0x000800f5
