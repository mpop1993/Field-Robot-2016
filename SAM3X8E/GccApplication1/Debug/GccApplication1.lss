
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b38  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00081b38  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  20000438  00081f70  00010438  2**2
                  ALLOC
  3 .stack        00000404  20000494  00081fcc  00010438  2**0
                  ALLOC
  4 .heap         00000200  20000898  000823d0  00010438  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  7 .debug_info   00004425  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a2f  00000000  00000000  000148e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000006c8  00000000  00000000  00015310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001d0  00000000  00000000  000159d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00015ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011f20  00000000  00000000  00015cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000045b7  00000000  00000000  00027c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055377  00000000  00000000  0002c1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000624  00000000  00000000  00081548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20000898 	.word	0x20000898
   80004:	00080149 	.word	0x00080149
   80008:	000801d1 	.word	0x000801d1
   8000c:	000801d1 	.word	0x000801d1
   80010:	000801d1 	.word	0x000801d1
   80014:	000801d1 	.word	0x000801d1
   80018:	000801d1 	.word	0x000801d1
	...
   8002c:	000801d1 	.word	0x000801d1
   80030:	000801d1 	.word	0x000801d1
   80034:	00000000 	.word	0x00000000
   80038:	000801d1 	.word	0x000801d1
   8003c:	000801d1 	.word	0x000801d1
   80040:	000801d1 	.word	0x000801d1
   80044:	000801d1 	.word	0x000801d1
   80048:	000801d1 	.word	0x000801d1
   8004c:	000801d1 	.word	0x000801d1
   80050:	000801d1 	.word	0x000801d1
   80054:	000801d1 	.word	0x000801d1
   80058:	000801d1 	.word	0x000801d1
   8005c:	000801d1 	.word	0x000801d1
   80060:	00080b81 	.word	0x00080b81
   80064:	000801d1 	.word	0x000801d1
   80068:	00000000 	.word	0x00000000
   8006c:	000801d1 	.word	0x000801d1
   80070:	000802a9 	.word	0x000802a9
   80074:	00080319 	.word	0x00080319
   80078:	000802e1 	.word	0x000802e1
	...
   80084:	000801d1 	.word	0x000801d1
   80088:	000801d1 	.word	0x000801d1
   8008c:	000801d1 	.word	0x000801d1
   80090:	000801d1 	.word	0x000801d1
   80094:	000801d1 	.word	0x000801d1
   80098:	000801d1 	.word	0x000801d1
   8009c:	000801d1 	.word	0x000801d1
   800a0:	000801d1 	.word	0x000801d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000801d1 	.word	0x000801d1
   800ac:	00080a85 	.word	0x00080a85
   800b0:	000801d1 	.word	0x000801d1
   800b4:	000801d1 	.word	0x000801d1
   800b8:	000801d1 	.word	0x000801d1
   800bc:	000801d1 	.word	0x000801d1
   800c0:	000801d1 	.word	0x000801d1
   800c4:	000801d1 	.word	0x000801d1
   800c8:	000801d1 	.word	0x000801d1
   800cc:	000801d1 	.word	0x000801d1
   800d0:	000801d1 	.word	0x000801d1
   800d4:	000801d1 	.word	0x000801d1
   800d8:	000801d1 	.word	0x000801d1
   800dc:	000801d1 	.word	0x000801d1
   800e0:	000801d1 	.word	0x000801d1
   800e4:	000801d1 	.word	0x000801d1
   800e8:	000801d1 	.word	0x000801d1
   800ec:	000801d1 	.word	0x000801d1
   800f0:	000801d1 	.word	0x000801d1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000438 	.word	0x20000438
   80110:	00000000 	.word	0x00000000
   80114:	00081b38 	.word	0x00081b38

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00081b38 	.word	0x00081b38
   8013c:	2000043c 	.word	0x2000043c
   80140:	00081b38 	.word	0x00081b38
   80144:	00000000 	.word	0x00000000

00080148 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   8014e:	4b17      	ldr	r3, [pc, #92]	; (801ac <Reset_Handler+0x64>)
   80150:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   80152:	4b17      	ldr	r3, [pc, #92]	; (801b0 <Reset_Handler+0x68>)
   80154:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   80156:	687a      	ldr	r2, [r7, #4]
   80158:	683b      	ldr	r3, [r7, #0]
   8015a:	429a      	cmp	r2, r3
   8015c:	d00c      	beq.n	80178 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   8015e:	e007      	b.n	80170 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   80160:	683b      	ldr	r3, [r7, #0]
   80162:	1d1a      	adds	r2, r3, #4
   80164:	603a      	str	r2, [r7, #0]
   80166:	687a      	ldr	r2, [r7, #4]
   80168:	1d11      	adds	r1, r2, #4
   8016a:	6079      	str	r1, [r7, #4]
   8016c:	6812      	ldr	r2, [r2, #0]
   8016e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   80170:	683a      	ldr	r2, [r7, #0]
   80172:	4b10      	ldr	r3, [pc, #64]	; (801b4 <Reset_Handler+0x6c>)
   80174:	429a      	cmp	r2, r3
   80176:	d3f3      	bcc.n	80160 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80178:	4b0f      	ldr	r3, [pc, #60]	; (801b8 <Reset_Handler+0x70>)
   8017a:	603b      	str	r3, [r7, #0]
   8017c:	e004      	b.n	80188 <Reset_Handler+0x40>
                *pDest++ = 0;
   8017e:	683b      	ldr	r3, [r7, #0]
   80180:	1d1a      	adds	r2, r3, #4
   80182:	603a      	str	r2, [r7, #0]
   80184:	2200      	movs	r2, #0
   80186:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80188:	683a      	ldr	r2, [r7, #0]
   8018a:	4b0c      	ldr	r3, [pc, #48]	; (801bc <Reset_Handler+0x74>)
   8018c:	429a      	cmp	r2, r3
   8018e:	d3f6      	bcc.n	8017e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   80190:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x78>)
   80192:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80194:	4a0b      	ldr	r2, [pc, #44]	; (801c4 <Reset_Handler+0x7c>)
   80196:	687b      	ldr	r3, [r7, #4]
   80198:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8019c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   801a0:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   801a2:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x80>)
   801a4:	4798      	blx	r3

        /* Branch to main function */
        main();
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x84>)
   801a8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   801aa:	e7fe      	b.n	801aa <Reset_Handler+0x62>
   801ac:	00081b38 	.word	0x00081b38
   801b0:	20000000 	.word	0x20000000
   801b4:	20000438 	.word	0x20000438
   801b8:	20000438 	.word	0x20000438
   801bc:	20000494 	.word	0x20000494
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	00081611 	.word	0x00081611
   801cc:	00080379 	.word	0x00080379

000801d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   801d0:	b480      	push	{r7}
   801d2:	af00      	add	r7, sp, #0
        while (1) {
        }
   801d4:	e7fe      	b.n	801d4 <Dummy_Handler+0x4>
   801d6:	bf00      	nop

000801d8 <SystemInit>:
/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
   801d8:	b480      	push	{r7}
   801da:	af00      	add	r7, sp, #0
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801dc:	4b2a      	ldr	r3, [pc, #168]	; (80288 <SystemInit+0xb0>)
   801de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801e2:	601a      	str	r2, [r3, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801e4:	4b29      	ldr	r3, [pc, #164]	; (8028c <SystemInit+0xb4>)
   801e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801ea:	601a      	str	r2, [r3, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801ec:	4b28      	ldr	r3, [pc, #160]	; (80290 <SystemInit+0xb8>)
   801ee:	6a1b      	ldr	r3, [r3, #32]
   801f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   801f4:	2b00      	cmp	r3, #0
   801f6:	d109      	bne.n	8020c <SystemInit+0x34>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801f8:	4b25      	ldr	r3, [pc, #148]	; (80290 <SystemInit+0xb8>)
   801fa:	4a26      	ldr	r2, [pc, #152]	; (80294 <SystemInit+0xbc>)
   801fc:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801fe:	bf00      	nop
   80200:	4b23      	ldr	r3, [pc, #140]	; (80290 <SystemInit+0xb8>)
   80202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80204:	f003 0301 	and.w	r3, r3, #1
   80208:	2b00      	cmp	r3, #0
   8020a:	d0f9      	beq.n	80200 <SystemInit+0x28>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8020c:	4b20      	ldr	r3, [pc, #128]	; (80290 <SystemInit+0xb8>)
   8020e:	4a22      	ldr	r2, [pc, #136]	; (80298 <SystemInit+0xc0>)
   80210:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80212:	bf00      	nop
   80214:	4b1e      	ldr	r3, [pc, #120]	; (80290 <SystemInit+0xb8>)
   80216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8021c:	2b00      	cmp	r3, #0
   8021e:	d0f9      	beq.n	80214 <SystemInit+0x3c>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80220:	4b1b      	ldr	r3, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80222:	4a1b      	ldr	r2, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80224:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80226:	f022 0203 	bic.w	r2, r2, #3
   8022a:	f042 0201 	orr.w	r2, r2, #1
   8022e:	631a      	str	r2, [r3, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80230:	bf00      	nop
   80232:	4b17      	ldr	r3, [pc, #92]	; (80290 <SystemInit+0xb8>)
   80234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80236:	f003 0308 	and.w	r3, r3, #8
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f9      	beq.n	80232 <SystemInit+0x5a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8023e:	4b14      	ldr	r3, [pc, #80]	; (80290 <SystemInit+0xb8>)
   80240:	4a16      	ldr	r2, [pc, #88]	; (8029c <SystemInit+0xc4>)
   80242:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80244:	bf00      	nop
   80246:	4b12      	ldr	r3, [pc, #72]	; (80290 <SystemInit+0xb8>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f003 0302 	and.w	r3, r3, #2
   8024e:	2b00      	cmp	r3, #0
   80250:	d0f9      	beq.n	80246 <SystemInit+0x6e>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80252:	4b0f      	ldr	r3, [pc, #60]	; (80290 <SystemInit+0xb8>)
   80254:	2211      	movs	r2, #17
   80256:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80258:	bf00      	nop
   8025a:	4b0d      	ldr	r3, [pc, #52]	; (80290 <SystemInit+0xb8>)
   8025c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8025e:	f003 0308 	and.w	r3, r3, #8
   80262:	2b00      	cmp	r3, #0
   80264:	d0f9      	beq.n	8025a <SystemInit+0x82>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80266:	4b0a      	ldr	r3, [pc, #40]	; (80290 <SystemInit+0xb8>)
   80268:	2212      	movs	r2, #18
   8026a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8026c:	bf00      	nop
   8026e:	4b08      	ldr	r3, [pc, #32]	; (80290 <SystemInit+0xb8>)
   80270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80272:	f003 0308 	and.w	r3, r3, #8
   80276:	2b00      	cmp	r3, #0
   80278:	d0f9      	beq.n	8026e <SystemInit+0x96>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8027a:	4b09      	ldr	r3, [pc, #36]	; (802a0 <SystemInit+0xc8>)
   8027c:	4a09      	ldr	r2, [pc, #36]	; (802a4 <SystemInit+0xcc>)
   8027e:	601a      	str	r2, [r3, #0]
}
   80280:	46bd      	mov	sp, r7
   80282:	f85d 7b04 	ldr.w	r7, [sp], #4
   80286:	4770      	bx	lr
   80288:	400e0a00 	.word	0x400e0a00
   8028c:	400e0c00 	.word	0x400e0c00
   80290:	400e0600 	.word	0x400e0600
   80294:	00370809 	.word	0x00370809
   80298:	01370809 	.word	0x01370809
   8029c:	200d3f01 	.word	0x200d3f01
   802a0:	20000000 	.word	0x20000000
   802a4:	0501bd00 	.word	0x0501bd00

000802a8 <PIOB_Handler>:


// *************************************************************************************************************************************

void PIOB_Handler()
{
   802a8:	b480      	push	{r7}
   802aa:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTB we need to
	//  check if PB27 is the one triggering the interrupt.
	if((PIOB->PIO_ISR & PIO_PB27)==PIO_PB27){
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <PIOB_Handler+0x2c>)
   802ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   802b4:	2b00      	cmp	r3, #0
   802b6:	d009      	beq.n	802cc <PIOB_Handler+0x24>
		iEncoder_ST++;
   802b8:	4b07      	ldr	r3, [pc, #28]	; (802d8 <PIOB_Handler+0x30>)
   802ba:	681b      	ldr	r3, [r3, #0]
   802bc:	1c5a      	adds	r2, r3, #1
   802be:	4b06      	ldr	r3, [pc, #24]	; (802d8 <PIOB_Handler+0x30>)
   802c0:	601a      	str	r2, [r3, #0]
		iEncoder_ST_current++;
   802c2:	4b06      	ldr	r3, [pc, #24]	; (802dc <PIOB_Handler+0x34>)
   802c4:	681b      	ldr	r3, [r3, #0]
   802c6:	1c5a      	adds	r2, r3, #1
   802c8:	4b04      	ldr	r3, [pc, #16]	; (802dc <PIOB_Handler+0x34>)
   802ca:	601a      	str	r2, [r3, #0]
	}
}
   802cc:	46bd      	mov	sp, r7
   802ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   802d2:	4770      	bx	lr
   802d4:	400e1000 	.word	0x400e1000
   802d8:	2000045c 	.word	0x2000045c
   802dc:	20000464 	.word	0x20000464

000802e0 <PIOD_Handler>:

void PIOD_Handler()
{
   802e0:	b480      	push	{r7}
   802e2:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTD we need to
	//  check if PD8 is the one triggering the interrupt.
	if((PIOD->PIO_ISR & PIO_PD8)==PIO_PD8){
   802e4:	4b09      	ldr	r3, [pc, #36]	; (8030c <PIOD_Handler+0x2c>)
   802e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
   802ec:	2b00      	cmp	r3, #0
   802ee:	d009      	beq.n	80304 <PIOD_Handler+0x24>
		iEncoder_DR++;
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <PIOD_Handler+0x30>)
   802f2:	681b      	ldr	r3, [r3, #0]
   802f4:	1c5a      	adds	r2, r3, #1
   802f6:	4b06      	ldr	r3, [pc, #24]	; (80310 <PIOD_Handler+0x30>)
   802f8:	601a      	str	r2, [r3, #0]
		iEncoder_DR_current++;
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <PIOD_Handler+0x34>)
   802fc:	681b      	ldr	r3, [r3, #0]
   802fe:	1c5a      	adds	r2, r3, #1
   80300:	4b04      	ldr	r3, [pc, #16]	; (80314 <PIOD_Handler+0x34>)
   80302:	601a      	str	r2, [r3, #0]
	}
}
   80304:	46bd      	mov	sp, r7
   80306:	f85d 7b04 	ldr.w	r7, [sp], #4
   8030a:	4770      	bx	lr
   8030c:	400e1400 	.word	0x400e1400
   80310:	20000470 	.word	0x20000470
   80314:	20000460 	.word	0x20000460

00080318 <PIOC_Handler>:

void PIOC_Handler()
{
   80318:	b480      	push	{r7}
   8031a:	b083      	sub	sp, #12
   8031c:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTC we need to
	//  check if PC25 is the one triggering the interrupt.
	uint32_t status = PIOC->PIO_ISR;
   8031e:	4b13      	ldr	r3, [pc, #76]	; (8036c <PIOC_Handler+0x54>)
   80320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   80322:	607b      	str	r3, [r7, #4]
	
	if((status & PIO_PC25)==PIO_PC25)
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   8032a:	2b00      	cmp	r3, #0
   8032c:	d00c      	beq.n	80348 <PIOC_Handler+0x30>
	{
		if(startStop_Camera)
   8032e:	4b10      	ldr	r3, [pc, #64]	; (80370 <PIOC_Handler+0x58>)
   80330:	781b      	ldrb	r3, [r3, #0]
   80332:	b2db      	uxtb	r3, r3
   80334:	2b00      	cmp	r3, #0
   80336:	d003      	beq.n	80340 <PIOC_Handler+0x28>
		{
			startStop_Camera = 0;
   80338:	4b0d      	ldr	r3, [pc, #52]	; (80370 <PIOC_Handler+0x58>)
   8033a:	2200      	movs	r2, #0
   8033c:	701a      	strb	r2, [r3, #0]
   8033e:	e010      	b.n	80362 <PIOC_Handler+0x4a>
		}
		else
		{
			startStop_Camera = 1;
   80340:	4b0b      	ldr	r3, [pc, #44]	; (80370 <PIOC_Handler+0x58>)
   80342:	2201      	movs	r2, #1
   80344:	701a      	strb	r2, [r3, #0]
   80346:	e00c      	b.n	80362 <PIOC_Handler+0x4a>
		}
	}
	else if((status & PIO_PC28)==PIO_PC28)
   80348:	687b      	ldr	r3, [r7, #4]
   8034a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
   8034e:	2b00      	cmp	r3, #0
   80350:	d007      	beq.n	80362 <PIOC_Handler+0x4a>
	{
		if(initializeMotors == 0)
   80352:	4b08      	ldr	r3, [pc, #32]	; (80374 <PIOC_Handler+0x5c>)
   80354:	781b      	ldrb	r3, [r3, #0]
   80356:	b2db      	uxtb	r3, r3
   80358:	2b00      	cmp	r3, #0
   8035a:	d102      	bne.n	80362 <PIOC_Handler+0x4a>
		{
			initializeMotors = 1;
   8035c:	4b05      	ldr	r3, [pc, #20]	; (80374 <PIOC_Handler+0x5c>)
   8035e:	2201      	movs	r2, #1
   80360:	701a      	strb	r2, [r3, #0]
		}
	}
}
   80362:	370c      	adds	r7, #12
   80364:	46bd      	mov	sp, r7
   80366:	f85d 7b04 	ldr.w	r7, [sp], #4
   8036a:	4770      	bx	lr
   8036c:	400e1200 	.word	0x400e1200
   80370:	20000475 	.word	0x20000475
   80374:	20000474 	.word	0x20000474

00080378 <main>:
volatile uint8_t initializeMotors;

// *************************************************************************************************************************************

int main(void)
{
   80378:	b580      	push	{r7, lr}
   8037a:	af00      	add	r7, sp, #0
    /* Initialize the SAM system */
    SystemInit();
   8037c:	4b19      	ldr	r3, [pc, #100]	; (803e4 <main+0x6c>)
   8037e:	4798      	blx	r3
	/* Initialize pins */
	Pin_Configuration();
   80380:	4b19      	ldr	r3, [pc, #100]	; (803e8 <main+0x70>)
   80382:	4798      	blx	r3
	/* Initialize PWM generator */
	InitPWMController_MCLK(); 
   80384:	4b19      	ldr	r3, [pc, #100]	; (803ec <main+0x74>)
   80386:	4798      	blx	r3
	/* Initialize timers */
	Configure_Timers();
   80388:	4b19      	ldr	r3, [pc, #100]	; (803f0 <main+0x78>)
   8038a:	4798      	blx	r3
	/* Configre UART */
	configure_uart();
   8038c:	4b19      	ldr	r3, [pc, #100]	; (803f4 <main+0x7c>)
   8038e:	4798      	blx	r3
	
	/* Disable watchdog */
	WDT->WDT_MR |=  WDT_MR_WDDIS;
   80390:	4b19      	ldr	r3, [pc, #100]	; (803f8 <main+0x80>)
   80392:	4a19      	ldr	r2, [pc, #100]	; (803f8 <main+0x80>)
   80394:	6852      	ldr	r2, [r2, #4]
   80396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   8039a:	605a      	str	r2, [r3, #4]

	//selfTest();
	
	// Set variables 
	initializeMotors = 0;
   8039c:	4b17      	ldr	r3, [pc, #92]	; (803fc <main+0x84>)
   8039e:	2200      	movs	r2, #0
   803a0:	701a      	strb	r2, [r3, #0]
	// ----- TASK_1
	#if defined(TASK_1)
	
		while (1)
		{	
			if(initializeMotors){
   803a2:	4b16      	ldr	r3, [pc, #88]	; (803fc <main+0x84>)
   803a4:	781b      	ldrb	r3, [r3, #0]
   803a6:	b2db      	uxtb	r3, r3
   803a8:	2b00      	cmp	r3, #0
   803aa:	d004      	beq.n	803b6 <main+0x3e>
				InitMotors();
   803ac:	4b14      	ldr	r3, [pc, #80]	; (80400 <main+0x88>)
   803ae:	4798      	blx	r3
				initializeMotors = 0;
   803b0:	4b12      	ldr	r3, [pc, #72]	; (803fc <main+0x84>)
   803b2:	2200      	movs	r2, #0
   803b4:	701a      	strb	r2, [r3, #0]
			}
			
			if(getNewSpeed()){
   803b6:	4b13      	ldr	r3, [pc, #76]	; (80404 <main+0x8c>)
   803b8:	4798      	blx	r3
   803ba:	4603      	mov	r3, r0
   803bc:	2b00      	cmp	r3, #0
   803be:	d010      	beq.n	803e2 <main+0x6a>
				newSpeed = 0;
   803c0:	4b11      	ldr	r3, [pc, #68]	; (80408 <main+0x90>)
   803c2:	2200      	movs	r2, #0
   803c4:	701a      	strb	r2, [r3, #0]
				ControlledDrive(percentage_ST,percentage_DR);
   803c6:	4b11      	ldr	r3, [pc, #68]	; (8040c <main+0x94>)
   803c8:	781b      	ldrb	r3, [r3, #0]
   803ca:	b2da      	uxtb	r2, r3
   803cc:	4b10      	ldr	r3, [pc, #64]	; (80410 <main+0x98>)
   803ce:	781b      	ldrb	r3, [r3, #0]
   803d0:	b2db      	uxtb	r3, r3
   803d2:	4610      	mov	r0, r2
   803d4:	4619      	mov	r1, r3
   803d6:	4b0f      	ldr	r3, [pc, #60]	; (80414 <main+0x9c>)
   803d8:	4798      	blx	r3
				flag12 = 0;
   803da:	4b0f      	ldr	r3, [pc, #60]	; (80418 <main+0xa0>)
   803dc:	2200      	movs	r2, #0
   803de:	701a      	strb	r2, [r3, #0]
			}
		
			//ForwardDrive();
		}
   803e0:	e7df      	b.n	803a2 <main+0x2a>
   803e2:	e7de      	b.n	803a2 <main+0x2a>
   803e4:	000801d9 	.word	0x000801d9
   803e8:	0008044d 	.word	0x0008044d
   803ec:	00080705 	.word	0x00080705
   803f0:	00080a29 	.word	0x00080a29
   803f4:	00080d75 	.word	0x00080d75
   803f8:	400e1a50 	.word	0x400e1a50
   803fc:	20000474 	.word	0x20000474
   80400:	000808c1 	.word	0x000808c1
   80404:	00080c51 	.word	0x00080c51
   80408:	20000478 	.word	0x20000478
   8040c:	20000493 	.word	0x20000493
   80410:	20000490 	.word	0x20000490
   80414:	00080939 	.word	0x00080939
   80418:	20000454 	.word	0x20000454

0008041c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8041c:	b480      	push	{r7}
   8041e:	b083      	sub	sp, #12
   80420:	af00      	add	r7, sp, #0
   80422:	4603      	mov	r3, r0
   80424:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80426:	4b08      	ldr	r3, [pc, #32]	; (80448 <NVIC_EnableIRQ+0x2c>)
   80428:	f997 2007 	ldrsb.w	r2, [r7, #7]
   8042c:	0952      	lsrs	r2, r2, #5
   8042e:	79f9      	ldrb	r1, [r7, #7]
   80430:	f001 011f 	and.w	r1, r1, #31
   80434:	2001      	movs	r0, #1
   80436:	fa00 f101 	lsl.w	r1, r0, r1
   8043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8043e:	370c      	adds	r7, #12
   80440:	46bd      	mov	sp, r7
   80442:	f85d 7b04 	ldr.w	r7, [sp], #4
   80446:	4770      	bx	lr
   80448:	e000e100 	.word	0xe000e100

0008044c <Pin_Configuration>:
// ----- Defines
#define _BV(bit) (0x1u << bit)

// *************************************************************************************************************************************
void Pin_Configuration()
{
   8044c:	b580      	push	{r7, lr}
   8044e:	af00      	add	r7, sp, #0
	// Enable clock for line A
		PMC->PMC_PCER0 |= _BV(ID_PIOA);
   80450:	4ba4      	ldr	r3, [pc, #656]	; (806e4 <Pin_Configuration+0x298>)
   80452:	4aa4      	ldr	r2, [pc, #656]	; (806e4 <Pin_Configuration+0x298>)
   80454:	6912      	ldr	r2, [r2, #16]
   80456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8045a:	611a      	str	r2, [r3, #16]
	// Enable clock for line C
		PMC->PMC_PCER0 |= _BV(ID_PIOC);
   8045c:	4ba1      	ldr	r3, [pc, #644]	; (806e4 <Pin_Configuration+0x298>)
   8045e:	4aa1      	ldr	r2, [pc, #644]	; (806e4 <Pin_Configuration+0x298>)
   80460:	6912      	ldr	r2, [r2, #16]
   80462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80466:	611a      	str	r2, [r3, #16]
	// Enable clock for line B
		PMC->PMC_PCER0 |= _BV(ID_PIOB);
   80468:	4b9e      	ldr	r3, [pc, #632]	; (806e4 <Pin_Configuration+0x298>)
   8046a:	4a9e      	ldr	r2, [pc, #632]	; (806e4 <Pin_Configuration+0x298>)
   8046c:	6912      	ldr	r2, [r2, #16]
   8046e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   80472:	611a      	str	r2, [r3, #16]
	// Enable clock for line D
		PMC->PMC_PCER0 |= _BV(ID_PIOD);
   80474:	4b9b      	ldr	r3, [pc, #620]	; (806e4 <Pin_Configuration+0x298>)
   80476:	4a9b      	ldr	r2, [pc, #620]	; (806e4 <Pin_Configuration+0x298>)
   80478:	6912      	ldr	r2, [r2, #16]
   8047a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   8047e:	611a      	str	r2, [r3, #16]

	// Set pin 13[B27] as input for encoder data - left[ST]
		PIOB -> PIO_PER |= PIO_PB27;
   80480:	4b99      	ldr	r3, [pc, #612]	; (806e8 <Pin_Configuration+0x29c>)
   80482:	4a99      	ldr	r2, [pc, #612]	; (806e8 <Pin_Configuration+0x29c>)
   80484:	6812      	ldr	r2, [r2, #0]
   80486:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8048a:	601a      	str	r2, [r3, #0]
		PIOB -> PIO_ODR |= PIO_PB27;
   8048c:	4b96      	ldr	r3, [pc, #600]	; (806e8 <Pin_Configuration+0x29c>)
   8048e:	4a96      	ldr	r2, [pc, #600]	; (806e8 <Pin_Configuration+0x29c>)
   80490:	6952      	ldr	r2, [r2, #20]
   80492:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80496:	615a      	str	r2, [r3, #20]
		PIOB -> PIO_PUDR |= PIO_PB27;
   80498:	4b93      	ldr	r3, [pc, #588]	; (806e8 <Pin_Configuration+0x29c>)
   8049a:	4a93      	ldr	r2, [pc, #588]	; (806e8 <Pin_Configuration+0x29c>)
   8049c:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8049e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   804a2:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOB->PIO_AIMER |= PIO_PB27;
   804a4:	4b90      	ldr	r3, [pc, #576]	; (806e8 <Pin_Configuration+0x29c>)
   804a6:	4a90      	ldr	r2, [pc, #576]	; (806e8 <Pin_Configuration+0x29c>)
   804a8:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   804ac:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   804b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOB->PIO_ESR |= PIO_PB27;
   804b4:	4b8c      	ldr	r3, [pc, #560]	; (806e8 <Pin_Configuration+0x29c>)
   804b6:	4a8c      	ldr	r2, [pc, #560]	; (806e8 <Pin_Configuration+0x29c>)
   804b8:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   804bc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   804c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Rising Edge/Low Level Select Register
		PIOB->PIO_REHLSR |= PIO_PB27;
   804c4:	4b88      	ldr	r3, [pc, #544]	; (806e8 <Pin_Configuration+0x29c>)
   804c6:	4a88      	ldr	r2, [pc, #544]	; (806e8 <Pin_Configuration+0x29c>)
   804c8:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   804cc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   804d0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTB.PB27
		PIOB->PIO_IER |= PIO_PB27;
   804d4:	4b84      	ldr	r3, [pc, #528]	; (806e8 <Pin_Configuration+0x29c>)
   804d6:	4a84      	ldr	r2, [pc, #528]	; (806e8 <Pin_Configuration+0x29c>)
   804d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
   804da:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   804de:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOB_IRQn);
   804e0:	200c      	movs	r0, #12
   804e2:	4b82      	ldr	r3, [pc, #520]	; (806ec <Pin_Configuration+0x2a0>)
   804e4:	4798      	blx	r3
	
	// Set pin 12[D8] as input for encoder data - right[DR]
		PIOD -> PIO_PER |= PIO_PD8;
   804e6:	4b82      	ldr	r3, [pc, #520]	; (806f0 <Pin_Configuration+0x2a4>)
   804e8:	4a81      	ldr	r2, [pc, #516]	; (806f0 <Pin_Configuration+0x2a4>)
   804ea:	6812      	ldr	r2, [r2, #0]
   804ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804f0:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_ODR |= PIO_PD8;
   804f2:	4b7f      	ldr	r3, [pc, #508]	; (806f0 <Pin_Configuration+0x2a4>)
   804f4:	4a7e      	ldr	r2, [pc, #504]	; (806f0 <Pin_Configuration+0x2a4>)
   804f6:	6952      	ldr	r2, [r2, #20]
   804f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804fc:	615a      	str	r2, [r3, #20]
		PIOD -> PIO_PUDR |= PIO_PD8;
   804fe:	4b7c      	ldr	r3, [pc, #496]	; (806f0 <Pin_Configuration+0x2a4>)
   80500:	4a7b      	ldr	r2, [pc, #492]	; (806f0 <Pin_Configuration+0x2a4>)
   80502:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80508:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOD -> PIO_AIMER |= PIO_PD8;
   8050a:	4b79      	ldr	r3, [pc, #484]	; (806f0 <Pin_Configuration+0x2a4>)
   8050c:	4a78      	ldr	r2, [pc, #480]	; (806f0 <Pin_Configuration+0x2a4>)
   8050e:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   80512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80516:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOD -> PIO_ESR |= PIO_PD8;
   8051a:	4b75      	ldr	r3, [pc, #468]	; (806f0 <Pin_Configuration+0x2a4>)
   8051c:	4a74      	ldr	r2, [pc, #464]	; (806f0 <Pin_Configuration+0x2a4>)
   8051e:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   80522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80526:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Rising Edge/Low Level Select Register
		PIOD -> PIO_REHLSR |= PIO_PD8;
   8052a:	4b71      	ldr	r3, [pc, #452]	; (806f0 <Pin_Configuration+0x2a4>)
   8052c:	4a70      	ldr	r2, [pc, #448]	; (806f0 <Pin_Configuration+0x2a4>)
   8052e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   80532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80536:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTD.PD8
		PIOD -> PIO_IER |= PIO_PD8;
   8053a:	4b6d      	ldr	r3, [pc, #436]	; (806f0 <Pin_Configuration+0x2a4>)
   8053c:	4a6c      	ldr	r2, [pc, #432]	; (806f0 <Pin_Configuration+0x2a4>)
   8053e:	6c12      	ldr	r2, [r2, #64]	; 0x40
   80540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80544:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOD_IRQn);
   80546:	200e      	movs	r0, #14
   80548:	4b68      	ldr	r3, [pc, #416]	; (806ec <Pin_Configuration+0x2a0>)
   8054a:	4798      	blx	r3
		
	// Set pin 11[D7] as output for Buzzer - PCB2 pin U
		PIOD -> PIO_PER |= PIO_PD7; // PIO_PER = PIO enable register
   8054c:	4b68      	ldr	r3, [pc, #416]	; (806f0 <Pin_Configuration+0x2a4>)
   8054e:	4a68      	ldr	r2, [pc, #416]	; (806f0 <Pin_Configuration+0x2a4>)
   80550:	6812      	ldr	r2, [r2, #0]
   80552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80556:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_OER |= PIO_PD7; // PIO_OER = Output Enable Register
   80558:	4b65      	ldr	r3, [pc, #404]	; (806f0 <Pin_Configuration+0x2a4>)
   8055a:	4a65      	ldr	r2, [pc, #404]	; (806f0 <Pin_Configuration+0x2a4>)
   8055c:	6912      	ldr	r2, [r2, #16]
   8055e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80562:	611a      	str	r2, [r3, #16]
		PIOD -> PIO_PUDR |= PIO_PD7; // Disable pull-up on pin D7
   80564:	4b62      	ldr	r3, [pc, #392]	; (806f0 <Pin_Configuration+0x2a4>)
   80566:	4a62      	ldr	r2, [pc, #392]	; (806f0 <Pin_Configuration+0x2a4>)
   80568:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8056a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8056e:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 9[C21] as PWM output for motors - left[ST]
		PIOC->PIO_PDR |= PIO_PC22; // PIO_PDR = PIO Disable register
   80570:	4b60      	ldr	r3, [pc, #384]	; (806f4 <Pin_Configuration+0x2a8>)
   80572:	4a60      	ldr	r2, [pc, #384]	; (806f4 <Pin_Configuration+0x2a8>)
   80574:	6852      	ldr	r2, [r2, #4]
   80576:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   8057a:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC22; // PIO_ABSR = Peripheral AB Select Register
   8057c:	4b5d      	ldr	r3, [pc, #372]	; (806f4 <Pin_Configuration+0x2a8>)
   8057e:	4a5d      	ldr	r2, [pc, #372]	; (806f4 <Pin_Configuration+0x2a8>)
   80580:	6f12      	ldr	r2, [r2, #112]	; 0x70
   80582:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   80586:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC22; // Enable output on pin C22
   80588:	4b5a      	ldr	r3, [pc, #360]	; (806f4 <Pin_Configuration+0x2a8>)
   8058a:	4a5a      	ldr	r2, [pc, #360]	; (806f4 <Pin_Configuration+0x2a8>)
   8058c:	6912      	ldr	r2, [r2, #16]
   8058e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   80592:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC22; // Disable pull-up on pin C22
   80594:	4b57      	ldr	r3, [pc, #348]	; (806f4 <Pin_Configuration+0x2a8>)
   80596:	4a57      	ldr	r2, [pc, #348]	; (806f4 <Pin_Configuration+0x2a8>)
   80598:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8059a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   8059e:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 8[C22] as PWM output for motors - right[DR]
		PIOC->PIO_PDR |= PIO_PC21; // Disable PIO Control on PC21 and set up for Peripheral B
   805a0:	4b54      	ldr	r3, [pc, #336]	; (806f4 <Pin_Configuration+0x2a8>)
   805a2:	4a54      	ldr	r2, [pc, #336]	; (806f4 <Pin_Configuration+0x2a8>)
   805a4:	6852      	ldr	r2, [r2, #4]
   805a6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   805aa:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC21;
   805ac:	4b51      	ldr	r3, [pc, #324]	; (806f4 <Pin_Configuration+0x2a8>)
   805ae:	4a51      	ldr	r2, [pc, #324]	; (806f4 <Pin_Configuration+0x2a8>)
   805b0:	6f12      	ldr	r2, [r2, #112]	; 0x70
   805b2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   805b6:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC21; // Enable output on pin C21
   805b8:	4b4e      	ldr	r3, [pc, #312]	; (806f4 <Pin_Configuration+0x2a8>)
   805ba:	4a4e      	ldr	r2, [pc, #312]	; (806f4 <Pin_Configuration+0x2a8>)
   805bc:	6912      	ldr	r2, [r2, #16]
   805be:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   805c2:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC21; // Enable pull-up on pin C21
   805c4:	4b4b      	ldr	r3, [pc, #300]	; (806f4 <Pin_Configuration+0x2a8>)
   805c6:	4a4b      	ldr	r2, [pc, #300]	; (806f4 <Pin_Configuration+0x2a8>)
   805c8:	6e12      	ldr	r2, [r2, #96]	; 0x60
   805ca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   805ce:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 7[C23] as output for LED - PCB2 pinS
		PIOC -> PIO_PER |= PIO_PC23;
   805d0:	4b48      	ldr	r3, [pc, #288]	; (806f4 <Pin_Configuration+0x2a8>)
   805d2:	4a48      	ldr	r2, [pc, #288]	; (806f4 <Pin_Configuration+0x2a8>)
   805d4:	6812      	ldr	r2, [r2, #0]
   805d6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   805da:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC23;
   805dc:	4b45      	ldr	r3, [pc, #276]	; (806f4 <Pin_Configuration+0x2a8>)
   805de:	4a45      	ldr	r2, [pc, #276]	; (806f4 <Pin_Configuration+0x2a8>)
   805e0:	6912      	ldr	r2, [r2, #16]
   805e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   805e6:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC23;
   805e8:	4b42      	ldr	r3, [pc, #264]	; (806f4 <Pin_Configuration+0x2a8>)
   805ea:	4a42      	ldr	r2, [pc, #264]	; (806f4 <Pin_Configuration+0x2a8>)
   805ec:	6e12      	ldr	r2, [r2, #96]	; 0x60
   805ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   805f2:	661a      	str	r2, [r3, #96]	; 0x60
		
	// Set pin 6[C24] as output for PUMP - PCB2 pinH
		PIOC -> PIO_PER |= PIO_PC24;
   805f4:	4b3f      	ldr	r3, [pc, #252]	; (806f4 <Pin_Configuration+0x2a8>)
   805f6:	4a3f      	ldr	r2, [pc, #252]	; (806f4 <Pin_Configuration+0x2a8>)
   805f8:	6812      	ldr	r2, [r2, #0]
   805fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   805fe:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC24;
   80600:	4b3c      	ldr	r3, [pc, #240]	; (806f4 <Pin_Configuration+0x2a8>)
   80602:	4a3c      	ldr	r2, [pc, #240]	; (806f4 <Pin_Configuration+0x2a8>)
   80604:	6912      	ldr	r2, [r2, #16]
   80606:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8060a:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC24;
   8060c:	4b39      	ldr	r3, [pc, #228]	; (806f4 <Pin_Configuration+0x2a8>)
   8060e:	4a39      	ldr	r2, [pc, #228]	; (806f4 <Pin_Configuration+0x2a8>)
   80610:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80612:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80616:	661a      	str	r2, [r3, #96]	; 0x60
		
	// Set pin 5[C25] as input for start/stop from camera
		PIOC -> PIO_PER |= PIO_PC25;
   80618:	4b36      	ldr	r3, [pc, #216]	; (806f4 <Pin_Configuration+0x2a8>)
   8061a:	4a36      	ldr	r2, [pc, #216]	; (806f4 <Pin_Configuration+0x2a8>)
   8061c:	6812      	ldr	r2, [r2, #0]
   8061e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80622:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_ODR |= PIO_PC25;
   80624:	4b33      	ldr	r3, [pc, #204]	; (806f4 <Pin_Configuration+0x2a8>)
   80626:	4a33      	ldr	r2, [pc, #204]	; (806f4 <Pin_Configuration+0x2a8>)
   80628:	6952      	ldr	r2, [r2, #20]
   8062a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   8062e:	615a      	str	r2, [r3, #20]
		PIOC -> PIO_PUDR |= PIO_PC25;
   80630:	4b30      	ldr	r3, [pc, #192]	; (806f4 <Pin_Configuration+0x2a8>)
   80632:	4a30      	ldr	r2, [pc, #192]	; (806f4 <Pin_Configuration+0x2a8>)
   80634:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80636:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   8063a:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOC->PIO_AIMER |= PIO_PC25;
   8063c:	4b2d      	ldr	r3, [pc, #180]	; (806f4 <Pin_Configuration+0x2a8>)
   8063e:	4a2d      	ldr	r2, [pc, #180]	; (806f4 <Pin_Configuration+0x2a8>)
   80640:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   80644:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80648:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOC->PIO_ESR |= PIO_PC25;
   8064c:	4b29      	ldr	r3, [pc, #164]	; (806f4 <Pin_Configuration+0x2a8>)
   8064e:	4a29      	ldr	r2, [pc, #164]	; (806f4 <Pin_Configuration+0x2a8>)
   80650:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   80654:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80658:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Rising Edge/Low Level Select Register
		PIOC->PIO_REHLSR |= PIO_PC25;
   8065c:	4b25      	ldr	r3, [pc, #148]	; (806f4 <Pin_Configuration+0x2a8>)
   8065e:	4a25      	ldr	r2, [pc, #148]	; (806f4 <Pin_Configuration+0x2a8>)
   80660:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   80664:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80668:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTB.PB27
		PIOC->PIO_IER |= PIO_PC25;
   8066c:	4b21      	ldr	r3, [pc, #132]	; (806f4 <Pin_Configuration+0x2a8>)
   8066e:	4a21      	ldr	r2, [pc, #132]	; (806f4 <Pin_Configuration+0x2a8>)
   80670:	6c12      	ldr	r2, [r2, #64]	; 0x40
   80672:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80676:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOC_IRQn);
   80678:	200d      	movs	r0, #13
   8067a:	4b1c      	ldr	r3, [pc, #112]	; (806ec <Pin_Configuration+0x2a0>)
   8067c:	4798      	blx	r3
		
	// Set pin 3[C28] as input for motor init
		PIOC -> PIO_PER |= PIO_PC28;
   8067e:	4b1d      	ldr	r3, [pc, #116]	; (806f4 <Pin_Configuration+0x2a8>)
   80680:	4a1c      	ldr	r2, [pc, #112]	; (806f4 <Pin_Configuration+0x2a8>)
   80682:	6812      	ldr	r2, [r2, #0]
   80684:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80688:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_ODR |= PIO_PC28;
   8068a:	4b1a      	ldr	r3, [pc, #104]	; (806f4 <Pin_Configuration+0x2a8>)
   8068c:	4a19      	ldr	r2, [pc, #100]	; (806f4 <Pin_Configuration+0x2a8>)
   8068e:	6952      	ldr	r2, [r2, #20]
   80690:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80694:	615a      	str	r2, [r3, #20]
		PIOC -> PIO_PUDR |= PIO_PC28;
   80696:	4b17      	ldr	r3, [pc, #92]	; (806f4 <Pin_Configuration+0x2a8>)
   80698:	4a16      	ldr	r2, [pc, #88]	; (806f4 <Pin_Configuration+0x2a8>)
   8069a:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8069c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   806a0:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOC->PIO_AIMER |= PIO_PC28;
   806a2:	4b14      	ldr	r3, [pc, #80]	; (806f4 <Pin_Configuration+0x2a8>)
   806a4:	4a13      	ldr	r2, [pc, #76]	; (806f4 <Pin_Configuration+0x2a8>)
   806a6:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   806aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   806ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOC->PIO_ESR |= PIO_PC28;
   806b2:	4b10      	ldr	r3, [pc, #64]	; (806f4 <Pin_Configuration+0x2a8>)
   806b4:	4a0f      	ldr	r2, [pc, #60]	; (806f4 <Pin_Configuration+0x2a8>)
   806b6:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   806ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   806be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Rising Edge/Low Level Select Register
		PIOC->PIO_REHLSR |= PIO_PC28;
   806c2:	4b0c      	ldr	r3, [pc, #48]	; (806f4 <Pin_Configuration+0x2a8>)
   806c4:	4a0b      	ldr	r2, [pc, #44]	; (806f4 <Pin_Configuration+0x2a8>)
   806c6:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   806ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   806ce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTC.PC28
		PIOC->PIO_IER |= PIO_PC28;
   806d2:	4b08      	ldr	r3, [pc, #32]	; (806f4 <Pin_Configuration+0x2a8>)
   806d4:	4a07      	ldr	r2, [pc, #28]	; (806f4 <Pin_Configuration+0x2a8>)
   806d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
   806d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   806dc:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOC_IRQn);
   806de:	200d      	movs	r0, #13
   806e0:	e00a      	b.n	806f8 <Pin_Configuration+0x2ac>
   806e2:	bf00      	nop
   806e4:	400e0600 	.word	0x400e0600
   806e8:	400e1000 	.word	0x400e1000
   806ec:	0008041d 	.word	0x0008041d
   806f0:	400e1400 	.word	0x400e1400
   806f4:	400e1200 	.word	0x400e1200
   806f8:	4b01      	ldr	r3, [pc, #4]	; (80700 <Pin_Configuration+0x2b4>)
   806fa:	4798      	blx	r3
			NVIC_SetPriority(PIOC_IRQn,1);
		// ----- TASK_4 Interrupt priority
		#elif defined(TASK_4)
	
		#endif
}
   806fc:	bd80      	pop	{r7, pc}
   806fe:	bf00      	nop
   80700:	0008041d 	.word	0x0008041d

00080704 <InitPWMController_MCLK>:
void signum(int x);

// *************************************************************************************************************************************

void InitPWMController_MCLK()
{
   80704:	b580      	push	{r7, lr}
   80706:	af00      	add	r7, sp, #0
	//Enable the PWM clock (36) 
	PMC->PMC_PCER1 |= _BV((ID_PWM - 32)); // PMC_PCER1 = Peripheral Clock Enable Register 1
   80708:	4b14      	ldr	r3, [pc, #80]	; (8075c <InitPWMController_MCLK+0x58>)
   8070a:	4a14      	ldr	r2, [pc, #80]	; (8075c <InitPWMController_MCLK+0x58>)
   8070c:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   80710:	f042 0210 	orr.w	r2, r2, #16
   80714:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	//Channel Prescaler - Use ClockA as configured in PWM_CLK
	//Preliminary frequency = 84000000 / 1024 = 82031 Hz
	PWM->PWM_CH_NUM[CHAN_ST].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   80718:	4b11      	ldr	r3, [pc, #68]	; (80760 <InitPWMController_MCLK+0x5c>)
   8071a:	220a      	movs	r2, #10
   8071c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[CHAN_DR].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   80720:	4b0f      	ldr	r3, [pc, #60]	; (80760 <InitPWMController_MCLK+0x5c>)
   80722:	220a      	movs	r2, #10
   80724:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	//Final frequency = 82031 / 1600 = 51 Hz
	SetPeriod(CHAN_ST, 1640);
   80728:	2004      	movs	r0, #4
   8072a:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   8072e:	4b0d      	ldr	r3, [pc, #52]	; (80764 <InitPWMController_MCLK+0x60>)
   80730:	4798      	blx	r3
	//Duty cycle = (200 / 400) * 100 = 50%
	SetDuty(CHAN_ST, 100);
   80732:	2004      	movs	r0, #4
   80734:	2164      	movs	r1, #100	; 0x64
   80736:	4b0c      	ldr	r3, [pc, #48]	; (80768 <InitPWMController_MCLK+0x64>)
   80738:	4798      	blx	r3
	
	//Final frequency = 82031 / 1600 = 51Hz
	SetPeriod(CHAN_DR, 1640);
   8073a:	2005      	movs	r0, #5
   8073c:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   80740:	4b08      	ldr	r3, [pc, #32]	; (80764 <InitPWMController_MCLK+0x60>)
   80742:	4798      	blx	r3
	//Duty cycle = (x / 800) * 100 = y%
	SetDuty(CHAN_DR, 100);
   80744:	2005      	movs	r0, #5
   80746:	2164      	movs	r1, #100	; 0x64
   80748:	4b07      	ldr	r3, [pc, #28]	; (80768 <InitPWMController_MCLK+0x64>)
   8074a:	4798      	blx	r3
	
	PWM->PWM_ENA = _BV(CHAN_DR); // PWM_ENA = PWM Enable Register
   8074c:	4b04      	ldr	r3, [pc, #16]	; (80760 <InitPWMController_MCLK+0x5c>)
   8074e:	2220      	movs	r2, #32
   80750:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA = _BV(CHAN_ST); // PWM_ENA = PWM Enable Register
   80752:	4b03      	ldr	r3, [pc, #12]	; (80760 <InitPWMController_MCLK+0x5c>)
   80754:	2210      	movs	r2, #16
   80756:	605a      	str	r2, [r3, #4]
}
   80758:	bd80      	pop	{r7, pc}
   8075a:	bf00      	nop
   8075c:	400e0600 	.word	0x400e0600
   80760:	40094000 	.word	0x40094000
   80764:	0008076d 	.word	0x0008076d
   80768:	000807b9 	.word	0x000807b9

0008076c <SetPeriod>:

static void SetPeriod(uint32_t chan, int period)
{
   8076c:	b480      	push	{r7}
   8076e:	b083      	sub	sp, #12
   80770:	af00      	add	r7, sp, #0
   80772:	6078      	str	r0, [r7, #4]
   80774:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   80776:	4b0f      	ldr	r3, [pc, #60]	; (807b4 <SetPeriod+0x48>)
   80778:	68da      	ldr	r2, [r3, #12]
   8077a:	687b      	ldr	r3, [r7, #4]
   8077c:	2101      	movs	r1, #1
   8077e:	fa01 f303 	lsl.w	r3, r1, r3
   80782:	4013      	ands	r3, r2
   80784:	2b00      	cmp	r3, #0
   80786:	d108      	bne.n	8079a <SetPeriod+0x2e>
		PWM->PWM_CH_NUM[chan].PWM_CPRD = period; // PWM_CPRD = PWM Channel Period Register
   80788:	490a      	ldr	r1, [pc, #40]	; (807b4 <SetPeriod+0x48>)
   8078a:	683a      	ldr	r2, [r7, #0]
   8078c:	687b      	ldr	r3, [r7, #4]
   8078e:	015b      	lsls	r3, r3, #5
   80790:	440b      	add	r3, r1
   80792:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80796:	605a      	str	r2, [r3, #4]
   80798:	e007      	b.n	807aa <SetPeriod+0x3e>
	else
		PWM->PWM_CH_NUM[chan].PWM_CPRDUPD = period; // PWM_CPRDUPD = PWM Channel Period Update Register
   8079a:	4906      	ldr	r1, [pc, #24]	; (807b4 <SetPeriod+0x48>)
   8079c:	683a      	ldr	r2, [r7, #0]
   8079e:	687b      	ldr	r3, [r7, #4]
   807a0:	015b      	lsls	r3, r3, #5
   807a2:	440b      	add	r3, r1
   807a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
   807a8:	601a      	str	r2, [r3, #0]
}
   807aa:	370c      	adds	r7, #12
   807ac:	46bd      	mov	sp, r7
   807ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   807b2:	4770      	bx	lr
   807b4:	40094000 	.word	0x40094000

000807b8 <SetDuty>:

static void SetDuty(uint32_t chan, int duty)
{
   807b8:	b480      	push	{r7}
   807ba:	b083      	sub	sp, #12
   807bc:	af00      	add	r7, sp, #0
   807be:	6078      	str	r0, [r7, #4]
   807c0:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   807c2:	4b0f      	ldr	r3, [pc, #60]	; (80800 <SetDuty+0x48>)
   807c4:	68da      	ldr	r2, [r3, #12]
   807c6:	687b      	ldr	r3, [r7, #4]
   807c8:	2101      	movs	r1, #1
   807ca:	fa01 f303 	lsl.w	r3, r1, r3
   807ce:	4013      	ands	r3, r2
   807d0:	2b00      	cmp	r3, #0
   807d2:	d107      	bne.n	807e4 <SetDuty+0x2c>
		PWM->PWM_CH_NUM[chan].PWM_CDTY = duty;
   807d4:	490a      	ldr	r1, [pc, #40]	; (80800 <SetDuty+0x48>)
   807d6:	683a      	ldr	r2, [r7, #0]
   807d8:	687b      	ldr	r3, [r7, #4]
   807da:	3310      	adds	r3, #16
   807dc:	015b      	lsls	r3, r3, #5
   807de:	440b      	add	r3, r1
   807e0:	605a      	str	r2, [r3, #4]
   807e2:	e007      	b.n	807f4 <SetDuty+0x3c>
	else
		PWM->PWM_CH_NUM[chan].PWM_CDTYUPD = duty;
   807e4:	4906      	ldr	r1, [pc, #24]	; (80800 <SetDuty+0x48>)
   807e6:	683a      	ldr	r2, [r7, #0]
   807e8:	687b      	ldr	r3, [r7, #4]
   807ea:	015b      	lsls	r3, r3, #5
   807ec:	440b      	add	r3, r1
   807ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
   807f2:	601a      	str	r2, [r3, #0]
}
   807f4:	370c      	adds	r7, #12
   807f6:	46bd      	mov	sp, r7
   807f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   807fc:	4770      	bx	lr
   807fe:	bf00      	nop
   80800:	40094000 	.word	0x40094000
   80804:	00000000 	.word	0x00000000

00080808 <WriteMotors>:

void WriteMotors(int percent_ST, int percent_DR)
{
   80808:	b590      	push	{r4, r7, lr}
   8080a:	b083      	sub	sp, #12
   8080c:	af00      	add	r7, sp, #0
   8080e:	6078      	str	r0, [r7, #4]
   80810:	6039      	str	r1, [r7, #0]
	SetDuty(CHAN_ST,123+(percent_ST/2.43)); // PWM motor stanga
   80812:	4b25      	ldr	r3, [pc, #148]	; (808a8 <WriteMotors+0xa0>)
   80814:	6878      	ldr	r0, [r7, #4]
   80816:	4798      	blx	r3
   80818:	4602      	mov	r2, r0
   8081a:	460b      	mov	r3, r1
   8081c:	4c23      	ldr	r4, [pc, #140]	; (808ac <WriteMotors+0xa4>)
   8081e:	4610      	mov	r0, r2
   80820:	4619      	mov	r1, r3
   80822:	a31d      	add	r3, pc, #116	; (adr r3, 80898 <WriteMotors+0x90>)
   80824:	e9d3 2300 	ldrd	r2, r3, [r3]
   80828:	47a0      	blx	r4
   8082a:	4602      	mov	r2, r0
   8082c:	460b      	mov	r3, r1
   8082e:	4c20      	ldr	r4, [pc, #128]	; (808b0 <WriteMotors+0xa8>)
   80830:	4610      	mov	r0, r2
   80832:	4619      	mov	r1, r3
   80834:	a31a      	add	r3, pc, #104	; (adr r3, 808a0 <WriteMotors+0x98>)
   80836:	e9d3 2300 	ldrd	r2, r3, [r3]
   8083a:	47a0      	blx	r4
   8083c:	4602      	mov	r2, r0
   8083e:	460b      	mov	r3, r1
   80840:	4c1c      	ldr	r4, [pc, #112]	; (808b4 <WriteMotors+0xac>)
   80842:	4610      	mov	r0, r2
   80844:	4619      	mov	r1, r3
   80846:	47a0      	blx	r4
   80848:	4603      	mov	r3, r0
   8084a:	2004      	movs	r0, #4
   8084c:	4619      	mov	r1, r3
   8084e:	4b1a      	ldr	r3, [pc, #104]	; (808b8 <WriteMotors+0xb0>)
   80850:	4798      	blx	r3
	SetDuty(CHAN_DR,123-(percent_DR/2.43)); // PWM motor dreapta
   80852:	4b15      	ldr	r3, [pc, #84]	; (808a8 <WriteMotors+0xa0>)
   80854:	6838      	ldr	r0, [r7, #0]
   80856:	4798      	blx	r3
   80858:	4602      	mov	r2, r0
   8085a:	460b      	mov	r3, r1
   8085c:	4c13      	ldr	r4, [pc, #76]	; (808ac <WriteMotors+0xa4>)
   8085e:	4610      	mov	r0, r2
   80860:	4619      	mov	r1, r3
   80862:	a30d      	add	r3, pc, #52	; (adr r3, 80898 <WriteMotors+0x90>)
   80864:	e9d3 2300 	ldrd	r2, r3, [r3]
   80868:	47a0      	blx	r4
   8086a:	4602      	mov	r2, r0
   8086c:	460b      	mov	r3, r1
   8086e:	4c13      	ldr	r4, [pc, #76]	; (808bc <WriteMotors+0xb4>)
   80870:	a10b      	add	r1, pc, #44	; (adr r1, 808a0 <WriteMotors+0x98>)
   80872:	e9d1 0100 	ldrd	r0, r1, [r1]
   80876:	47a0      	blx	r4
   80878:	4602      	mov	r2, r0
   8087a:	460b      	mov	r3, r1
   8087c:	4c0d      	ldr	r4, [pc, #52]	; (808b4 <WriteMotors+0xac>)
   8087e:	4610      	mov	r0, r2
   80880:	4619      	mov	r1, r3
   80882:	47a0      	blx	r4
   80884:	4603      	mov	r3, r0
   80886:	2005      	movs	r0, #5
   80888:	4619      	mov	r1, r3
   8088a:	4b0b      	ldr	r3, [pc, #44]	; (808b8 <WriteMotors+0xb0>)
   8088c:	4798      	blx	r3
}
   8088e:	370c      	adds	r7, #12
   80890:	46bd      	mov	sp, r7
   80892:	bd90      	pop	{r4, r7, pc}
   80894:	f3af 8000 	nop.w
   80898:	d70a3d71 	.word	0xd70a3d71
   8089c:	400370a3 	.word	0x400370a3
   808a0:	00000000 	.word	0x00000000
   808a4:	405ec000 	.word	0x405ec000
   808a8:	000810d1 	.word	0x000810d1
   808ac:	000813f1 	.word	0x000813f1
   808b0:	00080e39 	.word	0x00080e39
   808b4:	000815c1 	.word	0x000815c1
   808b8:	000807b9 	.word	0x000807b9
   808bc:	00080e35 	.word	0x00080e35

000808c0 <InitMotors>:

void InitMotors()
{
   808c0:	b580      	push	{r7, lr}
   808c2:	af00      	add	r7, sp, #0
	WriteMotors(0,0);
   808c4:	2000      	movs	r0, #0
   808c6:	2100      	movs	r1, #0
   808c8:	4b18      	ldr	r3, [pc, #96]	; (8092c <InitMotors+0x6c>)
   808ca:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23; 
   808cc:	4b18      	ldr	r3, [pc, #96]	; (80930 <InitMotors+0x70>)
   808ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   808d2:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   808d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   808d8:	4b16      	ldr	r3, [pc, #88]	; (80934 <InitMotors+0x74>)
   808da:	4798      	blx	r3
	
	WriteMotors(100,100);//Stop Motors; Percent_RIGHT|Percent_LEFT
   808dc:	2064      	movs	r0, #100	; 0x64
   808de:	2164      	movs	r1, #100	; 0x64
   808e0:	4b12      	ldr	r3, [pc, #72]	; (8092c <InitMotors+0x6c>)
   808e2:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   808e4:	4b12      	ldr	r3, [pc, #72]	; (80930 <InitMotors+0x70>)
   808e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   808ea:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(1000);
   808ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   808f0:	4b10      	ldr	r3, [pc, #64]	; (80934 <InitMotors+0x74>)
   808f2:	4798      	blx	r3
	
	WriteMotors(-100,-100);
   808f4:	f06f 0063 	mvn.w	r0, #99	; 0x63
   808f8:	f06f 0163 	mvn.w	r1, #99	; 0x63
   808fc:	4b0b      	ldr	r3, [pc, #44]	; (8092c <InitMotors+0x6c>)
   808fe:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23;
   80900:	4b0b      	ldr	r3, [pc, #44]	; (80930 <InitMotors+0x70>)
   80902:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80906:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   80908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8090c:	4b09      	ldr	r3, [pc, #36]	; (80934 <InitMotors+0x74>)
   8090e:	4798      	blx	r3
	
	WriteMotors(0,0);//Stop Motors; Percent_RIGHT|Percent_LEFT
   80910:	2000      	movs	r0, #0
   80912:	2100      	movs	r1, #0
   80914:	4b05      	ldr	r3, [pc, #20]	; (8092c <InitMotors+0x6c>)
   80916:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   80918:	4b05      	ldr	r3, [pc, #20]	; (80930 <InitMotors+0x70>)
   8091a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8091e:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(3000);
   80920:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80924:	4b03      	ldr	r3, [pc, #12]	; (80934 <InitMotors+0x74>)
   80926:	4798      	blx	r3
}  
   80928:	bd80      	pop	{r7, pc}
   8092a:	bf00      	nop
   8092c:	00080809 	.word	0x00080809
   80930:	400e1200 	.word	0x400e1200
   80934:	00080aa9 	.word	0x00080aa9

00080938 <ControlledDrive>:
	WriteMotors(iSpeed_ST,iSpeed_DR);
}

// 255 impulsuri ~ 60 cm 
// 
void ControlledDrive(uint8_t percent_ST, uint8_t percent_DR){
   80938:	b580      	push	{r7, lr}
   8093a:	b084      	sub	sp, #16
   8093c:	af00      	add	r7, sp, #0
   8093e:	4602      	mov	r2, r0
   80940:	460b      	mov	r3, r1
   80942:	71fa      	strb	r2, [r7, #7]
   80944:	71bb      	strb	r3, [r7, #6]
	if(sign_ST==1){
   80946:	4b25      	ldr	r3, [pc, #148]	; (809dc <ControlledDrive+0xa4>)
   80948:	781b      	ldrb	r3, [r3, #0]
   8094a:	b2db      	uxtb	r3, r3
   8094c:	2b01      	cmp	r3, #1
   8094e:	d104      	bne.n	8095a <ControlledDrive+0x22>
		iSpeed_ST=-70;
   80950:	4b23      	ldr	r3, [pc, #140]	; (809e0 <ControlledDrive+0xa8>)
   80952:	f06f 0245 	mvn.w	r2, #69	; 0x45
   80956:	601a      	str	r2, [r3, #0]
   80958:	e002      	b.n	80960 <ControlledDrive+0x28>
	}else{
		iSpeed_ST=BASE_SPEED;
   8095a:	4b21      	ldr	r3, [pc, #132]	; (809e0 <ControlledDrive+0xa8>)
   8095c:	2246      	movs	r2, #70	; 0x46
   8095e:	601a      	str	r2, [r3, #0]
	}
	
	if(sign_DR==1){
   80960:	4b20      	ldr	r3, [pc, #128]	; (809e4 <ControlledDrive+0xac>)
   80962:	781b      	ldrb	r3, [r3, #0]
   80964:	b2db      	uxtb	r3, r3
   80966:	2b01      	cmp	r3, #1
   80968:	d104      	bne.n	80974 <ControlledDrive+0x3c>
		iSpeed_DR=-70;
   8096a:	4b1f      	ldr	r3, [pc, #124]	; (809e8 <ControlledDrive+0xb0>)
   8096c:	f06f 0245 	mvn.w	r2, #69	; 0x45
   80970:	601a      	str	r2, [r3, #0]
   80972:	e002      	b.n	8097a <ControlledDrive+0x42>
	}else{
		iSpeed_DR=BASE_SPEED;
   80974:	4b1c      	ldr	r3, [pc, #112]	; (809e8 <ControlledDrive+0xb0>)
   80976:	2246      	movs	r2, #70	; 0x46
   80978:	601a      	str	r2, [r3, #0]
	}
	
	uint8_t st = 0;
   8097a:	2300      	movs	r3, #0
   8097c:	73fb      	strb	r3, [r7, #15]
	uint8_t dr = 0;
   8097e:	2300      	movs	r3, #0
   80980:	73bb      	strb	r3, [r7, #14]
	
	iEncoder_ST_current = 0;
   80982:	4b1a      	ldr	r3, [pc, #104]	; (809ec <ControlledDrive+0xb4>)
   80984:	2200      	movs	r2, #0
   80986:	601a      	str	r2, [r3, #0]
	iEncoder_DR_current = 0;
   80988:	4b19      	ldr	r3, [pc, #100]	; (809f0 <ControlledDrive+0xb8>)
   8098a:	2200      	movs	r2, #0
   8098c:	601a      	str	r2, [r3, #0]
	
	//iSpeed_ST=-70;
	//iSpeed_DR=-70;
	
	while((st<1)||(dr<1)){
   8098e:	e01b      	b.n	809c8 <ControlledDrive+0x90>
		if(iEncoder_DR_current >= percent_DR){
   80990:	79ba      	ldrb	r2, [r7, #6]
   80992:	4b17      	ldr	r3, [pc, #92]	; (809f0 <ControlledDrive+0xb8>)
   80994:	681b      	ldr	r3, [r3, #0]
   80996:	429a      	cmp	r2, r3
   80998:	d804      	bhi.n	809a4 <ControlledDrive+0x6c>
			iSpeed_DR = 0;
   8099a:	4b13      	ldr	r3, [pc, #76]	; (809e8 <ControlledDrive+0xb0>)
   8099c:	2200      	movs	r2, #0
   8099e:	601a      	str	r2, [r3, #0]
			st=1;
   809a0:	2301      	movs	r3, #1
   809a2:	73fb      	strb	r3, [r7, #15]
		}
		if(iEncoder_ST_current >= percent_ST){
   809a4:	79fa      	ldrb	r2, [r7, #7]
   809a6:	4b11      	ldr	r3, [pc, #68]	; (809ec <ControlledDrive+0xb4>)
   809a8:	681b      	ldr	r3, [r3, #0]
   809aa:	429a      	cmp	r2, r3
   809ac:	d804      	bhi.n	809b8 <ControlledDrive+0x80>
			iSpeed_ST = 0;
   809ae:	4b0c      	ldr	r3, [pc, #48]	; (809e0 <ControlledDrive+0xa8>)
   809b0:	2200      	movs	r2, #0
   809b2:	601a      	str	r2, [r3, #0]
			dr=1;
   809b4:	2301      	movs	r3, #1
   809b6:	73bb      	strb	r3, [r7, #14]
		}
		WriteMotors(iSpeed_ST,iSpeed_DR);
   809b8:	4b09      	ldr	r3, [pc, #36]	; (809e0 <ControlledDrive+0xa8>)
   809ba:	681a      	ldr	r2, [r3, #0]
   809bc:	4b0a      	ldr	r3, [pc, #40]	; (809e8 <ControlledDrive+0xb0>)
   809be:	681b      	ldr	r3, [r3, #0]
   809c0:	4610      	mov	r0, r2
   809c2:	4619      	mov	r1, r3
   809c4:	4b0b      	ldr	r3, [pc, #44]	; (809f4 <ControlledDrive+0xbc>)
   809c6:	4798      	blx	r3
	iEncoder_DR_current = 0;
	
	//iSpeed_ST=-70;
	//iSpeed_DR=-70;
	
	while((st<1)||(dr<1)){
   809c8:	7bfb      	ldrb	r3, [r7, #15]
   809ca:	2b00      	cmp	r3, #0
   809cc:	d0e0      	beq.n	80990 <ControlledDrive+0x58>
   809ce:	7bbb      	ldrb	r3, [r7, #14]
   809d0:	2b00      	cmp	r3, #0
   809d2:	d0dd      	beq.n	80990 <ControlledDrive+0x58>
		}
		WriteMotors(iSpeed_ST,iSpeed_DR);
	}
	
	
}
   809d4:	3710      	adds	r7, #16
   809d6:	46bd      	mov	sp, r7
   809d8:	bd80      	pop	{r7, pc}
   809da:	bf00      	nop
   809dc:	20000492 	.word	0x20000492
   809e0:	2000046c 	.word	0x2000046c
   809e4:	20000491 	.word	0x20000491
   809e8:	20000468 	.word	0x20000468
   809ec:	20000464 	.word	0x20000464
   809f0:	20000460 	.word	0x20000460
   809f4:	00080809 	.word	0x00080809

000809f8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   809f8:	b480      	push	{r7}
   809fa:	b083      	sub	sp, #12
   809fc:	af00      	add	r7, sp, #0
   809fe:	4603      	mov	r3, r0
   80a00:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80a02:	4b08      	ldr	r3, [pc, #32]	; (80a24 <NVIC_EnableIRQ+0x2c>)
   80a04:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80a08:	0952      	lsrs	r2, r2, #5
   80a0a:	79f9      	ldrb	r1, [r7, #7]
   80a0c:	f001 011f 	and.w	r1, r1, #31
   80a10:	2001      	movs	r0, #1
   80a12:	fa00 f101 	lsl.w	r1, r0, r1
   80a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80a1a:	370c      	adds	r7, #12
   80a1c:	46bd      	mov	sp, r7
   80a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a22:	4770      	bx	lr
   80a24:	e000e100 	.word	0xe000e100

00080a28 <Configure_Timers>:
void Configure_TC0(void);
void delay_ms(uint32_t iPrescription);

// *************************************************************************************************************************************

void Configure_Timers(){
   80a28:	b580      	push	{r7, lr}
   80a2a:	af00      	add	r7, sp, #0
	Configure_TC0();
   80a2c:	4b01      	ldr	r3, [pc, #4]	; (80a34 <Configure_Timers+0xc>)
   80a2e:	4798      	blx	r3
}
   80a30:	bd80      	pop	{r7, pc}
   80a32:	bf00      	nop
   80a34:	00080a39 	.word	0x00080a39

00080a38 <Configure_TC0>:

void Configure_TC0()
{
   80a38:	b580      	push	{r7, lr}
   80a3a:	af00      	add	r7, sp, #0
	// Enable TC0 in PMC power management controller - ID 27
	PMC->PMC_PCER0 |= 1 << ID_TC0;
   80a3c:	4b0e      	ldr	r3, [pc, #56]	; (80a78 <Configure_TC0+0x40>)
   80a3e:	4a0e      	ldr	r2, [pc, #56]	; (80a78 <Configure_TC0+0x40>)
   80a40:	6912      	ldr	r2, [r2, #16]
   80a42:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80a46:	611a      	str	r2, [r3, #16]
	
	// Disable the clock for TC0
	TC0->TC_CHANNEL->TC_CCR = TC_CCR_CLKDIS;
   80a48:	4b0c      	ldr	r3, [pc, #48]	; (80a7c <Configure_TC0+0x44>)
   80a4a:	2202      	movs	r2, #2
   80a4c:	601a      	str	r2, [r3, #0]
	
	// Disable interrupts
	TC0->TC_CHANNEL->TC_IDR = 0xFFFFFFFF;
   80a4e:	4b0b      	ldr	r3, [pc, #44]	; (80a7c <Configure_TC0+0x44>)
   80a50:	f04f 32ff 	mov.w	r2, #4294967295
   80a54:	629a      	str	r2, [r3, #40]	; 0x28
	
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80a56:	4b09      	ldr	r3, [pc, #36]	; (80a7c <Configure_TC0+0x44>)
   80a58:	6a1b      	ldr	r3, [r3, #32]
	
	// Set Mode
	TC0->TC_CHANNEL->TC_CMR = TC_CMR_CPCTRG | TC_CMR_TCCLKS_TIMER_CLOCK5;
   80a5a:	4b08      	ldr	r3, [pc, #32]	; (80a7c <Configure_TC0+0x44>)
   80a5c:	f244 0204 	movw	r2, #16388	; 0x4004
   80a60:	605a      	str	r2, [r3, #4]
	
	// Set compare value register TC_CR
	TC0->TC_CHANNEL[0].TC_RC = 10000;
   80a62:	4b06      	ldr	r3, [pc, #24]	; (80a7c <Configure_TC0+0x44>)
   80a64:	f242 7210 	movw	r2, #10000	; 0x2710
   80a68:	61da      	str	r2, [r3, #28]
	
	// Configure and enable interrupt on RC compare
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
   80a6a:	201b      	movs	r0, #27
   80a6c:	4b04      	ldr	r3, [pc, #16]	; (80a80 <Configure_TC0+0x48>)
   80a6e:	4798      	blx	r3
	TC0->TC_CHANNEL->TC_IER = TC_IER_CPCS;
   80a70:	4b02      	ldr	r3, [pc, #8]	; (80a7c <Configure_TC0+0x44>)
   80a72:	2210      	movs	r2, #16
   80a74:	625a      	str	r2, [r3, #36]	; 0x24
	
	// Enable interrupts
	//TC0->TC_CHANNEL->TC_IER = 0xFFFFFFFF;
}
   80a76:	bd80      	pop	{r7, pc}
   80a78:	400e0600 	.word	0x400e0600
   80a7c:	40080000 	.word	0x40080000
   80a80:	000809f9 	.word	0x000809f9

00080a84 <TC0_Handler>:

void TC0_Handler(void)
{
   80a84:	b480      	push	{r7}
   80a86:	af00      	add	r7, sp, #0
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80a88:	4b05      	ldr	r3, [pc, #20]	; (80aa0 <TC0_Handler+0x1c>)
   80a8a:	6a1b      	ldr	r3, [r3, #32]
	
	// Disable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;
   80a8c:	4b04      	ldr	r3, [pc, #16]	; (80aa0 <TC0_Handler+0x1c>)
   80a8e:	2202      	movs	r2, #2
   80a90:	601a      	str	r2, [r3, #0]
	
	iDelay = 1;
   80a92:	4b04      	ldr	r3, [pc, #16]	; (80aa4 <TC0_Handler+0x20>)
   80a94:	2201      	movs	r2, #1
   80a96:	701a      	strb	r2, [r3, #0]
}
   80a98:	46bd      	mov	sp, r7
   80a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a9e:	4770      	bx	lr
   80aa0:	40080000 	.word	0x40080000
   80aa4:	20000455 	.word	0x20000455

00080aa8 <delay_ms>:

void delay_ms(uint32_t iPrescription)
{
   80aa8:	b480      	push	{r7}
   80aaa:	b083      	sub	sp, #12
   80aac:	af00      	add	r7, sp, #0
   80aae:	6078      	str	r0, [r7, #4]
	// Set compare value for TC0
	TC0->TC_CHANNEL[0].TC_RC = iPrescription*29;
   80ab0:	490b      	ldr	r1, [pc, #44]	; (80ae0 <delay_ms+0x38>)
   80ab2:	687a      	ldr	r2, [r7, #4]
   80ab4:	4613      	mov	r3, r2
   80ab6:	00db      	lsls	r3, r3, #3
   80ab8:	1a9b      	subs	r3, r3, r2
   80aba:	009b      	lsls	r3, r3, #2
   80abc:	4413      	add	r3, r2
   80abe:	61cb      	str	r3, [r1, #28]
	
	// Reset and enable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN|TC_CCR_SWTRG;
   80ac0:	4b07      	ldr	r3, [pc, #28]	; (80ae0 <delay_ms+0x38>)
   80ac2:	2205      	movs	r2, #5
   80ac4:	601a      	str	r2, [r3, #0]
	
	while(!iDelay);
   80ac6:	bf00      	nop
   80ac8:	4b06      	ldr	r3, [pc, #24]	; (80ae4 <delay_ms+0x3c>)
   80aca:	781b      	ldrb	r3, [r3, #0]
   80acc:	2b00      	cmp	r3, #0
   80ace:	d0fb      	beq.n	80ac8 <delay_ms+0x20>
	
	iDelay = 0;
   80ad0:	4b04      	ldr	r3, [pc, #16]	; (80ae4 <delay_ms+0x3c>)
   80ad2:	2200      	movs	r2, #0
   80ad4:	701a      	strb	r2, [r3, #0]
   80ad6:	370c      	adds	r7, #12
   80ad8:	46bd      	mov	sp, r7
   80ada:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ade:	4770      	bx	lr
   80ae0:	40080000 	.word	0x40080000
   80ae4:	20000455 	.word	0x20000455

00080ae8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80ae8:	b480      	push	{r7}
   80aea:	b083      	sub	sp, #12
   80aec:	af00      	add	r7, sp, #0
   80aee:	4603      	mov	r3, r0
   80af0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80af2:	4b08      	ldr	r3, [pc, #32]	; (80b14 <NVIC_EnableIRQ+0x2c>)
   80af4:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80af8:	0952      	lsrs	r2, r2, #5
   80afa:	79f9      	ldrb	r1, [r7, #7]
   80afc:	f001 011f 	and.w	r1, r1, #31
   80b00:	2001      	movs	r0, #1
   80b02:	fa00 f101 	lsl.w	r1, r0, r1
   80b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80b0a:	370c      	adds	r7, #12
   80b0c:	46bd      	mov	sp, r7
   80b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b12:	4770      	bx	lr
   80b14:	e000e100 	.word	0xe000e100

00080b18 <uart_getchar>:
int signum(int x);

// *************************************************************************************************************************************

inline int uart_getchar(uint8_t *c)
{
   80b18:	b480      	push	{r7}
   80b1a:	b083      	sub	sp, #12
   80b1c:	af00      	add	r7, sp, #0
   80b1e:	6078      	str	r0, [r7, #4]
	// Check if the receiver is ready
	if((UART->UART_SR & UART_SR_RXRDY) == 0)
   80b20:	4b09      	ldr	r3, [pc, #36]	; (80b48 <uart_getchar+0x30>)
   80b22:	695b      	ldr	r3, [r3, #20]
   80b24:	f003 0301 	and.w	r3, r3, #1
   80b28:	2b00      	cmp	r3, #0
   80b2a:	d101      	bne.n	80b30 <uart_getchar+0x18>
	return 1;
   80b2c:	2301      	movs	r3, #1
   80b2e:	e005      	b.n	80b3c <uart_getchar+0x24>
	
	// Read the character
	*c = (uint8_t) UART->UART_RHR;
   80b30:	4b05      	ldr	r3, [pc, #20]	; (80b48 <uart_getchar+0x30>)
   80b32:	699b      	ldr	r3, [r3, #24]
   80b34:	b2da      	uxtb	r2, r3
   80b36:	687b      	ldr	r3, [r7, #4]
   80b38:	701a      	strb	r2, [r3, #0]
	return 0;
   80b3a:	2300      	movs	r3, #0
}
   80b3c:	4618      	mov	r0, r3
   80b3e:	370c      	adds	r7, #12
   80b40:	46bd      	mov	sp, r7
   80b42:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b46:	4770      	bx	lr
   80b48:	400e0800 	.word	0x400e0800

00080b4c <uart_putchar>:

inline int uart_putchar(const uint8_t c)
{
   80b4c:	b480      	push	{r7}
   80b4e:	b083      	sub	sp, #12
   80b50:	af00      	add	r7, sp, #0
   80b52:	4603      	mov	r3, r0
   80b54:	71fb      	strb	r3, [r7, #7]
	// Check if the transmitter is ready
	if(!(UART->UART_SR & UART_SR_TXRDY))
   80b56:	4b09      	ldr	r3, [pc, #36]	; (80b7c <uart_putchar+0x30>)
   80b58:	695b      	ldr	r3, [r3, #20]
   80b5a:	f003 0302 	and.w	r3, r3, #2
   80b5e:	2b00      	cmp	r3, #0
   80b60:	d101      	bne.n	80b66 <uart_putchar+0x1a>
	return 1;
   80b62:	2301      	movs	r3, #1
   80b64:	e003      	b.n	80b6e <uart_putchar+0x22>
	
	// Send the character
	UART->UART_THR = c;
   80b66:	4b05      	ldr	r3, [pc, #20]	; (80b7c <uart_putchar+0x30>)
   80b68:	79fa      	ldrb	r2, [r7, #7]
   80b6a:	61da      	str	r2, [r3, #28]
	return 0;
   80b6c:	2300      	movs	r3, #0
}
   80b6e:	4618      	mov	r0, r3
   80b70:	370c      	adds	r7, #12
   80b72:	46bd      	mov	sp, r7
   80b74:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b78:	4770      	bx	lr
   80b7a:	bf00      	nop
   80b7c:	400e0800 	.word	0x400e0800

00080b80 <UART_Handler>:

void UART_Handler(void)
{
   80b80:	b580      	push	{r7, lr}
   80b82:	b082      	sub	sp, #8
   80b84:	af00      	add	r7, sp, #0
	uint8_t c = 0;
   80b86:	2300      	movs	r3, #0
   80b88:	71fb      	strb	r3, [r7, #7]
	
	// Check if the interrupt source is receive ready
	if((UART->UART_IMR & UART_IMR_RXRDY) && (!flag12))
   80b8a:	4b19      	ldr	r3, [pc, #100]	; (80bf0 <UART_Handler+0x70>)
   80b8c:	691b      	ldr	r3, [r3, #16]
   80b8e:	f003 0301 	and.w	r3, r3, #1
   80b92:	2b00      	cmp	r3, #0
   80b94:	d028      	beq.n	80be8 <UART_Handler+0x68>
   80b96:	4b17      	ldr	r3, [pc, #92]	; (80bf4 <UART_Handler+0x74>)
   80b98:	781b      	ldrb	r3, [r3, #0]
   80b9a:	b2db      	uxtb	r3, r3
   80b9c:	2b00      	cmp	r3, #0
   80b9e:	d123      	bne.n	80be8 <UART_Handler+0x68>
	{
		if(!uart_getchar(&c)){
   80ba0:	1dfb      	adds	r3, r7, #7
   80ba2:	4618      	mov	r0, r3
   80ba4:	4b14      	ldr	r3, [pc, #80]	; (80bf8 <UART_Handler+0x78>)
   80ba6:	4798      	blx	r3
   80ba8:	4603      	mov	r3, r0
   80baa:	2b00      	cmp	r3, #0
   80bac:	d107      	bne.n	80bbe <UART_Handler+0x3e>
			buffer[i++] = c;
   80bae:	4b13      	ldr	r3, [pc, #76]	; (80bfc <UART_Handler+0x7c>)
   80bb0:	681b      	ldr	r3, [r3, #0]
   80bb2:	1c59      	adds	r1, r3, #1
   80bb4:	4a11      	ldr	r2, [pc, #68]	; (80bfc <UART_Handler+0x7c>)
   80bb6:	6011      	str	r1, [r2, #0]
   80bb8:	79f9      	ldrb	r1, [r7, #7]
   80bba:	4a11      	ldr	r2, [pc, #68]	; (80c00 <UART_Handler+0x80>)
   80bbc:	54d1      	strb	r1, [r2, r3]
		}
		if(c=='\n'){
   80bbe:	79fb      	ldrb	r3, [r7, #7]
   80bc0:	2b0a      	cmp	r3, #10
   80bc2:	d111      	bne.n	80be8 <UART_Handler+0x68>
			sendString(buffer, i); // make an echo of the whole buffer untill now
   80bc4:	4b0d      	ldr	r3, [pc, #52]	; (80bfc <UART_Handler+0x7c>)
   80bc6:	681b      	ldr	r3, [r3, #0]
   80bc8:	b29b      	uxth	r3, r3
   80bca:	480d      	ldr	r0, [pc, #52]	; (80c00 <UART_Handler+0x80>)
   80bcc:	4619      	mov	r1, r3
   80bce:	4b0d      	ldr	r3, [pc, #52]	; (80c04 <UART_Handler+0x84>)
   80bd0:	4798      	blx	r3
			parseSpeed(buffer);
   80bd2:	480b      	ldr	r0, [pc, #44]	; (80c00 <UART_Handler+0x80>)
   80bd4:	4b0c      	ldr	r3, [pc, #48]	; (80c08 <UART_Handler+0x88>)
   80bd6:	4798      	blx	r3
			memset(buffer, 0, sizeof(buffer));
   80bd8:	4809      	ldr	r0, [pc, #36]	; (80c00 <UART_Handler+0x80>)
   80bda:	2100      	movs	r1, #0
   80bdc:	2214      	movs	r2, #20
   80bde:	4b0b      	ldr	r3, [pc, #44]	; (80c0c <UART_Handler+0x8c>)
   80be0:	4798      	blx	r3
			i = 0;
   80be2:	4b06      	ldr	r3, [pc, #24]	; (80bfc <UART_Handler+0x7c>)
   80be4:	2200      	movs	r2, #0
   80be6:	601a      	str	r2, [r3, #0]
		}
	}
}
   80be8:	3708      	adds	r7, #8
   80bea:	46bd      	mov	sp, r7
   80bec:	bd80      	pop	{r7, pc}
   80bee:	bf00      	nop
   80bf0:	400e0800 	.word	0x400e0800
   80bf4:	20000454 	.word	0x20000454
   80bf8:	00080b19 	.word	0x00080b19
   80bfc:	20000458 	.word	0x20000458
   80c00:	2000047c 	.word	0x2000047c
   80c04:	00080c11 	.word	0x00080c11
   80c08:	00080c75 	.word	0x00080c75
   80c0c:	00081661 	.word	0x00081661

00080c10 <sendString>:

void sendString(const char* c, uint16_t length){
   80c10:	b580      	push	{r7, lr}
   80c12:	b084      	sub	sp, #16
   80c14:	af00      	add	r7, sp, #0
   80c16:	6078      	str	r0, [r7, #4]
   80c18:	460b      	mov	r3, r1
   80c1a:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<length;i++){
   80c1c:	2300      	movs	r3, #0
   80c1e:	60fb      	str	r3, [r7, #12]
   80c20:	e00d      	b.n	80c3e <sendString+0x2e>
		while(uart_putchar(*(c+i)));
   80c22:	bf00      	nop
   80c24:	68fb      	ldr	r3, [r7, #12]
   80c26:	687a      	ldr	r2, [r7, #4]
   80c28:	4413      	add	r3, r2
   80c2a:	781b      	ldrb	r3, [r3, #0]
   80c2c:	4618      	mov	r0, r3
   80c2e:	4b07      	ldr	r3, [pc, #28]	; (80c4c <sendString+0x3c>)
   80c30:	4798      	blx	r3
   80c32:	4603      	mov	r3, r0
   80c34:	2b00      	cmp	r3, #0
   80c36:	d1f5      	bne.n	80c24 <sendString+0x14>
		}
	}
}

void sendString(const char* c, uint16_t length){
	for(int i = 0;i<length;i++){
   80c38:	68fb      	ldr	r3, [r7, #12]
   80c3a:	3301      	adds	r3, #1
   80c3c:	60fb      	str	r3, [r7, #12]
   80c3e:	887a      	ldrh	r2, [r7, #2]
   80c40:	68fb      	ldr	r3, [r7, #12]
   80c42:	429a      	cmp	r2, r3
   80c44:	dced      	bgt.n	80c22 <sendString+0x12>
		while(uart_putchar(*(c+i)));
	}
}
   80c46:	3710      	adds	r7, #16
   80c48:	46bd      	mov	sp, r7
   80c4a:	bd80      	pop	{r7, pc}
   80c4c:	00080b4d 	.word	0x00080b4d

00080c50 <getNewSpeed>:
		i--;
	}
}

uint8_t getNewSpeed()
{
   80c50:	b480      	push	{r7}
   80c52:	af00      	add	r7, sp, #0
	if(flag12)
   80c54:	4b06      	ldr	r3, [pc, #24]	; (80c70 <getNewSpeed+0x20>)
   80c56:	781b      	ldrb	r3, [r3, #0]
   80c58:	b2db      	uxtb	r3, r3
   80c5a:	2b00      	cmp	r3, #0
   80c5c:	d001      	beq.n	80c62 <getNewSpeed+0x12>
	{
	//	sendString("Set:\n", 5);
		return 1;
   80c5e:	2301      	movs	r3, #1
   80c60:	e000      	b.n	80c64 <getNewSpeed+0x14>
	}
	else
	{
		//sendString("UnSet:\n", 7);
		return 0;
   80c62:	2300      	movs	r3, #0
	}
}
   80c64:	4618      	mov	r0, r3
   80c66:	46bd      	mov	sp, r7
   80c68:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c6c:	4770      	bx	lr
   80c6e:	bf00      	nop
   80c70:	20000454 	.word	0x20000454

00080c74 <parseSpeed>:

void parseSpeed(char* buffer)
{
   80c74:	b580      	push	{r7, lr}
   80c76:	b086      	sub	sp, #24
   80c78:	af00      	add	r7, sp, #0
   80c7a:	6078      	str	r0, [r7, #4]
	sign_ST = 0;
   80c7c:	4b30      	ldr	r3, [pc, #192]	; (80d40 <parseSpeed+0xcc>)
   80c7e:	2200      	movs	r2, #0
   80c80:	701a      	strb	r2, [r3, #0]
	sign_DR = 0;
   80c82:	4b30      	ldr	r3, [pc, #192]	; (80d44 <parseSpeed+0xd0>)
   80c84:	2200      	movs	r2, #0
   80c86:	701a      	strb	r2, [r3, #0]
	
	char* token1;
	token1 = strtok(buffer, "#");
   80c88:	6878      	ldr	r0, [r7, #4]
   80c8a:	492f      	ldr	r1, [pc, #188]	; (80d48 <parseSpeed+0xd4>)
   80c8c:	4b2f      	ldr	r3, [pc, #188]	; (80d4c <parseSpeed+0xd8>)
   80c8e:	4798      	blx	r3
   80c90:	6178      	str	r0, [r7, #20]
	
	if(token1 != NULL)
   80c92:	697b      	ldr	r3, [r7, #20]
   80c94:	2b00      	cmp	r3, #0
   80c96:	d04f      	beq.n	80d38 <parseSpeed+0xc4>
	{
		char* token2;
		token2 = strtok(NULL, "#");
   80c98:	2000      	movs	r0, #0
   80c9a:	492b      	ldr	r1, [pc, #172]	; (80d48 <parseSpeed+0xd4>)
   80c9c:	4b2b      	ldr	r3, [pc, #172]	; (80d4c <parseSpeed+0xd8>)
   80c9e:	4798      	blx	r3
   80ca0:	6138      	str	r0, [r7, #16]
		
		if(token2 != NULL)
   80ca2:	693b      	ldr	r3, [r7, #16]
   80ca4:	2b00      	cmp	r3, #0
   80ca6:	d047      	beq.n	80d38 <parseSpeed+0xc4>
		{
			char *end;
			percentage_ST = strtol((token1+1), &end, 10);
   80ca8:	697b      	ldr	r3, [r7, #20]
   80caa:	1c5a      	adds	r2, r3, #1
   80cac:	f107 030c 	add.w	r3, r7, #12
   80cb0:	4610      	mov	r0, r2
   80cb2:	4619      	mov	r1, r3
   80cb4:	220a      	movs	r2, #10
   80cb6:	4b26      	ldr	r3, [pc, #152]	; (80d50 <parseSpeed+0xdc>)
   80cb8:	4798      	blx	r3
   80cba:	4603      	mov	r3, r0
   80cbc:	b2da      	uxtb	r2, r3
   80cbe:	4b25      	ldr	r3, [pc, #148]	; (80d54 <parseSpeed+0xe0>)
   80cc0:	701a      	strb	r2, [r3, #0]
			percentage_DR = strtol((token2+1), &end, 10);
   80cc2:	693b      	ldr	r3, [r7, #16]
   80cc4:	1c5a      	adds	r2, r3, #1
   80cc6:	f107 030c 	add.w	r3, r7, #12
   80cca:	4610      	mov	r0, r2
   80ccc:	4619      	mov	r1, r3
   80cce:	220a      	movs	r2, #10
   80cd0:	4b1f      	ldr	r3, [pc, #124]	; (80d50 <parseSpeed+0xdc>)
   80cd2:	4798      	blx	r3
   80cd4:	4603      	mov	r3, r0
   80cd6:	b2da      	uxtb	r2, r3
   80cd8:	4b1f      	ldr	r3, [pc, #124]	; (80d58 <parseSpeed+0xe4>)
   80cda:	701a      	strb	r2, [r3, #0]
			
			sendString("Speed ST: ", 10);
   80cdc:	481f      	ldr	r0, [pc, #124]	; (80d5c <parseSpeed+0xe8>)
   80cde:	210a      	movs	r1, #10
   80ce0:	4b1f      	ldr	r3, [pc, #124]	; (80d60 <parseSpeed+0xec>)
   80ce2:	4798      	blx	r3
			sendString(token1, strlen(token1));
   80ce4:	6978      	ldr	r0, [r7, #20]
   80ce6:	4b1f      	ldr	r3, [pc, #124]	; (80d64 <parseSpeed+0xf0>)
   80ce8:	4798      	blx	r3
   80cea:	4603      	mov	r3, r0
   80cec:	b29b      	uxth	r3, r3
   80cee:	6978      	ldr	r0, [r7, #20]
   80cf0:	4619      	mov	r1, r3
   80cf2:	4b1b      	ldr	r3, [pc, #108]	; (80d60 <parseSpeed+0xec>)
   80cf4:	4798      	blx	r3

			if (token1[0] == 0x2d) {
   80cf6:	697b      	ldr	r3, [r7, #20]
   80cf8:	781b      	ldrb	r3, [r3, #0]
   80cfa:	2b2d      	cmp	r3, #45	; 0x2d
   80cfc:	d102      	bne.n	80d04 <parseSpeed+0x90>
				// minus
				sign_ST = 1;
   80cfe:	4b10      	ldr	r3, [pc, #64]	; (80d40 <parseSpeed+0xcc>)
   80d00:	2201      	movs	r2, #1
   80d02:	701a      	strb	r2, [r3, #0]
			}
			
			sendString("Speed DR: ", 10);
   80d04:	4818      	ldr	r0, [pc, #96]	; (80d68 <parseSpeed+0xf4>)
   80d06:	210a      	movs	r1, #10
   80d08:	4b15      	ldr	r3, [pc, #84]	; (80d60 <parseSpeed+0xec>)
   80d0a:	4798      	blx	r3
			sendString(token2, strlen(token2));
   80d0c:	6938      	ldr	r0, [r7, #16]
   80d0e:	4b15      	ldr	r3, [pc, #84]	; (80d64 <parseSpeed+0xf0>)
   80d10:	4798      	blx	r3
   80d12:	4603      	mov	r3, r0
   80d14:	b29b      	uxth	r3, r3
   80d16:	6938      	ldr	r0, [r7, #16]
   80d18:	4619      	mov	r1, r3
   80d1a:	4b11      	ldr	r3, [pc, #68]	; (80d60 <parseSpeed+0xec>)
   80d1c:	4798      	blx	r3
			
			if (token2[0] == 0x2d) {
   80d1e:	693b      	ldr	r3, [r7, #16]
   80d20:	781b      	ldrb	r3, [r3, #0]
   80d22:	2b2d      	cmp	r3, #45	; 0x2d
   80d24:	d102      	bne.n	80d2c <parseSpeed+0xb8>
				 // minus
				 sign_DR = 1;
   80d26:	4b07      	ldr	r3, [pc, #28]	; (80d44 <parseSpeed+0xd0>)
   80d28:	2201      	movs	r2, #1
   80d2a:	701a      	strb	r2, [r3, #0]
			}
			
			newSpeed = 1;
   80d2c:	4b0f      	ldr	r3, [pc, #60]	; (80d6c <parseSpeed+0xf8>)
   80d2e:	2201      	movs	r2, #1
   80d30:	701a      	strb	r2, [r3, #0]
			flag12=1;
   80d32:	4b0f      	ldr	r3, [pc, #60]	; (80d70 <parseSpeed+0xfc>)
   80d34:	2201      	movs	r2, #1
   80d36:	701a      	strb	r2, [r3, #0]
		}
	}
}
   80d38:	3718      	adds	r7, #24
   80d3a:	46bd      	mov	sp, r7
   80d3c:	bd80      	pop	{r7, pc}
   80d3e:	bf00      	nop
   80d40:	20000492 	.word	0x20000492
   80d44:	20000491 	.word	0x20000491
   80d48:	000819ec 	.word	0x000819ec
   80d4c:	00081755 	.word	0x00081755
   80d50:	000818dd 	.word	0x000818dd
   80d54:	20000493 	.word	0x20000493
   80d58:	20000490 	.word	0x20000490
   80d5c:	000819f0 	.word	0x000819f0
   80d60:	00080c11 	.word	0x00080c11
   80d64:	000816f5 	.word	0x000816f5
   80d68:	000819fc 	.word	0x000819fc
   80d6c:	20000478 	.word	0x20000478
   80d70:	20000454 	.word	0x20000454

00080d74 <configure_uart>:

void configure_uart(void)
{
   80d74:	b580      	push	{r7, lr}
   80d76:	b082      	sub	sp, #8
   80d78:	af00      	add	r7, sp, #0
	uint32_t ul_sr;
	
	// ==> Pin configuration
	// Disable interrupts on Rx and Tx
	PIOA->PIO_IDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d7a:	4b28      	ldr	r3, [pc, #160]	; (80e1c <configure_uart+0xa8>)
   80d7c:	4a27      	ldr	r2, [pc, #156]	; (80e1c <configure_uart+0xa8>)
   80d7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
   80d80:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   80d84:	645a      	str	r2, [r3, #68]	; 0x44
	
	// Disable the PIO of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d86:	4b25      	ldr	r3, [pc, #148]	; (80e1c <configure_uart+0xa8>)
   80d88:	4a24      	ldr	r2, [pc, #144]	; (80e1c <configure_uart+0xa8>)
   80d8a:	6852      	ldr	r2, [r2, #4]
   80d8c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   80d90:	605a      	str	r2, [r3, #4]
	
	// Read current peripheral AB select register and set the Rx and Tx pins to 0 (Peripheral A function)
	ul_sr = PIOA->PIO_ABSR;
   80d92:	4b22      	ldr	r3, [pc, #136]	; (80e1c <configure_uart+0xa8>)
   80d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80d96:	607b      	str	r3, [r7, #4]
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80d98:	4b20      	ldr	r3, [pc, #128]	; (80e1c <configure_uart+0xa8>)
   80d9a:	4a20      	ldr	r2, [pc, #128]	; (80e1c <configure_uart+0xa8>)
   80d9c:	6f11      	ldr	r1, [r2, #112]	; 0x70
   80d9e:	687a      	ldr	r2, [r7, #4]
   80da0:	400a      	ands	r2, r1
   80da2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80da6:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Enable the pull up on the Rx and Tx pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80da8:	4b1c      	ldr	r3, [pc, #112]	; (80e1c <configure_uart+0xa8>)
   80daa:	f44f 7240 	mov.w	r2, #768	; 0x300
   80dae:	665a      	str	r2, [r3, #100]	; 0x64
	
	// ==> Actual uart configuration
	// Enable the peripheral uart controller
	PMC->PMC_PCER0 |= 1 << ID_UART;
   80db0:	4b1b      	ldr	r3, [pc, #108]	; (80e20 <configure_uart+0xac>)
   80db2:	4a1b      	ldr	r2, [pc, #108]	; (80e20 <configure_uart+0xac>)
   80db4:	6912      	ldr	r2, [r2, #16]
   80db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80dba:	611a      	str	r2, [r3, #16]
	
	// Reset and disable receiver & transmitter
	UART->UART_CR |= UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80dbc:	4b19      	ldr	r3, [pc, #100]	; (80e24 <configure_uart+0xb0>)
   80dbe:	4a19      	ldr	r2, [pc, #100]	; (80e24 <configure_uart+0xb0>)
   80dc0:	6812      	ldr	r2, [r2, #0]
   80dc2:	f042 02ac 	orr.w	r2, r2, #172	; 0xac
   80dc6:	601a      	str	r2, [r3, #0]
	
	// Set the baudrate to 115200
	UART->UART_BRGR |= 45; // 84000000 / 16 * x = BaudRate (write x into UART_BRGR)
   80dc8:	4b16      	ldr	r3, [pc, #88]	; (80e24 <configure_uart+0xb0>)
   80dca:	4a16      	ldr	r2, [pc, #88]	; (80e24 <configure_uart+0xb0>)
   80dcc:	6a12      	ldr	r2, [r2, #32]
   80dce:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
   80dd2:	621a      	str	r2, [r3, #32]
	
	// No Parity
	UART->UART_MR |= UART_MR_PAR_NO;
   80dd4:	4b13      	ldr	r3, [pc, #76]	; (80e24 <configure_uart+0xb0>)
   80dd6:	4a13      	ldr	r2, [pc, #76]	; (80e24 <configure_uart+0xb0>)
   80dd8:	6852      	ldr	r2, [r2, #4]
   80dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   80dde:	605a      	str	r2, [r3, #4]
	
	// Disable PDC channel requests
	UART->UART_PTCR |= UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80de0:	4a10      	ldr	r2, [pc, #64]	; (80e24 <configure_uart+0xb0>)
   80de2:	4b10      	ldr	r3, [pc, #64]	; (80e24 <configure_uart+0xb0>)
   80de4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   80de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80dec:	f043 0302 	orr.w	r3, r3, #2
   80df0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	
	// Disable / Enable interrupts on end of receive
	UART->UART_IDR = 0xFFFFFFFF;
   80df4:	4b0b      	ldr	r3, [pc, #44]	; (80e24 <configure_uart+0xb0>)
   80df6:	f04f 32ff 	mov.w	r2, #4294967295
   80dfa:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ((IRQn_Type) ID_UART);
   80dfc:	2008      	movs	r0, #8
   80dfe:	4b0a      	ldr	r3, [pc, #40]	; (80e28 <configure_uart+0xb4>)
   80e00:	4798      	blx	r3
	UART->UART_IER = UART_IER_RXRDY;
   80e02:	4b08      	ldr	r3, [pc, #32]	; (80e24 <configure_uart+0xb0>)
   80e04:	2201      	movs	r2, #1
   80e06:	609a      	str	r2, [r3, #8]
	
	// Enable receiver and trasmitter
	UART->UART_CR |= UART_CR_RXEN | UART_CR_TXEN;
   80e08:	4b06      	ldr	r3, [pc, #24]	; (80e24 <configure_uart+0xb0>)
   80e0a:	4a06      	ldr	r2, [pc, #24]	; (80e24 <configure_uart+0xb0>)
   80e0c:	6812      	ldr	r2, [r2, #0]
   80e0e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   80e12:	601a      	str	r2, [r3, #0]
	
}
   80e14:	3708      	adds	r7, #8
   80e16:	46bd      	mov	sp, r7
   80e18:	bd80      	pop	{r7, pc}
   80e1a:	bf00      	nop
   80e1c:	400e0e00 	.word	0x400e0e00
   80e20:	400e0600 	.word	0x400e0600
   80e24:	400e0800 	.word	0x400e0800
   80e28:	00080ae9 	.word	0x00080ae9

00080e2c <__aeabi_drsub>:
   80e2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80e30:	e002      	b.n	80e38 <__adddf3>
   80e32:	bf00      	nop

00080e34 <__aeabi_dsub>:
   80e34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080e38 <__adddf3>:
   80e38:	b530      	push	{r4, r5, lr}
   80e3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80e3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80e42:	ea94 0f05 	teq	r4, r5
   80e46:	bf08      	it	eq
   80e48:	ea90 0f02 	teqeq	r0, r2
   80e4c:	bf1f      	itttt	ne
   80e4e:	ea54 0c00 	orrsne.w	ip, r4, r0
   80e52:	ea55 0c02 	orrsne.w	ip, r5, r2
   80e56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80e5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80e5e:	f000 80e2 	beq.w	81026 <__adddf3+0x1ee>
   80e62:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80e66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80e6a:	bfb8      	it	lt
   80e6c:	426d      	neglt	r5, r5
   80e6e:	dd0c      	ble.n	80e8a <__adddf3+0x52>
   80e70:	442c      	add	r4, r5
   80e72:	ea80 0202 	eor.w	r2, r0, r2
   80e76:	ea81 0303 	eor.w	r3, r1, r3
   80e7a:	ea82 0000 	eor.w	r0, r2, r0
   80e7e:	ea83 0101 	eor.w	r1, r3, r1
   80e82:	ea80 0202 	eor.w	r2, r0, r2
   80e86:	ea81 0303 	eor.w	r3, r1, r3
   80e8a:	2d36      	cmp	r5, #54	; 0x36
   80e8c:	bf88      	it	hi
   80e8e:	bd30      	pophi	{r4, r5, pc}
   80e90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80e94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80e98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80e9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80ea0:	d002      	beq.n	80ea8 <__adddf3+0x70>
   80ea2:	4240      	negs	r0, r0
   80ea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80ea8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80eac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80eb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80eb4:	d002      	beq.n	80ebc <__adddf3+0x84>
   80eb6:	4252      	negs	r2, r2
   80eb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80ebc:	ea94 0f05 	teq	r4, r5
   80ec0:	f000 80a7 	beq.w	81012 <__adddf3+0x1da>
   80ec4:	f1a4 0401 	sub.w	r4, r4, #1
   80ec8:	f1d5 0e20 	rsbs	lr, r5, #32
   80ecc:	db0d      	blt.n	80eea <__adddf3+0xb2>
   80ece:	fa02 fc0e 	lsl.w	ip, r2, lr
   80ed2:	fa22 f205 	lsr.w	r2, r2, r5
   80ed6:	1880      	adds	r0, r0, r2
   80ed8:	f141 0100 	adc.w	r1, r1, #0
   80edc:	fa03 f20e 	lsl.w	r2, r3, lr
   80ee0:	1880      	adds	r0, r0, r2
   80ee2:	fa43 f305 	asr.w	r3, r3, r5
   80ee6:	4159      	adcs	r1, r3
   80ee8:	e00e      	b.n	80f08 <__adddf3+0xd0>
   80eea:	f1a5 0520 	sub.w	r5, r5, #32
   80eee:	f10e 0e20 	add.w	lr, lr, #32
   80ef2:	2a01      	cmp	r2, #1
   80ef4:	fa03 fc0e 	lsl.w	ip, r3, lr
   80ef8:	bf28      	it	cs
   80efa:	f04c 0c02 	orrcs.w	ip, ip, #2
   80efe:	fa43 f305 	asr.w	r3, r3, r5
   80f02:	18c0      	adds	r0, r0, r3
   80f04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80f08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f0c:	d507      	bpl.n	80f1e <__adddf3+0xe6>
   80f0e:	f04f 0e00 	mov.w	lr, #0
   80f12:	f1dc 0c00 	rsbs	ip, ip, #0
   80f16:	eb7e 0000 	sbcs.w	r0, lr, r0
   80f1a:	eb6e 0101 	sbc.w	r1, lr, r1
   80f1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80f22:	d31b      	bcc.n	80f5c <__adddf3+0x124>
   80f24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80f28:	d30c      	bcc.n	80f44 <__adddf3+0x10c>
   80f2a:	0849      	lsrs	r1, r1, #1
   80f2c:	ea5f 0030 	movs.w	r0, r0, rrx
   80f30:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f34:	f104 0401 	add.w	r4, r4, #1
   80f38:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80f3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80f40:	f080 809a 	bcs.w	81078 <__adddf3+0x240>
   80f44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f48:	bf08      	it	eq
   80f4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80f4e:	f150 0000 	adcs.w	r0, r0, #0
   80f52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80f56:	ea41 0105 	orr.w	r1, r1, r5
   80f5a:	bd30      	pop	{r4, r5, pc}
   80f5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80f60:	4140      	adcs	r0, r0
   80f62:	eb41 0101 	adc.w	r1, r1, r1
   80f66:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80f6a:	f1a4 0401 	sub.w	r4, r4, #1
   80f6e:	d1e9      	bne.n	80f44 <__adddf3+0x10c>
   80f70:	f091 0f00 	teq	r1, #0
   80f74:	bf04      	itt	eq
   80f76:	4601      	moveq	r1, r0
   80f78:	2000      	moveq	r0, #0
   80f7a:	fab1 f381 	clz	r3, r1
   80f7e:	bf08      	it	eq
   80f80:	3320      	addeq	r3, #32
   80f82:	f1a3 030b 	sub.w	r3, r3, #11
   80f86:	f1b3 0220 	subs.w	r2, r3, #32
   80f8a:	da0c      	bge.n	80fa6 <__adddf3+0x16e>
   80f8c:	320c      	adds	r2, #12
   80f8e:	dd08      	ble.n	80fa2 <__adddf3+0x16a>
   80f90:	f102 0c14 	add.w	ip, r2, #20
   80f94:	f1c2 020c 	rsb	r2, r2, #12
   80f98:	fa01 f00c 	lsl.w	r0, r1, ip
   80f9c:	fa21 f102 	lsr.w	r1, r1, r2
   80fa0:	e00c      	b.n	80fbc <__adddf3+0x184>
   80fa2:	f102 0214 	add.w	r2, r2, #20
   80fa6:	bfd8      	it	le
   80fa8:	f1c2 0c20 	rsble	ip, r2, #32
   80fac:	fa01 f102 	lsl.w	r1, r1, r2
   80fb0:	fa20 fc0c 	lsr.w	ip, r0, ip
   80fb4:	bfdc      	itt	le
   80fb6:	ea41 010c 	orrle.w	r1, r1, ip
   80fba:	4090      	lslle	r0, r2
   80fbc:	1ae4      	subs	r4, r4, r3
   80fbe:	bfa2      	ittt	ge
   80fc0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80fc4:	4329      	orrge	r1, r5
   80fc6:	bd30      	popge	{r4, r5, pc}
   80fc8:	ea6f 0404 	mvn.w	r4, r4
   80fcc:	3c1f      	subs	r4, #31
   80fce:	da1c      	bge.n	8100a <__adddf3+0x1d2>
   80fd0:	340c      	adds	r4, #12
   80fd2:	dc0e      	bgt.n	80ff2 <__adddf3+0x1ba>
   80fd4:	f104 0414 	add.w	r4, r4, #20
   80fd8:	f1c4 0220 	rsb	r2, r4, #32
   80fdc:	fa20 f004 	lsr.w	r0, r0, r4
   80fe0:	fa01 f302 	lsl.w	r3, r1, r2
   80fe4:	ea40 0003 	orr.w	r0, r0, r3
   80fe8:	fa21 f304 	lsr.w	r3, r1, r4
   80fec:	ea45 0103 	orr.w	r1, r5, r3
   80ff0:	bd30      	pop	{r4, r5, pc}
   80ff2:	f1c4 040c 	rsb	r4, r4, #12
   80ff6:	f1c4 0220 	rsb	r2, r4, #32
   80ffa:	fa20 f002 	lsr.w	r0, r0, r2
   80ffe:	fa01 f304 	lsl.w	r3, r1, r4
   81002:	ea40 0003 	orr.w	r0, r0, r3
   81006:	4629      	mov	r1, r5
   81008:	bd30      	pop	{r4, r5, pc}
   8100a:	fa21 f004 	lsr.w	r0, r1, r4
   8100e:	4629      	mov	r1, r5
   81010:	bd30      	pop	{r4, r5, pc}
   81012:	f094 0f00 	teq	r4, #0
   81016:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8101a:	bf06      	itte	eq
   8101c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81020:	3401      	addeq	r4, #1
   81022:	3d01      	subne	r5, #1
   81024:	e74e      	b.n	80ec4 <__adddf3+0x8c>
   81026:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8102a:	bf18      	it	ne
   8102c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81030:	d029      	beq.n	81086 <__adddf3+0x24e>
   81032:	ea94 0f05 	teq	r4, r5
   81036:	bf08      	it	eq
   81038:	ea90 0f02 	teqeq	r0, r2
   8103c:	d005      	beq.n	8104a <__adddf3+0x212>
   8103e:	ea54 0c00 	orrs.w	ip, r4, r0
   81042:	bf04      	itt	eq
   81044:	4619      	moveq	r1, r3
   81046:	4610      	moveq	r0, r2
   81048:	bd30      	pop	{r4, r5, pc}
   8104a:	ea91 0f03 	teq	r1, r3
   8104e:	bf1e      	ittt	ne
   81050:	2100      	movne	r1, #0
   81052:	2000      	movne	r0, #0
   81054:	bd30      	popne	{r4, r5, pc}
   81056:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8105a:	d105      	bne.n	81068 <__adddf3+0x230>
   8105c:	0040      	lsls	r0, r0, #1
   8105e:	4149      	adcs	r1, r1
   81060:	bf28      	it	cs
   81062:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81066:	bd30      	pop	{r4, r5, pc}
   81068:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8106c:	bf3c      	itt	cc
   8106e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81072:	bd30      	popcc	{r4, r5, pc}
   81074:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81078:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8107c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81080:	f04f 0000 	mov.w	r0, #0
   81084:	bd30      	pop	{r4, r5, pc}
   81086:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8108a:	bf1a      	itte	ne
   8108c:	4619      	movne	r1, r3
   8108e:	4610      	movne	r0, r2
   81090:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81094:	bf1c      	itt	ne
   81096:	460b      	movne	r3, r1
   81098:	4602      	movne	r2, r0
   8109a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8109e:	bf06      	itte	eq
   810a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   810a4:	ea91 0f03 	teqeq	r1, r3
   810a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   810ac:	bd30      	pop	{r4, r5, pc}
   810ae:	bf00      	nop

000810b0 <__aeabi_ui2d>:
   810b0:	f090 0f00 	teq	r0, #0
   810b4:	bf04      	itt	eq
   810b6:	2100      	moveq	r1, #0
   810b8:	4770      	bxeq	lr
   810ba:	b530      	push	{r4, r5, lr}
   810bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810c4:	f04f 0500 	mov.w	r5, #0
   810c8:	f04f 0100 	mov.w	r1, #0
   810cc:	e750      	b.n	80f70 <__adddf3+0x138>
   810ce:	bf00      	nop

000810d0 <__aeabi_i2d>:
   810d0:	f090 0f00 	teq	r0, #0
   810d4:	bf04      	itt	eq
   810d6:	2100      	moveq	r1, #0
   810d8:	4770      	bxeq	lr
   810da:	b530      	push	{r4, r5, lr}
   810dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   810e8:	bf48      	it	mi
   810ea:	4240      	negmi	r0, r0
   810ec:	f04f 0100 	mov.w	r1, #0
   810f0:	e73e      	b.n	80f70 <__adddf3+0x138>
   810f2:	bf00      	nop

000810f4 <__aeabi_f2d>:
   810f4:	0042      	lsls	r2, r0, #1
   810f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   810fa:	ea4f 0131 	mov.w	r1, r1, rrx
   810fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81102:	bf1f      	itttt	ne
   81104:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81108:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8110c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81110:	4770      	bxne	lr
   81112:	f092 0f00 	teq	r2, #0
   81116:	bf14      	ite	ne
   81118:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8111c:	4770      	bxeq	lr
   8111e:	b530      	push	{r4, r5, lr}
   81120:	f44f 7460 	mov.w	r4, #896	; 0x380
   81124:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81128:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8112c:	e720      	b.n	80f70 <__adddf3+0x138>
   8112e:	bf00      	nop

00081130 <__aeabi_ul2d>:
   81130:	ea50 0201 	orrs.w	r2, r0, r1
   81134:	bf08      	it	eq
   81136:	4770      	bxeq	lr
   81138:	b530      	push	{r4, r5, lr}
   8113a:	f04f 0500 	mov.w	r5, #0
   8113e:	e00a      	b.n	81156 <__aeabi_l2d+0x16>

00081140 <__aeabi_l2d>:
   81140:	ea50 0201 	orrs.w	r2, r0, r1
   81144:	bf08      	it	eq
   81146:	4770      	bxeq	lr
   81148:	b530      	push	{r4, r5, lr}
   8114a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8114e:	d502      	bpl.n	81156 <__aeabi_l2d+0x16>
   81150:	4240      	negs	r0, r0
   81152:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81156:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8115a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8115e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81162:	f43f aedc 	beq.w	80f1e <__adddf3+0xe6>
   81166:	f04f 0203 	mov.w	r2, #3
   8116a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8116e:	bf18      	it	ne
   81170:	3203      	addne	r2, #3
   81172:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81176:	bf18      	it	ne
   81178:	3203      	addne	r2, #3
   8117a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8117e:	f1c2 0320 	rsb	r3, r2, #32
   81182:	fa00 fc03 	lsl.w	ip, r0, r3
   81186:	fa20 f002 	lsr.w	r0, r0, r2
   8118a:	fa01 fe03 	lsl.w	lr, r1, r3
   8118e:	ea40 000e 	orr.w	r0, r0, lr
   81192:	fa21 f102 	lsr.w	r1, r1, r2
   81196:	4414      	add	r4, r2
   81198:	e6c1      	b.n	80f1e <__adddf3+0xe6>
   8119a:	bf00      	nop

0008119c <__aeabi_dmul>:
   8119c:	b570      	push	{r4, r5, r6, lr}
   8119e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   811a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   811a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   811aa:	bf1d      	ittte	ne
   811ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   811b0:	ea94 0f0c 	teqne	r4, ip
   811b4:	ea95 0f0c 	teqne	r5, ip
   811b8:	f000 f8de 	bleq	81378 <__aeabi_dmul+0x1dc>
   811bc:	442c      	add	r4, r5
   811be:	ea81 0603 	eor.w	r6, r1, r3
   811c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   811c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   811ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   811ce:	bf18      	it	ne
   811d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   811d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   811dc:	d038      	beq.n	81250 <__aeabi_dmul+0xb4>
   811de:	fba0 ce02 	umull	ip, lr, r0, r2
   811e2:	f04f 0500 	mov.w	r5, #0
   811e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   811ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   811ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   811f2:	f04f 0600 	mov.w	r6, #0
   811f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   811fa:	f09c 0f00 	teq	ip, #0
   811fe:	bf18      	it	ne
   81200:	f04e 0e01 	orrne.w	lr, lr, #1
   81204:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81208:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8120c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81210:	d204      	bcs.n	8121c <__aeabi_dmul+0x80>
   81212:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81216:	416d      	adcs	r5, r5
   81218:	eb46 0606 	adc.w	r6, r6, r6
   8121c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81220:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81224:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81228:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8122c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81230:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81234:	bf88      	it	hi
   81236:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8123a:	d81e      	bhi.n	8127a <__aeabi_dmul+0xde>
   8123c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81240:	bf08      	it	eq
   81242:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81246:	f150 0000 	adcs.w	r0, r0, #0
   8124a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8124e:	bd70      	pop	{r4, r5, r6, pc}
   81250:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81254:	ea46 0101 	orr.w	r1, r6, r1
   81258:	ea40 0002 	orr.w	r0, r0, r2
   8125c:	ea81 0103 	eor.w	r1, r1, r3
   81260:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81264:	bfc2      	ittt	gt
   81266:	ebd4 050c 	rsbsgt	r5, r4, ip
   8126a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8126e:	bd70      	popgt	{r4, r5, r6, pc}
   81270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81274:	f04f 0e00 	mov.w	lr, #0
   81278:	3c01      	subs	r4, #1
   8127a:	f300 80ab 	bgt.w	813d4 <__aeabi_dmul+0x238>
   8127e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81282:	bfde      	ittt	le
   81284:	2000      	movle	r0, #0
   81286:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8128a:	bd70      	pople	{r4, r5, r6, pc}
   8128c:	f1c4 0400 	rsb	r4, r4, #0
   81290:	3c20      	subs	r4, #32
   81292:	da35      	bge.n	81300 <__aeabi_dmul+0x164>
   81294:	340c      	adds	r4, #12
   81296:	dc1b      	bgt.n	812d0 <__aeabi_dmul+0x134>
   81298:	f104 0414 	add.w	r4, r4, #20
   8129c:	f1c4 0520 	rsb	r5, r4, #32
   812a0:	fa00 f305 	lsl.w	r3, r0, r5
   812a4:	fa20 f004 	lsr.w	r0, r0, r4
   812a8:	fa01 f205 	lsl.w	r2, r1, r5
   812ac:	ea40 0002 	orr.w	r0, r0, r2
   812b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   812b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   812b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812bc:	fa21 f604 	lsr.w	r6, r1, r4
   812c0:	eb42 0106 	adc.w	r1, r2, r6
   812c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812c8:	bf08      	it	eq
   812ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812ce:	bd70      	pop	{r4, r5, r6, pc}
   812d0:	f1c4 040c 	rsb	r4, r4, #12
   812d4:	f1c4 0520 	rsb	r5, r4, #32
   812d8:	fa00 f304 	lsl.w	r3, r0, r4
   812dc:	fa20 f005 	lsr.w	r0, r0, r5
   812e0:	fa01 f204 	lsl.w	r2, r1, r4
   812e4:	ea40 0002 	orr.w	r0, r0, r2
   812e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812f0:	f141 0100 	adc.w	r1, r1, #0
   812f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812f8:	bf08      	it	eq
   812fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812fe:	bd70      	pop	{r4, r5, r6, pc}
   81300:	f1c4 0520 	rsb	r5, r4, #32
   81304:	fa00 f205 	lsl.w	r2, r0, r5
   81308:	ea4e 0e02 	orr.w	lr, lr, r2
   8130c:	fa20 f304 	lsr.w	r3, r0, r4
   81310:	fa01 f205 	lsl.w	r2, r1, r5
   81314:	ea43 0302 	orr.w	r3, r3, r2
   81318:	fa21 f004 	lsr.w	r0, r1, r4
   8131c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81320:	fa21 f204 	lsr.w	r2, r1, r4
   81324:	ea20 0002 	bic.w	r0, r0, r2
   81328:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8132c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81330:	bf08      	it	eq
   81332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81336:	bd70      	pop	{r4, r5, r6, pc}
   81338:	f094 0f00 	teq	r4, #0
   8133c:	d10f      	bne.n	8135e <__aeabi_dmul+0x1c2>
   8133e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81342:	0040      	lsls	r0, r0, #1
   81344:	eb41 0101 	adc.w	r1, r1, r1
   81348:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8134c:	bf08      	it	eq
   8134e:	3c01      	subeq	r4, #1
   81350:	d0f7      	beq.n	81342 <__aeabi_dmul+0x1a6>
   81352:	ea41 0106 	orr.w	r1, r1, r6
   81356:	f095 0f00 	teq	r5, #0
   8135a:	bf18      	it	ne
   8135c:	4770      	bxne	lr
   8135e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81362:	0052      	lsls	r2, r2, #1
   81364:	eb43 0303 	adc.w	r3, r3, r3
   81368:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8136c:	bf08      	it	eq
   8136e:	3d01      	subeq	r5, #1
   81370:	d0f7      	beq.n	81362 <__aeabi_dmul+0x1c6>
   81372:	ea43 0306 	orr.w	r3, r3, r6
   81376:	4770      	bx	lr
   81378:	ea94 0f0c 	teq	r4, ip
   8137c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81380:	bf18      	it	ne
   81382:	ea95 0f0c 	teqne	r5, ip
   81386:	d00c      	beq.n	813a2 <__aeabi_dmul+0x206>
   81388:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8138c:	bf18      	it	ne
   8138e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81392:	d1d1      	bne.n	81338 <__aeabi_dmul+0x19c>
   81394:	ea81 0103 	eor.w	r1, r1, r3
   81398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8139c:	f04f 0000 	mov.w	r0, #0
   813a0:	bd70      	pop	{r4, r5, r6, pc}
   813a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813a6:	bf06      	itte	eq
   813a8:	4610      	moveq	r0, r2
   813aa:	4619      	moveq	r1, r3
   813ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   813b0:	d019      	beq.n	813e6 <__aeabi_dmul+0x24a>
   813b2:	ea94 0f0c 	teq	r4, ip
   813b6:	d102      	bne.n	813be <__aeabi_dmul+0x222>
   813b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   813bc:	d113      	bne.n	813e6 <__aeabi_dmul+0x24a>
   813be:	ea95 0f0c 	teq	r5, ip
   813c2:	d105      	bne.n	813d0 <__aeabi_dmul+0x234>
   813c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   813c8:	bf1c      	itt	ne
   813ca:	4610      	movne	r0, r2
   813cc:	4619      	movne	r1, r3
   813ce:	d10a      	bne.n	813e6 <__aeabi_dmul+0x24a>
   813d0:	ea81 0103 	eor.w	r1, r1, r3
   813d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   813e0:	f04f 0000 	mov.w	r0, #0
   813e4:	bd70      	pop	{r4, r5, r6, pc}
   813e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   813ee:	bd70      	pop	{r4, r5, r6, pc}

000813f0 <__aeabi_ddiv>:
   813f0:	b570      	push	{r4, r5, r6, lr}
   813f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   813fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   813fe:	bf1d      	ittte	ne
   81400:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81404:	ea94 0f0c 	teqne	r4, ip
   81408:	ea95 0f0c 	teqne	r5, ip
   8140c:	f000 f8a7 	bleq	8155e <__aeabi_ddiv+0x16e>
   81410:	eba4 0405 	sub.w	r4, r4, r5
   81414:	ea81 0e03 	eor.w	lr, r1, r3
   81418:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8141c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81420:	f000 8088 	beq.w	81534 <__aeabi_ddiv+0x144>
   81424:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81428:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8142c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81430:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81434:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81438:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8143c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81440:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81444:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81448:	429d      	cmp	r5, r3
   8144a:	bf08      	it	eq
   8144c:	4296      	cmpeq	r6, r2
   8144e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81452:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81456:	d202      	bcs.n	8145e <__aeabi_ddiv+0x6e>
   81458:	085b      	lsrs	r3, r3, #1
   8145a:	ea4f 0232 	mov.w	r2, r2, rrx
   8145e:	1ab6      	subs	r6, r6, r2
   81460:	eb65 0503 	sbc.w	r5, r5, r3
   81464:	085b      	lsrs	r3, r3, #1
   81466:	ea4f 0232 	mov.w	r2, r2, rrx
   8146a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8146e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81472:	ebb6 0e02 	subs.w	lr, r6, r2
   81476:	eb75 0e03 	sbcs.w	lr, r5, r3
   8147a:	bf22      	ittt	cs
   8147c:	1ab6      	subcs	r6, r6, r2
   8147e:	4675      	movcs	r5, lr
   81480:	ea40 000c 	orrcs.w	r0, r0, ip
   81484:	085b      	lsrs	r3, r3, #1
   81486:	ea4f 0232 	mov.w	r2, r2, rrx
   8148a:	ebb6 0e02 	subs.w	lr, r6, r2
   8148e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81492:	bf22      	ittt	cs
   81494:	1ab6      	subcs	r6, r6, r2
   81496:	4675      	movcs	r5, lr
   81498:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8149c:	085b      	lsrs	r3, r3, #1
   8149e:	ea4f 0232 	mov.w	r2, r2, rrx
   814a2:	ebb6 0e02 	subs.w	lr, r6, r2
   814a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   814aa:	bf22      	ittt	cs
   814ac:	1ab6      	subcs	r6, r6, r2
   814ae:	4675      	movcs	r5, lr
   814b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   814b4:	085b      	lsrs	r3, r3, #1
   814b6:	ea4f 0232 	mov.w	r2, r2, rrx
   814ba:	ebb6 0e02 	subs.w	lr, r6, r2
   814be:	eb75 0e03 	sbcs.w	lr, r5, r3
   814c2:	bf22      	ittt	cs
   814c4:	1ab6      	subcs	r6, r6, r2
   814c6:	4675      	movcs	r5, lr
   814c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   814cc:	ea55 0e06 	orrs.w	lr, r5, r6
   814d0:	d018      	beq.n	81504 <__aeabi_ddiv+0x114>
   814d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   814d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   814da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   814de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   814e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   814e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   814ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   814ee:	d1c0      	bne.n	81472 <__aeabi_ddiv+0x82>
   814f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814f4:	d10b      	bne.n	8150e <__aeabi_ddiv+0x11e>
   814f6:	ea41 0100 	orr.w	r1, r1, r0
   814fa:	f04f 0000 	mov.w	r0, #0
   814fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81502:	e7b6      	b.n	81472 <__aeabi_ddiv+0x82>
   81504:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81508:	bf04      	itt	eq
   8150a:	4301      	orreq	r1, r0
   8150c:	2000      	moveq	r0, #0
   8150e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81512:	bf88      	it	hi
   81514:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81518:	f63f aeaf 	bhi.w	8127a <__aeabi_dmul+0xde>
   8151c:	ebb5 0c03 	subs.w	ip, r5, r3
   81520:	bf04      	itt	eq
   81522:	ebb6 0c02 	subseq.w	ip, r6, r2
   81526:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8152a:	f150 0000 	adcs.w	r0, r0, #0
   8152e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81532:	bd70      	pop	{r4, r5, r6, pc}
   81534:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81538:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8153c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81540:	bfc2      	ittt	gt
   81542:	ebd4 050c 	rsbsgt	r5, r4, ip
   81546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8154a:	bd70      	popgt	{r4, r5, r6, pc}
   8154c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81550:	f04f 0e00 	mov.w	lr, #0
   81554:	3c01      	subs	r4, #1
   81556:	e690      	b.n	8127a <__aeabi_dmul+0xde>
   81558:	ea45 0e06 	orr.w	lr, r5, r6
   8155c:	e68d      	b.n	8127a <__aeabi_dmul+0xde>
   8155e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81562:	ea94 0f0c 	teq	r4, ip
   81566:	bf08      	it	eq
   81568:	ea95 0f0c 	teqeq	r5, ip
   8156c:	f43f af3b 	beq.w	813e6 <__aeabi_dmul+0x24a>
   81570:	ea94 0f0c 	teq	r4, ip
   81574:	d10a      	bne.n	8158c <__aeabi_ddiv+0x19c>
   81576:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8157a:	f47f af34 	bne.w	813e6 <__aeabi_dmul+0x24a>
   8157e:	ea95 0f0c 	teq	r5, ip
   81582:	f47f af25 	bne.w	813d0 <__aeabi_dmul+0x234>
   81586:	4610      	mov	r0, r2
   81588:	4619      	mov	r1, r3
   8158a:	e72c      	b.n	813e6 <__aeabi_dmul+0x24a>
   8158c:	ea95 0f0c 	teq	r5, ip
   81590:	d106      	bne.n	815a0 <__aeabi_ddiv+0x1b0>
   81592:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81596:	f43f aefd 	beq.w	81394 <__aeabi_dmul+0x1f8>
   8159a:	4610      	mov	r0, r2
   8159c:	4619      	mov	r1, r3
   8159e:	e722      	b.n	813e6 <__aeabi_dmul+0x24a>
   815a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815a4:	bf18      	it	ne
   815a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815aa:	f47f aec5 	bne.w	81338 <__aeabi_dmul+0x19c>
   815ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   815b2:	f47f af0d 	bne.w	813d0 <__aeabi_dmul+0x234>
   815b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   815ba:	f47f aeeb 	bne.w	81394 <__aeabi_dmul+0x1f8>
   815be:	e712      	b.n	813e6 <__aeabi_dmul+0x24a>

000815c0 <__aeabi_d2iz>:
   815c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   815c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   815c8:	d215      	bcs.n	815f6 <__aeabi_d2iz+0x36>
   815ca:	d511      	bpl.n	815f0 <__aeabi_d2iz+0x30>
   815cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   815d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   815d4:	d912      	bls.n	815fc <__aeabi_d2iz+0x3c>
   815d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   815da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   815de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   815e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   815e6:	fa23 f002 	lsr.w	r0, r3, r2
   815ea:	bf18      	it	ne
   815ec:	4240      	negne	r0, r0
   815ee:	4770      	bx	lr
   815f0:	f04f 0000 	mov.w	r0, #0
   815f4:	4770      	bx	lr
   815f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   815fa:	d105      	bne.n	81608 <__aeabi_d2iz+0x48>
   815fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81600:	bf08      	it	eq
   81602:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81606:	4770      	bx	lr
   81608:	f04f 0000 	mov.w	r0, #0
   8160c:	4770      	bx	lr
   8160e:	bf00      	nop

00081610 <__libc_init_array>:
   81610:	b570      	push	{r4, r5, r6, lr}
   81612:	4e0f      	ldr	r6, [pc, #60]	; (81650 <__libc_init_array+0x40>)
   81614:	4d0f      	ldr	r5, [pc, #60]	; (81654 <__libc_init_array+0x44>)
   81616:	1b76      	subs	r6, r6, r5
   81618:	10b6      	asrs	r6, r6, #2
   8161a:	d007      	beq.n	8162c <__libc_init_array+0x1c>
   8161c:	3d04      	subs	r5, #4
   8161e:	2400      	movs	r4, #0
   81620:	3401      	adds	r4, #1
   81622:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81626:	4798      	blx	r3
   81628:	42a6      	cmp	r6, r4
   8162a:	d1f9      	bne.n	81620 <__libc_init_array+0x10>
   8162c:	4e0a      	ldr	r6, [pc, #40]	; (81658 <__libc_init_array+0x48>)
   8162e:	4d0b      	ldr	r5, [pc, #44]	; (8165c <__libc_init_array+0x4c>)
   81630:	f000 fa70 	bl	81b14 <_init>
   81634:	1b76      	subs	r6, r6, r5
   81636:	10b6      	asrs	r6, r6, #2
   81638:	d008      	beq.n	8164c <__libc_init_array+0x3c>
   8163a:	3d04      	subs	r5, #4
   8163c:	2400      	movs	r4, #0
   8163e:	3401      	adds	r4, #1
   81640:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81644:	4798      	blx	r3
   81646:	42a6      	cmp	r6, r4
   81648:	d1f9      	bne.n	8163e <__libc_init_array+0x2e>
   8164a:	bd70      	pop	{r4, r5, r6, pc}
   8164c:	bd70      	pop	{r4, r5, r6, pc}
   8164e:	bf00      	nop
   81650:	00081b20 	.word	0x00081b20
   81654:	00081b20 	.word	0x00081b20
   81658:	00081b28 	.word	0x00081b28
   8165c:	00081b20 	.word	0x00081b20

00081660 <memset>:
   81660:	b4f0      	push	{r4, r5, r6, r7}
   81662:	0784      	lsls	r4, r0, #30
   81664:	d043      	beq.n	816ee <memset+0x8e>
   81666:	1e54      	subs	r4, r2, #1
   81668:	2a00      	cmp	r2, #0
   8166a:	d03e      	beq.n	816ea <memset+0x8a>
   8166c:	b2cd      	uxtb	r5, r1
   8166e:	4603      	mov	r3, r0
   81670:	e003      	b.n	8167a <memset+0x1a>
   81672:	1e62      	subs	r2, r4, #1
   81674:	2c00      	cmp	r4, #0
   81676:	d038      	beq.n	816ea <memset+0x8a>
   81678:	4614      	mov	r4, r2
   8167a:	f803 5b01 	strb.w	r5, [r3], #1
   8167e:	079a      	lsls	r2, r3, #30
   81680:	d1f7      	bne.n	81672 <memset+0x12>
   81682:	2c03      	cmp	r4, #3
   81684:	d92a      	bls.n	816dc <memset+0x7c>
   81686:	b2cd      	uxtb	r5, r1
   81688:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8168c:	2c0f      	cmp	r4, #15
   8168e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81692:	d915      	bls.n	816c0 <memset+0x60>
   81694:	f1a4 0710 	sub.w	r7, r4, #16
   81698:	093f      	lsrs	r7, r7, #4
   8169a:	f103 0610 	add.w	r6, r3, #16
   8169e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   816a2:	461a      	mov	r2, r3
   816a4:	6015      	str	r5, [r2, #0]
   816a6:	6055      	str	r5, [r2, #4]
   816a8:	6095      	str	r5, [r2, #8]
   816aa:	60d5      	str	r5, [r2, #12]
   816ac:	3210      	adds	r2, #16
   816ae:	42b2      	cmp	r2, r6
   816b0:	d1f8      	bne.n	816a4 <memset+0x44>
   816b2:	f004 040f 	and.w	r4, r4, #15
   816b6:	3701      	adds	r7, #1
   816b8:	2c03      	cmp	r4, #3
   816ba:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   816be:	d90d      	bls.n	816dc <memset+0x7c>
   816c0:	461e      	mov	r6, r3
   816c2:	4622      	mov	r2, r4
   816c4:	3a04      	subs	r2, #4
   816c6:	2a03      	cmp	r2, #3
   816c8:	f846 5b04 	str.w	r5, [r6], #4
   816cc:	d8fa      	bhi.n	816c4 <memset+0x64>
   816ce:	1f22      	subs	r2, r4, #4
   816d0:	f022 0203 	bic.w	r2, r2, #3
   816d4:	3204      	adds	r2, #4
   816d6:	4413      	add	r3, r2
   816d8:	f004 0403 	and.w	r4, r4, #3
   816dc:	b12c      	cbz	r4, 816ea <memset+0x8a>
   816de:	b2c9      	uxtb	r1, r1
   816e0:	441c      	add	r4, r3
   816e2:	f803 1b01 	strb.w	r1, [r3], #1
   816e6:	42a3      	cmp	r3, r4
   816e8:	d1fb      	bne.n	816e2 <memset+0x82>
   816ea:	bcf0      	pop	{r4, r5, r6, r7}
   816ec:	4770      	bx	lr
   816ee:	4614      	mov	r4, r2
   816f0:	4603      	mov	r3, r0
   816f2:	e7c6      	b.n	81682 <memset+0x22>

000816f4 <strlen>:
   816f4:	f020 0103 	bic.w	r1, r0, #3
   816f8:	f010 0003 	ands.w	r0, r0, #3
   816fc:	f1c0 0000 	rsb	r0, r0, #0
   81700:	f851 3b04 	ldr.w	r3, [r1], #4
   81704:	f100 0c04 	add.w	ip, r0, #4
   81708:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8170c:	f06f 0200 	mvn.w	r2, #0
   81710:	bf1c      	itt	ne
   81712:	fa22 f20c 	lsrne.w	r2, r2, ip
   81716:	4313      	orrne	r3, r2
   81718:	f04f 0c01 	mov.w	ip, #1
   8171c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81720:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81724:	eba3 020c 	sub.w	r2, r3, ip
   81728:	ea22 0203 	bic.w	r2, r2, r3
   8172c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81730:	bf04      	itt	eq
   81732:	f851 3b04 	ldreq.w	r3, [r1], #4
   81736:	3004      	addeq	r0, #4
   81738:	d0f4      	beq.n	81724 <strlen+0x30>
   8173a:	f013 0fff 	tst.w	r3, #255	; 0xff
   8173e:	bf1f      	itttt	ne
   81740:	3001      	addne	r0, #1
   81742:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81746:	3001      	addne	r0, #1
   81748:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   8174c:	bf18      	it	ne
   8174e:	3001      	addne	r0, #1
   81750:	4770      	bx	lr
   81752:	bf00      	nop

00081754 <strtok>:
   81754:	4a02      	ldr	r2, [pc, #8]	; (81760 <strtok+0xc>)
   81756:	2301      	movs	r3, #1
   81758:	6812      	ldr	r2, [r2, #0]
   8175a:	325c      	adds	r2, #92	; 0x5c
   8175c:	f000 b802 	b.w	81764 <__strtok_r>
   81760:	20000430 	.word	0x20000430

00081764 <__strtok_r>:
   81764:	b4f0      	push	{r4, r5, r6, r7}
   81766:	b320      	cbz	r0, 817b2 <__strtok_r+0x4e>
   81768:	4607      	mov	r7, r0
   8176a:	f817 6b01 	ldrb.w	r6, [r7], #1
   8176e:	460d      	mov	r5, r1
   81770:	e001      	b.n	81776 <__strtok_r+0x12>
   81772:	42a6      	cmp	r6, r4
   81774:	d016      	beq.n	817a4 <__strtok_r+0x40>
   81776:	f815 4b01 	ldrb.w	r4, [r5], #1
   8177a:	2c00      	cmp	r4, #0
   8177c:	d1f9      	bne.n	81772 <__strtok_r+0xe>
   8177e:	b1ee      	cbz	r6, 817bc <__strtok_r+0x58>
   81780:	463e      	mov	r6, r7
   81782:	f816 5b01 	ldrb.w	r5, [r6], #1
   81786:	460c      	mov	r4, r1
   81788:	e000      	b.n	8178c <__strtok_r+0x28>
   8178a:	b173      	cbz	r3, 817aa <__strtok_r+0x46>
   8178c:	f814 3b01 	ldrb.w	r3, [r4], #1
   81790:	42ab      	cmp	r3, r5
   81792:	d1fa      	bne.n	8178a <__strtok_r+0x26>
   81794:	b15d      	cbz	r5, 817ae <__strtok_r+0x4a>
   81796:	2300      	movs	r3, #0
   81798:	703b      	strb	r3, [r7, #0]
   8179a:	6016      	str	r6, [r2, #0]
   8179c:	4606      	mov	r6, r0
   8179e:	4630      	mov	r0, r6
   817a0:	bcf0      	pop	{r4, r5, r6, r7}
   817a2:	4770      	bx	lr
   817a4:	b163      	cbz	r3, 817c0 <__strtok_r+0x5c>
   817a6:	4638      	mov	r0, r7
   817a8:	e7de      	b.n	81768 <__strtok_r+0x4>
   817aa:	4637      	mov	r7, r6
   817ac:	e7e8      	b.n	81780 <__strtok_r+0x1c>
   817ae:	462e      	mov	r6, r5
   817b0:	e7f3      	b.n	8179a <__strtok_r+0x36>
   817b2:	6810      	ldr	r0, [r2, #0]
   817b4:	2800      	cmp	r0, #0
   817b6:	d1d7      	bne.n	81768 <__strtok_r+0x4>
   817b8:	4606      	mov	r6, r0
   817ba:	e7f0      	b.n	8179e <__strtok_r+0x3a>
   817bc:	6016      	str	r6, [r2, #0]
   817be:	e7ee      	b.n	8179e <__strtok_r+0x3a>
   817c0:	6017      	str	r7, [r2, #0]
   817c2:	4606      	mov	r6, r0
   817c4:	7003      	strb	r3, [r0, #0]
   817c6:	e7ea      	b.n	8179e <__strtok_r+0x3a>

000817c8 <_strtol_r>:
   817c8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   817cc:	4c42      	ldr	r4, [pc, #264]	; (818d8 <_strtol_r+0x110>)
   817ce:	b082      	sub	sp, #8
   817d0:	f8d4 c000 	ldr.w	ip, [r4]
   817d4:	9001      	str	r0, [sp, #4]
   817d6:	460e      	mov	r6, r1
   817d8:	e000      	b.n	817dc <_strtol_r+0x14>
   817da:	4626      	mov	r6, r4
   817dc:	4634      	mov	r4, r6
   817de:	f814 5b01 	ldrb.w	r5, [r4], #1
   817e2:	eb0c 0005 	add.w	r0, ip, r5
   817e6:	7840      	ldrb	r0, [r0, #1]
   817e8:	f000 0008 	and.w	r0, r0, #8
   817ec:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   817f0:	2800      	cmp	r0, #0
   817f2:	d1f2      	bne.n	817da <_strtol_r+0x12>
   817f4:	2d2d      	cmp	r5, #45	; 0x2d
   817f6:	d05b      	beq.n	818b0 <_strtol_r+0xe8>
   817f8:	2d2b      	cmp	r5, #43	; 0x2b
   817fa:	bf04      	itt	eq
   817fc:	7875      	ldrbeq	r5, [r6, #1]
   817fe:	1cb4      	addeq	r4, r6, #2
   81800:	f033 0010 	bics.w	r0, r3, #16
   81804:	d03c      	beq.n	81880 <_strtol_r+0xb8>
   81806:	4699      	mov	r9, r3
   81808:	f1ba 0f00 	cmp.w	sl, #0
   8180c:	bf0c      	ite	eq
   8180e:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
   81812:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
   81816:	fbbb f8f9 	udiv	r8, fp, r9
   8181a:	2700      	movs	r7, #0
   8181c:	fb09 bb18 	mls	fp, r9, r8, fp
   81820:	4638      	mov	r0, r7
   81822:	e00c      	b.n	8183e <_strtol_r+0x76>
   81824:	3d30      	subs	r5, #48	; 0x30
   81826:	42ab      	cmp	r3, r5
   81828:	dd19      	ble.n	8185e <_strtol_r+0x96>
   8182a:	1c7e      	adds	r6, r7, #1
   8182c:	d005      	beq.n	8183a <_strtol_r+0x72>
   8182e:	4540      	cmp	r0, r8
   81830:	d823      	bhi.n	8187a <_strtol_r+0xb2>
   81832:	d020      	beq.n	81876 <_strtol_r+0xae>
   81834:	fb09 5000 	mla	r0, r9, r0, r5
   81838:	2701      	movs	r7, #1
   8183a:	f814 5b01 	ldrb.w	r5, [r4], #1
   8183e:	eb0c 0605 	add.w	r6, ip, r5
   81842:	7876      	ldrb	r6, [r6, #1]
   81844:	f016 0f04 	tst.w	r6, #4
   81848:	d1ec      	bne.n	81824 <_strtol_r+0x5c>
   8184a:	f016 0603 	ands.w	r6, r6, #3
   8184e:	d006      	beq.n	8185e <_strtol_r+0x96>
   81850:	2e01      	cmp	r6, #1
   81852:	bf14      	ite	ne
   81854:	2657      	movne	r6, #87	; 0x57
   81856:	2637      	moveq	r6, #55	; 0x37
   81858:	1bad      	subs	r5, r5, r6
   8185a:	42ab      	cmp	r3, r5
   8185c:	dce5      	bgt.n	8182a <_strtol_r+0x62>
   8185e:	1c7b      	adds	r3, r7, #1
   81860:	d015      	beq.n	8188e <_strtol_r+0xc6>
   81862:	f1ba 0f00 	cmp.w	sl, #0
   81866:	d121      	bne.n	818ac <_strtol_r+0xe4>
   81868:	b10a      	cbz	r2, 8186e <_strtol_r+0xa6>
   8186a:	b9ef      	cbnz	r7, 818a8 <_strtol_r+0xe0>
   8186c:	6011      	str	r1, [r2, #0]
   8186e:	b002      	add	sp, #8
   81870:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81874:	4770      	bx	lr
   81876:	455d      	cmp	r5, fp
   81878:	dddc      	ble.n	81834 <_strtol_r+0x6c>
   8187a:	f04f 37ff 	mov.w	r7, #4294967295
   8187e:	e7dc      	b.n	8183a <_strtol_r+0x72>
   81880:	2d30      	cmp	r5, #48	; 0x30
   81882:	d01a      	beq.n	818ba <_strtol_r+0xf2>
   81884:	2b00      	cmp	r3, #0
   81886:	d1be      	bne.n	81806 <_strtol_r+0x3e>
   81888:	230a      	movs	r3, #10
   8188a:	4699      	mov	r9, r3
   8188c:	e7bc      	b.n	81808 <_strtol_r+0x40>
   8188e:	9901      	ldr	r1, [sp, #4]
   81890:	f1ba 0f00 	cmp.w	sl, #0
   81894:	f04f 0322 	mov.w	r3, #34	; 0x22
   81898:	bf0c      	ite	eq
   8189a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8189e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   818a2:	600b      	str	r3, [r1, #0]
   818a4:	2a00      	cmp	r2, #0
   818a6:	d0e2      	beq.n	8186e <_strtol_r+0xa6>
   818a8:	1e61      	subs	r1, r4, #1
   818aa:	e7df      	b.n	8186c <_strtol_r+0xa4>
   818ac:	4240      	negs	r0, r0
   818ae:	e7db      	b.n	81868 <_strtol_r+0xa0>
   818b0:	1cb4      	adds	r4, r6, #2
   818b2:	7875      	ldrb	r5, [r6, #1]
   818b4:	f04f 0a01 	mov.w	sl, #1
   818b8:	e7a2      	b.n	81800 <_strtol_r+0x38>
   818ba:	7820      	ldrb	r0, [r4, #0]
   818bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   818c0:	2858      	cmp	r0, #88	; 0x58
   818c2:	d003      	beq.n	818cc <_strtol_r+0x104>
   818c4:	2b00      	cmp	r3, #0
   818c6:	d19e      	bne.n	81806 <_strtol_r+0x3e>
   818c8:	2308      	movs	r3, #8
   818ca:	e79c      	b.n	81806 <_strtol_r+0x3e>
   818cc:	2310      	movs	r3, #16
   818ce:	7865      	ldrb	r5, [r4, #1]
   818d0:	4699      	mov	r9, r3
   818d2:	3402      	adds	r4, #2
   818d4:	e798      	b.n	81808 <_strtol_r+0x40>
   818d6:	bf00      	nop
   818d8:	20000434 	.word	0x20000434

000818dc <strtol>:
   818dc:	b430      	push	{r4, r5}
   818de:	4c04      	ldr	r4, [pc, #16]	; (818f0 <strtol+0x14>)
   818e0:	460d      	mov	r5, r1
   818e2:	4613      	mov	r3, r2
   818e4:	4601      	mov	r1, r0
   818e6:	462a      	mov	r2, r5
   818e8:	6820      	ldr	r0, [r4, #0]
   818ea:	bc30      	pop	{r4, r5}
   818ec:	f7ff bf6c 	b.w	817c8 <_strtol_r>
   818f0:	20000430 	.word	0x20000430

000818f4 <register_fini>:
   818f4:	4b02      	ldr	r3, [pc, #8]	; (81900 <register_fini+0xc>)
   818f6:	b113      	cbz	r3, 818fe <register_fini+0xa>
   818f8:	4802      	ldr	r0, [pc, #8]	; (81904 <register_fini+0x10>)
   818fa:	f000 b805 	b.w	81908 <atexit>
   818fe:	4770      	bx	lr
   81900:	00000000 	.word	0x00000000
   81904:	00081915 	.word	0x00081915

00081908 <atexit>:
   81908:	4601      	mov	r1, r0
   8190a:	2000      	movs	r0, #0
   8190c:	4602      	mov	r2, r0
   8190e:	4603      	mov	r3, r0
   81910:	f000 b818 	b.w	81944 <__register_exitproc>

00081914 <__libc_fini_array>:
   81914:	b538      	push	{r3, r4, r5, lr}
   81916:	4d09      	ldr	r5, [pc, #36]	; (8193c <__libc_fini_array+0x28>)
   81918:	4c09      	ldr	r4, [pc, #36]	; (81940 <__libc_fini_array+0x2c>)
   8191a:	1b64      	subs	r4, r4, r5
   8191c:	10a4      	asrs	r4, r4, #2
   8191e:	bf18      	it	ne
   81920:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   81924:	d005      	beq.n	81932 <__libc_fini_array+0x1e>
   81926:	3c01      	subs	r4, #1
   81928:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8192c:	4798      	blx	r3
   8192e:	2c00      	cmp	r4, #0
   81930:	d1f9      	bne.n	81926 <__libc_fini_array+0x12>
   81932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81936:	f000 b8f7 	b.w	81b28 <_fini>
   8193a:	bf00      	nop
   8193c:	00081b34 	.word	0x00081b34
   81940:	00081b38 	.word	0x00081b38

00081944 <__register_exitproc>:
   81944:	b5f0      	push	{r4, r5, r6, r7, lr}
   81946:	4c27      	ldr	r4, [pc, #156]	; (819e4 <__register_exitproc+0xa0>)
   81948:	b085      	sub	sp, #20
   8194a:	6826      	ldr	r6, [r4, #0]
   8194c:	4607      	mov	r7, r0
   8194e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   81952:	2c00      	cmp	r4, #0
   81954:	d040      	beq.n	819d8 <__register_exitproc+0x94>
   81956:	6865      	ldr	r5, [r4, #4]
   81958:	2d1f      	cmp	r5, #31
   8195a:	dd1e      	ble.n	8199a <__register_exitproc+0x56>
   8195c:	4822      	ldr	r0, [pc, #136]	; (819e8 <__register_exitproc+0xa4>)
   8195e:	b918      	cbnz	r0, 81968 <__register_exitproc+0x24>
   81960:	f04f 30ff 	mov.w	r0, #4294967295
   81964:	b005      	add	sp, #20
   81966:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81968:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8196c:	9103      	str	r1, [sp, #12]
   8196e:	9202      	str	r2, [sp, #8]
   81970:	9301      	str	r3, [sp, #4]
   81972:	f3af 8000 	nop.w
   81976:	9903      	ldr	r1, [sp, #12]
   81978:	4604      	mov	r4, r0
   8197a:	9a02      	ldr	r2, [sp, #8]
   8197c:	9b01      	ldr	r3, [sp, #4]
   8197e:	2800      	cmp	r0, #0
   81980:	d0ee      	beq.n	81960 <__register_exitproc+0x1c>
   81982:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   81986:	2000      	movs	r0, #0
   81988:	6025      	str	r5, [r4, #0]
   8198a:	6060      	str	r0, [r4, #4]
   8198c:	4605      	mov	r5, r0
   8198e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81992:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   81996:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8199a:	b93f      	cbnz	r7, 819ac <__register_exitproc+0x68>
   8199c:	1c6b      	adds	r3, r5, #1
   8199e:	2000      	movs	r0, #0
   819a0:	3502      	adds	r5, #2
   819a2:	6063      	str	r3, [r4, #4]
   819a4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   819a8:	b005      	add	sp, #20
   819aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   819ac:	2601      	movs	r6, #1
   819ae:	40ae      	lsls	r6, r5
   819b0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   819b4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   819b8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   819bc:	2f02      	cmp	r7, #2
   819be:	ea42 0206 	orr.w	r2, r2, r6
   819c2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   819c6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   819ca:	d1e7      	bne.n	8199c <__register_exitproc+0x58>
   819cc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   819d0:	431e      	orrs	r6, r3
   819d2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   819d6:	e7e1      	b.n	8199c <__register_exitproc+0x58>
   819d8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   819dc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   819e0:	e7b9      	b.n	81956 <__register_exitproc+0x12>
   819e2:	bf00      	nop
   819e4:	00081a0c 	.word	0x00081a0c
   819e8:	00000000 	.word	0x00000000
   819ec:	00000023 	.word	0x00000023
   819f0:	65657053 	.word	0x65657053
   819f4:	54532064 	.word	0x54532064
   819f8:	0000203a 	.word	0x0000203a
   819fc:	65657053 	.word	0x65657053
   81a00:	52442064 	.word	0x52442064
   81a04:	0000203a 	.word	0x0000203a
   81a08:	00000043 	.word	0x00000043

00081a0c <_global_impure_ptr>:
   81a0c:	20000008                                ... 

00081a10 <_ctype_>:
   81a10:	20202000 20202020 28282020 20282828     .         ((((( 
   81a20:	20202020 20202020 20202020 20202020                     
   81a30:	10108820 10101010 10101010 10101010      ...............
   81a40:	04040410 04040404 10040404 10101010     ................
   81a50:	41411010 41414141 01010101 01010101     ..AAAAAA........
   81a60:	01010101 01010101 01010101 10101010     ................
   81a70:	42421010 42424242 02020202 02020202     ..BBBBBB........
   81a80:	02020202 02020202 02020202 10101010     ................
   81a90:	00000020 00000000 00000000 00000000      ...............
	...

00081b14 <_init>:
   81b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b16:	bf00      	nop
   81b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81b1a:	bc08      	pop	{r3}
   81b1c:	469e      	mov	lr, r3
   81b1e:	4770      	bx	lr

00081b20 <__init_array_start>:
   81b20:	000818f5 	.word	0x000818f5

00081b24 <__frame_dummy_init_array_entry>:
   81b24:	00080119                                ....

00081b28 <_fini>:
   81b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b2a:	bf00      	nop
   81b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81b2e:	bc08      	pop	{r3}
   81b30:	469e      	mov	lr, r3
   81b32:	4770      	bx	lr

00081b34 <__fini_array_start>:
   81b34:	000800f5 	.word	0x000800f5
