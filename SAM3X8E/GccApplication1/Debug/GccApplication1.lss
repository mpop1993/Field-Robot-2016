
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012c4  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  000812c4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  20000430  000816f4  00010430  2**2
                  ALLOC
  3 .stack        00000400  20000458  0008171c  00010430  2**0
                  ALLOC
  4 .heap         00000200  20000858  00081b1c  00010430  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010459  2**0
                  CONTENTS, READONLY
  7 .debug_info   00003ef3  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000916  00000000  00000000  000143a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000514  00000000  00000000  00014cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000190  00000000  00000000  000151d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00015361  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001117b  00000000  00000000  00015471  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004153  00000000  00000000  000265ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052215  00000000  00000000  0002a73f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000440  00000000  00000000  0007c954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20000858 	.word	0x20000858
   80004:	00080149 	.word	0x00080149
   80008:	000801d1 	.word	0x000801d1
   8000c:	000801d1 	.word	0x000801d1
   80010:	000801d1 	.word	0x000801d1
   80014:	000801d1 	.word	0x000801d1
   80018:	000801d1 	.word	0x000801d1
	...
   8002c:	000801d1 	.word	0x000801d1
   80030:	000801d1 	.word	0x000801d1
   80034:	00000000 	.word	0x00000000
   80038:	000801d1 	.word	0x000801d1
   8003c:	000801d1 	.word	0x000801d1
   80040:	000801d1 	.word	0x000801d1
   80044:	000801d1 	.word	0x000801d1
   80048:	000801d1 	.word	0x000801d1
   8004c:	000801d1 	.word	0x000801d1
   80050:	000801d1 	.word	0x000801d1
   80054:	000801d1 	.word	0x000801d1
   80058:	000801d1 	.word	0x000801d1
   8005c:	000801d1 	.word	0x000801d1
   80060:	00080931 	.word	0x00080931
   80064:	000801d1 	.word	0x000801d1
   80068:	00000000 	.word	0x00000000
   8006c:	000801d1 	.word	0x000801d1
   80070:	000802a9 	.word	0x000802a9
   80074:	000801d1 	.word	0x000801d1
   80078:	000802d5 	.word	0x000802d5
	...
   80084:	000801d1 	.word	0x000801d1
   80088:	000801d1 	.word	0x000801d1
   8008c:	000801d1 	.word	0x000801d1
   80090:	000801d1 	.word	0x000801d1
   80094:	000801d1 	.word	0x000801d1
   80098:	000801d1 	.word	0x000801d1
   8009c:	000801d1 	.word	0x000801d1
   800a0:	000801d1 	.word	0x000801d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000801d1 	.word	0x000801d1
   800ac:	00080865 	.word	0x00080865
   800b0:	000801d1 	.word	0x000801d1
   800b4:	000801d1 	.word	0x000801d1
   800b8:	000801d1 	.word	0x000801d1
   800bc:	000801d1 	.word	0x000801d1
   800c0:	000801d1 	.word	0x000801d1
   800c4:	000801d1 	.word	0x000801d1
   800c8:	000801d1 	.word	0x000801d1
   800cc:	000801d1 	.word	0x000801d1
   800d0:	000801d1 	.word	0x000801d1
   800d4:	000801d1 	.word	0x000801d1
   800d8:	000801d1 	.word	0x000801d1
   800dc:	000801d1 	.word	0x000801d1
   800e0:	000801d1 	.word	0x000801d1
   800e4:	000801d1 	.word	0x000801d1
   800e8:	000801d1 	.word	0x000801d1
   800ec:	000801d1 	.word	0x000801d1
   800f0:	000801d1 	.word	0x000801d1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000430 	.word	0x20000430
   80110:	00000000 	.word	0x00000000
   80114:	000812c4 	.word	0x000812c4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000812c4 	.word	0x000812c4
   8013c:	20000434 	.word	0x20000434
   80140:	000812c4 	.word	0x000812c4
   80144:	00000000 	.word	0x00000000

00080148 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   8014e:	4b17      	ldr	r3, [pc, #92]	; (801ac <Reset_Handler+0x64>)
   80150:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   80152:	4b17      	ldr	r3, [pc, #92]	; (801b0 <Reset_Handler+0x68>)
   80154:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   80156:	687a      	ldr	r2, [r7, #4]
   80158:	683b      	ldr	r3, [r7, #0]
   8015a:	429a      	cmp	r2, r3
   8015c:	d00c      	beq.n	80178 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   8015e:	e007      	b.n	80170 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   80160:	683b      	ldr	r3, [r7, #0]
   80162:	1d1a      	adds	r2, r3, #4
   80164:	603a      	str	r2, [r7, #0]
   80166:	687a      	ldr	r2, [r7, #4]
   80168:	1d11      	adds	r1, r2, #4
   8016a:	6079      	str	r1, [r7, #4]
   8016c:	6812      	ldr	r2, [r2, #0]
   8016e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   80170:	683a      	ldr	r2, [r7, #0]
   80172:	4b10      	ldr	r3, [pc, #64]	; (801b4 <Reset_Handler+0x6c>)
   80174:	429a      	cmp	r2, r3
   80176:	d3f3      	bcc.n	80160 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80178:	4b0f      	ldr	r3, [pc, #60]	; (801b8 <Reset_Handler+0x70>)
   8017a:	603b      	str	r3, [r7, #0]
   8017c:	e004      	b.n	80188 <Reset_Handler+0x40>
                *pDest++ = 0;
   8017e:	683b      	ldr	r3, [r7, #0]
   80180:	1d1a      	adds	r2, r3, #4
   80182:	603a      	str	r2, [r7, #0]
   80184:	2200      	movs	r2, #0
   80186:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80188:	683a      	ldr	r2, [r7, #0]
   8018a:	4b0c      	ldr	r3, [pc, #48]	; (801bc <Reset_Handler+0x74>)
   8018c:	429a      	cmp	r2, r3
   8018e:	d3f6      	bcc.n	8017e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   80190:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x78>)
   80192:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80194:	4a0b      	ldr	r2, [pc, #44]	; (801c4 <Reset_Handler+0x7c>)
   80196:	687b      	ldr	r3, [r7, #4]
   80198:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8019c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   801a0:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   801a2:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x80>)
   801a4:	4798      	blx	r3

        /* Branch to main function */
        main();
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x84>)
   801a8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   801aa:	e7fe      	b.n	801aa <Reset_Handler+0x62>
   801ac:	000812c4 	.word	0x000812c4
   801b0:	20000000 	.word	0x20000000
   801b4:	20000430 	.word	0x20000430
   801b8:	20000430 	.word	0x20000430
   801bc:	20000458 	.word	0x20000458
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	00081151 	.word	0x00081151
   801cc:	00080301 	.word	0x00080301

000801d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   801d0:	b480      	push	{r7}
   801d2:	af00      	add	r7, sp, #0
        while (1) {
        }
   801d4:	e7fe      	b.n	801d4 <Dummy_Handler+0x4>
   801d6:	bf00      	nop

000801d8 <SystemInit>:
/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
   801d8:	b480      	push	{r7}
   801da:	af00      	add	r7, sp, #0
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801dc:	4b2a      	ldr	r3, [pc, #168]	; (80288 <SystemInit+0xb0>)
   801de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801e2:	601a      	str	r2, [r3, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801e4:	4b29      	ldr	r3, [pc, #164]	; (8028c <SystemInit+0xb4>)
   801e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801ea:	601a      	str	r2, [r3, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801ec:	4b28      	ldr	r3, [pc, #160]	; (80290 <SystemInit+0xb8>)
   801ee:	6a1b      	ldr	r3, [r3, #32]
   801f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   801f4:	2b00      	cmp	r3, #0
   801f6:	d109      	bne.n	8020c <SystemInit+0x34>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801f8:	4b25      	ldr	r3, [pc, #148]	; (80290 <SystemInit+0xb8>)
   801fa:	4a26      	ldr	r2, [pc, #152]	; (80294 <SystemInit+0xbc>)
   801fc:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801fe:	bf00      	nop
   80200:	4b23      	ldr	r3, [pc, #140]	; (80290 <SystemInit+0xb8>)
   80202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80204:	f003 0301 	and.w	r3, r3, #1
   80208:	2b00      	cmp	r3, #0
   8020a:	d0f9      	beq.n	80200 <SystemInit+0x28>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8020c:	4b20      	ldr	r3, [pc, #128]	; (80290 <SystemInit+0xb8>)
   8020e:	4a22      	ldr	r2, [pc, #136]	; (80298 <SystemInit+0xc0>)
   80210:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80212:	bf00      	nop
   80214:	4b1e      	ldr	r3, [pc, #120]	; (80290 <SystemInit+0xb8>)
   80216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8021c:	2b00      	cmp	r3, #0
   8021e:	d0f9      	beq.n	80214 <SystemInit+0x3c>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80220:	4b1b      	ldr	r3, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80222:	4a1b      	ldr	r2, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80224:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80226:	f022 0203 	bic.w	r2, r2, #3
   8022a:	f042 0201 	orr.w	r2, r2, #1
   8022e:	631a      	str	r2, [r3, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80230:	bf00      	nop
   80232:	4b17      	ldr	r3, [pc, #92]	; (80290 <SystemInit+0xb8>)
   80234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80236:	f003 0308 	and.w	r3, r3, #8
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f9      	beq.n	80232 <SystemInit+0x5a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8023e:	4b14      	ldr	r3, [pc, #80]	; (80290 <SystemInit+0xb8>)
   80240:	4a16      	ldr	r2, [pc, #88]	; (8029c <SystemInit+0xc4>)
   80242:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80244:	bf00      	nop
   80246:	4b12      	ldr	r3, [pc, #72]	; (80290 <SystemInit+0xb8>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f003 0302 	and.w	r3, r3, #2
   8024e:	2b00      	cmp	r3, #0
   80250:	d0f9      	beq.n	80246 <SystemInit+0x6e>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80252:	4b0f      	ldr	r3, [pc, #60]	; (80290 <SystemInit+0xb8>)
   80254:	2211      	movs	r2, #17
   80256:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80258:	bf00      	nop
   8025a:	4b0d      	ldr	r3, [pc, #52]	; (80290 <SystemInit+0xb8>)
   8025c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8025e:	f003 0308 	and.w	r3, r3, #8
   80262:	2b00      	cmp	r3, #0
   80264:	d0f9      	beq.n	8025a <SystemInit+0x82>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80266:	4b0a      	ldr	r3, [pc, #40]	; (80290 <SystemInit+0xb8>)
   80268:	2212      	movs	r2, #18
   8026a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8026c:	bf00      	nop
   8026e:	4b08      	ldr	r3, [pc, #32]	; (80290 <SystemInit+0xb8>)
   80270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80272:	f003 0308 	and.w	r3, r3, #8
   80276:	2b00      	cmp	r3, #0
   80278:	d0f9      	beq.n	8026e <SystemInit+0x96>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8027a:	4b09      	ldr	r3, [pc, #36]	; (802a0 <SystemInit+0xc8>)
   8027c:	4a09      	ldr	r2, [pc, #36]	; (802a4 <SystemInit+0xcc>)
   8027e:	601a      	str	r2, [r3, #0]
}
   80280:	46bd      	mov	sp, r7
   80282:	f85d 7b04 	ldr.w	r7, [sp], #4
   80286:	4770      	bx	lr
   80288:	400e0a00 	.word	0x400e0a00
   8028c:	400e0c00 	.word	0x400e0c00
   80290:	400e0600 	.word	0x400e0600
   80294:	00370809 	.word	0x00370809
   80298:	01370809 	.word	0x01370809
   8029c:	200d3f01 	.word	0x200d3f01
   802a0:	20000000 	.word	0x20000000
   802a4:	0501bd00 	.word	0x0501bd00

000802a8 <PIOB_Handler>:


// *************************************************************************************************************************************

void PIOB_Handler()
{
   802a8:	b480      	push	{r7}
   802aa:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTB we need to
	//  check if PB27 is the one triggering the interrupt.
	if((PIOB->PIO_ISR & PIO_PB27)==PIO_PB27){
   802ac:	4b07      	ldr	r3, [pc, #28]	; (802cc <PIOB_Handler+0x24>)
   802ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   802b4:	2b00      	cmp	r3, #0
   802b6:	d004      	beq.n	802c2 <PIOB_Handler+0x1a>
		iEncoder_ST++;
   802b8:	4b05      	ldr	r3, [pc, #20]	; (802d0 <PIOB_Handler+0x28>)
   802ba:	681b      	ldr	r3, [r3, #0]
   802bc:	1c5a      	adds	r2, r3, #1
   802be:	4b04      	ldr	r3, [pc, #16]	; (802d0 <PIOB_Handler+0x28>)
   802c0:	601a      	str	r2, [r3, #0]
	}
}
   802c2:	46bd      	mov	sp, r7
   802c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   802c8:	4770      	bx	lr
   802ca:	bf00      	nop
   802cc:	400e1000 	.word	0x400e1000
   802d0:	20000450 	.word	0x20000450

000802d4 <PIOD_Handler>:

void PIOD_Handler()
{
   802d4:	b480      	push	{r7}
   802d6:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTD we need to
	//  check if PD8 is the one triggering the interrupt.
	if((PIOD->PIO_ISR & PIO_PD8)==PIO_PD8){
   802d8:	4b07      	ldr	r3, [pc, #28]	; (802f8 <PIOD_Handler+0x24>)
   802da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
   802e0:	2b00      	cmp	r3, #0
   802e2:	d004      	beq.n	802ee <PIOD_Handler+0x1a>
		iEncoder_DR++;
   802e4:	4b05      	ldr	r3, [pc, #20]	; (802fc <PIOD_Handler+0x28>)
   802e6:	681b      	ldr	r3, [r3, #0]
   802e8:	1c5a      	adds	r2, r3, #1
   802ea:	4b04      	ldr	r3, [pc, #16]	; (802fc <PIOD_Handler+0x28>)
   802ec:	601a      	str	r2, [r3, #0]
	}
}
   802ee:	46bd      	mov	sp, r7
   802f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   802f4:	4770      	bx	lr
   802f6:	bf00      	nop
   802f8:	400e1400 	.word	0x400e1400
   802fc:	20000454 	.word	0x20000454

00080300 <main>:
void selfTest(void);

// *************************************************************************************************************************************

int main(void)
{
   80300:	b580      	push	{r7, lr}
   80302:	af00      	add	r7, sp, #0
    /* Initialize the SAM system */
    SystemInit();
   80304:	4b1c      	ldr	r3, [pc, #112]	; (80378 <main+0x78>)
   80306:	4798      	blx	r3
	/* Initialize pins */
	Pin_Configuration();
   80308:	4b1c      	ldr	r3, [pc, #112]	; (8037c <main+0x7c>)
   8030a:	4798      	blx	r3
	/* Initialize PWM generator */
	InitPWMController_MCLK(); 
   8030c:	4b1c      	ldr	r3, [pc, #112]	; (80380 <main+0x80>)
   8030e:	4798      	blx	r3
	/* Initialize timers */
	Configure_Timers();
   80310:	4b1c      	ldr	r3, [pc, #112]	; (80384 <main+0x84>)
   80312:	4798      	blx	r3
	/* Configre UART */
	//Configure_UART();
	
	
	/* Disable watchdog */
	WDT->WDT_MR |=  WDT_MR_WDDIS;
   80314:	4b1c      	ldr	r3, [pc, #112]	; (80388 <main+0x88>)
   80316:	4a1c      	ldr	r2, [pc, #112]	; (80388 <main+0x88>)
   80318:	6852      	ldr	r2, [r2, #4]
   8031a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   8031e:	605a      	str	r2, [r3, #4]
	
	/* Run initialization sequence for motor drivers */
	Init_Motors();
   80320:	4b1a      	ldr	r3, [pc, #104]	; (8038c <main+0x8c>)
   80322:	4798      	blx	r3

	//selfTest();
	
	iEncoder_DR = 0;
   80324:	4b1a      	ldr	r3, [pc, #104]	; (80390 <main+0x90>)
   80326:	2200      	movs	r2, #0
   80328:	601a      	str	r2, [r3, #0]
	iEncoder_ST = 0;
   8032a:	4b1a      	ldr	r3, [pc, #104]	; (80394 <main+0x94>)
   8032c:	2200      	movs	r2, #0
   8032e:	601a      	str	r2, [r3, #0]
	WriteMotors(30,30);
   80330:	201e      	movs	r0, #30
   80332:	211e      	movs	r1, #30
   80334:	4b18      	ldr	r3, [pc, #96]	; (80398 <main+0x98>)
   80336:	4798      	blx	r3
	
    while (1) 
    {
		if(iEncoder_DR>300){
   80338:	4b15      	ldr	r3, [pc, #84]	; (80390 <main+0x90>)
   8033a:	681b      	ldr	r3, [r3, #0]
   8033c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   80340:	d918      	bls.n	80374 <main+0x74>
			iEncoder_DR = 0;
   80342:	4b13      	ldr	r3, [pc, #76]	; (80390 <main+0x90>)
   80344:	2200      	movs	r2, #0
   80346:	601a      	str	r2, [r3, #0]
			WriteMotors(-100,-100);
   80348:	f06f 0063 	mvn.w	r0, #99	; 0x63
   8034c:	f06f 0163 	mvn.w	r1, #99	; 0x63
   80350:	4b11      	ldr	r3, [pc, #68]	; (80398 <main+0x98>)
   80352:	4798      	blx	r3
			delay_ms(3);
   80354:	2003      	movs	r0, #3
   80356:	4b11      	ldr	r3, [pc, #68]	; (8039c <main+0x9c>)
   80358:	4798      	blx	r3
			WriteMotors(0,0);
   8035a:	2000      	movs	r0, #0
   8035c:	2100      	movs	r1, #0
   8035e:	4b0e      	ldr	r3, [pc, #56]	; (80398 <main+0x98>)
   80360:	4798      	blx	r3
			delay_ms(1500);
   80362:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80366:	4b0d      	ldr	r3, [pc, #52]	; (8039c <main+0x9c>)
   80368:	4798      	blx	r3
			WriteMotors(30,30);
   8036a:	201e      	movs	r0, #30
   8036c:	211e      	movs	r1, #30
   8036e:	4b0a      	ldr	r3, [pc, #40]	; (80398 <main+0x98>)
   80370:	4798      	blx	r3
		}
	}
   80372:	e7e1      	b.n	80338 <main+0x38>
   80374:	e7e0      	b.n	80338 <main+0x38>
   80376:	bf00      	nop
   80378:	000801d9 	.word	0x000801d9
   8037c:	000803d1 	.word	0x000803d1
   80380:	000805a9 	.word	0x000805a9
   80384:	00080809 	.word	0x00080809
   80388:	400e1a50 	.word	0x400e1a50
   8038c:	00080761 	.word	0x00080761
   80390:	20000454 	.word	0x20000454
   80394:	20000450 	.word	0x20000450
   80398:	000806a9 	.word	0x000806a9
   8039c:	00080889 	.word	0x00080889

000803a0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   803a0:	b480      	push	{r7}
   803a2:	b083      	sub	sp, #12
   803a4:	af00      	add	r7, sp, #0
   803a6:	4603      	mov	r3, r0
   803a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   803aa:	4b08      	ldr	r3, [pc, #32]	; (803cc <NVIC_EnableIRQ+0x2c>)
   803ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
   803b0:	0952      	lsrs	r2, r2, #5
   803b2:	79f9      	ldrb	r1, [r7, #7]
   803b4:	f001 011f 	and.w	r1, r1, #31
   803b8:	2001      	movs	r0, #1
   803ba:	fa00 f101 	lsl.w	r1, r0, r1
   803be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803c2:	370c      	adds	r7, #12
   803c4:	46bd      	mov	sp, r7
   803c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   803ca:	4770      	bx	lr
   803cc:	e000e100 	.word	0xe000e100

000803d0 <Pin_Configuration>:
// ----- Defines
#define _BV(bit) (0x1u << bit)

// *************************************************************************************************************************************
void Pin_Configuration()
{
   803d0:	b580      	push	{r7, lr}
   803d2:	af00      	add	r7, sp, #0
	// Enable clock for line C
		PMC->PMC_PCER0 |= _BV(ID_PIOC);
   803d4:	4b6f      	ldr	r3, [pc, #444]	; (80594 <Pin_Configuration+0x1c4>)
   803d6:	4a6f      	ldr	r2, [pc, #444]	; (80594 <Pin_Configuration+0x1c4>)
   803d8:	6912      	ldr	r2, [r2, #16]
   803da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   803de:	611a      	str	r2, [r3, #16]
	// Enable clock for line B
		PMC->PMC_PCER0 |= _BV(ID_PIOB);
   803e0:	4b6c      	ldr	r3, [pc, #432]	; (80594 <Pin_Configuration+0x1c4>)
   803e2:	4a6c      	ldr	r2, [pc, #432]	; (80594 <Pin_Configuration+0x1c4>)
   803e4:	6912      	ldr	r2, [r2, #16]
   803e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   803ea:	611a      	str	r2, [r3, #16]
	// Enable clock for line D
		PMC->PMC_PCER0 |= _BV(ID_PIOD);
   803ec:	4b69      	ldr	r3, [pc, #420]	; (80594 <Pin_Configuration+0x1c4>)
   803ee:	4a69      	ldr	r2, [pc, #420]	; (80594 <Pin_Configuration+0x1c4>)
   803f0:	6912      	ldr	r2, [r2, #16]
   803f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   803f6:	611a      	str	r2, [r3, #16]

	// Set pin 13[B27] as input for encoder data - left[ST]
		PIOB -> PIO_PER |= PIO_PB27;
   803f8:	4b67      	ldr	r3, [pc, #412]	; (80598 <Pin_Configuration+0x1c8>)
   803fa:	4a67      	ldr	r2, [pc, #412]	; (80598 <Pin_Configuration+0x1c8>)
   803fc:	6812      	ldr	r2, [r2, #0]
   803fe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80402:	601a      	str	r2, [r3, #0]
		PIOB -> PIO_ODR |= PIO_PB27;
   80404:	4b64      	ldr	r3, [pc, #400]	; (80598 <Pin_Configuration+0x1c8>)
   80406:	4a64      	ldr	r2, [pc, #400]	; (80598 <Pin_Configuration+0x1c8>)
   80408:	6952      	ldr	r2, [r2, #20]
   8040a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8040e:	615a      	str	r2, [r3, #20]
		PIOB -> PIO_PUDR |= PIO_PB27;
   80410:	4b61      	ldr	r3, [pc, #388]	; (80598 <Pin_Configuration+0x1c8>)
   80412:	4a61      	ldr	r2, [pc, #388]	; (80598 <Pin_Configuration+0x1c8>)
   80414:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80416:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8041a:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOB->PIO_AIMER |= PIO_PB27;
   8041c:	4b5e      	ldr	r3, [pc, #376]	; (80598 <Pin_Configuration+0x1c8>)
   8041e:	4a5e      	ldr	r2, [pc, #376]	; (80598 <Pin_Configuration+0x1c8>)
   80420:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   80424:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80428:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOB->PIO_ESR |= PIO_PB27;
   8042c:	4b5a      	ldr	r3, [pc, #360]	; (80598 <Pin_Configuration+0x1c8>)
   8042e:	4a5a      	ldr	r2, [pc, #360]	; (80598 <Pin_Configuration+0x1c8>)
   80430:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   80434:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80438:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Falling Edge/Low Level Select Register
		PIOB->PIO_REHLSR |= PIO_PB27;
   8043c:	4b56      	ldr	r3, [pc, #344]	; (80598 <Pin_Configuration+0x1c8>)
   8043e:	4a56      	ldr	r2, [pc, #344]	; (80598 <Pin_Configuration+0x1c8>)
   80440:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   80444:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80448:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTB.PB27
		PIOB->PIO_IER |= PIO_PB27;
   8044c:	4b52      	ldr	r3, [pc, #328]	; (80598 <Pin_Configuration+0x1c8>)
   8044e:	4a52      	ldr	r2, [pc, #328]	; (80598 <Pin_Configuration+0x1c8>)
   80450:	6c12      	ldr	r2, [r2, #64]	; 0x40
   80452:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80456:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOB_IRQn);
   80458:	200c      	movs	r0, #12
   8045a:	4b50      	ldr	r3, [pc, #320]	; (8059c <Pin_Configuration+0x1cc>)
   8045c:	4798      	blx	r3
	
	// Set pin 12[D8] as input for encoder data - right[DR]
		PIOD -> PIO_PER |= PIO_PD8;
   8045e:	4b50      	ldr	r3, [pc, #320]	; (805a0 <Pin_Configuration+0x1d0>)
   80460:	4a4f      	ldr	r2, [pc, #316]	; (805a0 <Pin_Configuration+0x1d0>)
   80462:	6812      	ldr	r2, [r2, #0]
   80464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80468:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_ODR |= PIO_PD8;
   8046a:	4b4d      	ldr	r3, [pc, #308]	; (805a0 <Pin_Configuration+0x1d0>)
   8046c:	4a4c      	ldr	r2, [pc, #304]	; (805a0 <Pin_Configuration+0x1d0>)
   8046e:	6952      	ldr	r2, [r2, #20]
   80470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80474:	615a      	str	r2, [r3, #20]
		PIOD -> PIO_PUDR |= PIO_PD8;
   80476:	4b4a      	ldr	r3, [pc, #296]	; (805a0 <Pin_Configuration+0x1d0>)
   80478:	4a49      	ldr	r2, [pc, #292]	; (805a0 <Pin_Configuration+0x1d0>)
   8047a:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8047c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80480:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOD -> PIO_AIMER |= PIO_PD8;
   80482:	4b47      	ldr	r3, [pc, #284]	; (805a0 <Pin_Configuration+0x1d0>)
   80484:	4a46      	ldr	r2, [pc, #280]	; (805a0 <Pin_Configuration+0x1d0>)
   80486:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   8048a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8048e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOD -> PIO_ESR |= PIO_PD8;
   80492:	4b43      	ldr	r3, [pc, #268]	; (805a0 <Pin_Configuration+0x1d0>)
   80494:	4a42      	ldr	r2, [pc, #264]	; (805a0 <Pin_Configuration+0x1d0>)
   80496:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   8049a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8049e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Falling Edge/Low Level Select Register
		PIOD -> PIO_REHLSR |= PIO_PD8;
   804a2:	4b3f      	ldr	r3, [pc, #252]	; (805a0 <Pin_Configuration+0x1d0>)
   804a4:	4a3e      	ldr	r2, [pc, #248]	; (805a0 <Pin_Configuration+0x1d0>)
   804a6:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   804aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804ae:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTD.PD8
		PIOD -> PIO_IER |= PIO_PD8;
   804b2:	4b3b      	ldr	r3, [pc, #236]	; (805a0 <Pin_Configuration+0x1d0>)
   804b4:	4a3a      	ldr	r2, [pc, #232]	; (805a0 <Pin_Configuration+0x1d0>)
   804b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
   804b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804bc:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOD_IRQn);
   804be:	200e      	movs	r0, #14
   804c0:	4b36      	ldr	r3, [pc, #216]	; (8059c <Pin_Configuration+0x1cc>)
   804c2:	4798      	blx	r3
		
	// Set pin 11[D7] as output for Buzzer - PCB2 pin U
		PIOD -> PIO_PER |= PIO_PD7; // PIO_PER = PIO enable register
   804c4:	4b36      	ldr	r3, [pc, #216]	; (805a0 <Pin_Configuration+0x1d0>)
   804c6:	4a36      	ldr	r2, [pc, #216]	; (805a0 <Pin_Configuration+0x1d0>)
   804c8:	6812      	ldr	r2, [r2, #0]
   804ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804ce:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_OER |= PIO_PD7; // PIO_OER = Output Enable Register
   804d0:	4b33      	ldr	r3, [pc, #204]	; (805a0 <Pin_Configuration+0x1d0>)
   804d2:	4a33      	ldr	r2, [pc, #204]	; (805a0 <Pin_Configuration+0x1d0>)
   804d4:	6912      	ldr	r2, [r2, #16]
   804d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804da:	611a      	str	r2, [r3, #16]
		PIOD -> PIO_PUDR |= PIO_PD7; // Disable pull-up on pin D7
   804dc:	4b30      	ldr	r3, [pc, #192]	; (805a0 <Pin_Configuration+0x1d0>)
   804de:	4a30      	ldr	r2, [pc, #192]	; (805a0 <Pin_Configuration+0x1d0>)
   804e0:	6e12      	ldr	r2, [r2, #96]	; 0x60
   804e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804e6:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 9[C21] as PWM output for motors - left[ST]
		PIOC->PIO_PDR |= PIO_PC22; // PIO_PDR = PIO Disable register
   804e8:	4b2e      	ldr	r3, [pc, #184]	; (805a4 <Pin_Configuration+0x1d4>)
   804ea:	4a2e      	ldr	r2, [pc, #184]	; (805a4 <Pin_Configuration+0x1d4>)
   804ec:	6852      	ldr	r2, [r2, #4]
   804ee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804f2:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC22; // PIO_ABSR = Peripheral AB Select Register
   804f4:	4b2b      	ldr	r3, [pc, #172]	; (805a4 <Pin_Configuration+0x1d4>)
   804f6:	4a2b      	ldr	r2, [pc, #172]	; (805a4 <Pin_Configuration+0x1d4>)
   804f8:	6f12      	ldr	r2, [r2, #112]	; 0x70
   804fa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804fe:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC22; // Enable output on pin C22
   80500:	4b28      	ldr	r3, [pc, #160]	; (805a4 <Pin_Configuration+0x1d4>)
   80502:	4a28      	ldr	r2, [pc, #160]	; (805a4 <Pin_Configuration+0x1d4>)
   80504:	6912      	ldr	r2, [r2, #16]
   80506:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   8050a:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC22; // Disable pull-up on pin C22
   8050c:	4b25      	ldr	r3, [pc, #148]	; (805a4 <Pin_Configuration+0x1d4>)
   8050e:	4a25      	ldr	r2, [pc, #148]	; (805a4 <Pin_Configuration+0x1d4>)
   80510:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80512:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   80516:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 8[C22] as PWM output for motors - right[DR]
		PIOC->PIO_PDR |= PIO_PC21; // Disable PIO Control on PC21 and set up for Peripheral B
   80518:	4b22      	ldr	r3, [pc, #136]	; (805a4 <Pin_Configuration+0x1d4>)
   8051a:	4a22      	ldr	r2, [pc, #136]	; (805a4 <Pin_Configuration+0x1d4>)
   8051c:	6852      	ldr	r2, [r2, #4]
   8051e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   80522:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC21;
   80524:	4b1f      	ldr	r3, [pc, #124]	; (805a4 <Pin_Configuration+0x1d4>)
   80526:	4a1f      	ldr	r2, [pc, #124]	; (805a4 <Pin_Configuration+0x1d4>)
   80528:	6f12      	ldr	r2, [r2, #112]	; 0x70
   8052a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   8052e:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC21; // Enable output on pin C21
   80530:	4b1c      	ldr	r3, [pc, #112]	; (805a4 <Pin_Configuration+0x1d4>)
   80532:	4a1c      	ldr	r2, [pc, #112]	; (805a4 <Pin_Configuration+0x1d4>)
   80534:	6912      	ldr	r2, [r2, #16]
   80536:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   8053a:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC21; // Enable pull-up on pin C21
   8053c:	4b19      	ldr	r3, [pc, #100]	; (805a4 <Pin_Configuration+0x1d4>)
   8053e:	4a19      	ldr	r2, [pc, #100]	; (805a4 <Pin_Configuration+0x1d4>)
   80540:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80542:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   80546:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 7[C23] as output for LED - PCB2 pinS
		PIOC -> PIO_PER |= PIO_PC23;
   80548:	4b16      	ldr	r3, [pc, #88]	; (805a4 <Pin_Configuration+0x1d4>)
   8054a:	4a16      	ldr	r2, [pc, #88]	; (805a4 <Pin_Configuration+0x1d4>)
   8054c:	6812      	ldr	r2, [r2, #0]
   8054e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80552:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC23;
   80554:	4b13      	ldr	r3, [pc, #76]	; (805a4 <Pin_Configuration+0x1d4>)
   80556:	4a13      	ldr	r2, [pc, #76]	; (805a4 <Pin_Configuration+0x1d4>)
   80558:	6912      	ldr	r2, [r2, #16]
   8055a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8055e:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC23;
   80560:	4b10      	ldr	r3, [pc, #64]	; (805a4 <Pin_Configuration+0x1d4>)
   80562:	4a10      	ldr	r2, [pc, #64]	; (805a4 <Pin_Configuration+0x1d4>)
   80564:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80566:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8056a:	661a      	str	r2, [r3, #96]	; 0x60
		
	// Set pin 6[C24] as output for PUMP - PCB2 pinH
		PIOC -> PIO_PER |= PIO_PC24;
   8056c:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <Pin_Configuration+0x1d4>)
   8056e:	4a0d      	ldr	r2, [pc, #52]	; (805a4 <Pin_Configuration+0x1d4>)
   80570:	6812      	ldr	r2, [r2, #0]
   80572:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80576:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC24;
   80578:	4b0a      	ldr	r3, [pc, #40]	; (805a4 <Pin_Configuration+0x1d4>)
   8057a:	4a0a      	ldr	r2, [pc, #40]	; (805a4 <Pin_Configuration+0x1d4>)
   8057c:	6912      	ldr	r2, [r2, #16]
   8057e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80582:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC24;
   80584:	4b07      	ldr	r3, [pc, #28]	; (805a4 <Pin_Configuration+0x1d4>)
   80586:	4a07      	ldr	r2, [pc, #28]	; (805a4 <Pin_Configuration+0x1d4>)
   80588:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8058a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8058e:	661a      	str	r2, [r3, #96]	; 0x60
}
   80590:	bd80      	pop	{r7, pc}
   80592:	bf00      	nop
   80594:	400e0600 	.word	0x400e0600
   80598:	400e1000 	.word	0x400e1000
   8059c:	000803a1 	.word	0x000803a1
   805a0:	400e1400 	.word	0x400e1400
   805a4:	400e1200 	.word	0x400e1200

000805a8 <InitPWMController_MCLK>:
void Init_Motors();

// *************************************************************************************************************************************

void InitPWMController_MCLK()
{
   805a8:	b580      	push	{r7, lr}
   805aa:	af00      	add	r7, sp, #0
	//Enable the PWM clock (36) 
	PMC->PMC_PCER1 |= _BV((ID_PWM - 32)); // PMC_PCER1 = Peripheral Clock Enable Register 1
   805ac:	4b14      	ldr	r3, [pc, #80]	; (80600 <InitPWMController_MCLK+0x58>)
   805ae:	4a14      	ldr	r2, [pc, #80]	; (80600 <InitPWMController_MCLK+0x58>)
   805b0:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   805b4:	f042 0210 	orr.w	r2, r2, #16
   805b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	//Channel Prescaler - Use ClockA as configured in PWM_CLK
	//Preliminary frequency = 84000000 / 1024 = 82031 Hz
	PWM->PWM_CH_NUM[CHAN_ST].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   805bc:	4b11      	ldr	r3, [pc, #68]	; (80604 <InitPWMController_MCLK+0x5c>)
   805be:	220a      	movs	r2, #10
   805c0:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[CHAN_DR].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   805c4:	4b0f      	ldr	r3, [pc, #60]	; (80604 <InitPWMController_MCLK+0x5c>)
   805c6:	220a      	movs	r2, #10
   805c8:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	//Final frequency = 82031 / 1600 = 51 Hz
	SetPeriod(CHAN_ST, 1640);
   805cc:	2004      	movs	r0, #4
   805ce:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   805d2:	4b0d      	ldr	r3, [pc, #52]	; (80608 <InitPWMController_MCLK+0x60>)
   805d4:	4798      	blx	r3
	//Duty cycle = (200 / 400) * 100 = 50%
	SetDuty(CHAN_ST, 100);
   805d6:	2004      	movs	r0, #4
   805d8:	2164      	movs	r1, #100	; 0x64
   805da:	4b0c      	ldr	r3, [pc, #48]	; (8060c <InitPWMController_MCLK+0x64>)
   805dc:	4798      	blx	r3
	
	//Final frequency = 82031 / 1600 = 51Hz
	SetPeriod(CHAN_DR, 1640);
   805de:	2005      	movs	r0, #5
   805e0:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   805e4:	4b08      	ldr	r3, [pc, #32]	; (80608 <InitPWMController_MCLK+0x60>)
   805e6:	4798      	blx	r3
	//Duty cycle = (x / 800) * 100 = y%
	SetDuty(CHAN_DR, 100);
   805e8:	2005      	movs	r0, #5
   805ea:	2164      	movs	r1, #100	; 0x64
   805ec:	4b07      	ldr	r3, [pc, #28]	; (8060c <InitPWMController_MCLK+0x64>)
   805ee:	4798      	blx	r3
	
	PWM->PWM_ENA = _BV(CHAN_DR); // PWM_ENA = PWM Enable Register
   805f0:	4b04      	ldr	r3, [pc, #16]	; (80604 <InitPWMController_MCLK+0x5c>)
   805f2:	2220      	movs	r2, #32
   805f4:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA = _BV(CHAN_ST); // PWM_ENA = PWM Enable Register
   805f6:	4b03      	ldr	r3, [pc, #12]	; (80604 <InitPWMController_MCLK+0x5c>)
   805f8:	2210      	movs	r2, #16
   805fa:	605a      	str	r2, [r3, #4]
}
   805fc:	bd80      	pop	{r7, pc}
   805fe:	bf00      	nop
   80600:	400e0600 	.word	0x400e0600
   80604:	40094000 	.word	0x40094000
   80608:	00080611 	.word	0x00080611
   8060c:	0008065d 	.word	0x0008065d

00080610 <SetPeriod>:

static void SetPeriod(uint32_t chan, int period)
{
   80610:	b480      	push	{r7}
   80612:	b083      	sub	sp, #12
   80614:	af00      	add	r7, sp, #0
   80616:	6078      	str	r0, [r7, #4]
   80618:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   8061a:	4b0f      	ldr	r3, [pc, #60]	; (80658 <SetPeriod+0x48>)
   8061c:	68da      	ldr	r2, [r3, #12]
   8061e:	687b      	ldr	r3, [r7, #4]
   80620:	2101      	movs	r1, #1
   80622:	fa01 f303 	lsl.w	r3, r1, r3
   80626:	4013      	ands	r3, r2
   80628:	2b00      	cmp	r3, #0
   8062a:	d108      	bne.n	8063e <SetPeriod+0x2e>
		PWM->PWM_CH_NUM[chan].PWM_CPRD = period; // PWM_CPRD = PWM Channel Period Register
   8062c:	490a      	ldr	r1, [pc, #40]	; (80658 <SetPeriod+0x48>)
   8062e:	683a      	ldr	r2, [r7, #0]
   80630:	687b      	ldr	r3, [r7, #4]
   80632:	015b      	lsls	r3, r3, #5
   80634:	440b      	add	r3, r1
   80636:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8063a:	605a      	str	r2, [r3, #4]
   8063c:	e007      	b.n	8064e <SetPeriod+0x3e>
	else
		PWM->PWM_CH_NUM[chan].PWM_CPRDUPD = period; // PWM_CPRDUPD = PWM Channel Period Update Register
   8063e:	4906      	ldr	r1, [pc, #24]	; (80658 <SetPeriod+0x48>)
   80640:	683a      	ldr	r2, [r7, #0]
   80642:	687b      	ldr	r3, [r7, #4]
   80644:	015b      	lsls	r3, r3, #5
   80646:	440b      	add	r3, r1
   80648:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8064c:	601a      	str	r2, [r3, #0]
}
   8064e:	370c      	adds	r7, #12
   80650:	46bd      	mov	sp, r7
   80652:	f85d 7b04 	ldr.w	r7, [sp], #4
   80656:	4770      	bx	lr
   80658:	40094000 	.word	0x40094000

0008065c <SetDuty>:

static void SetDuty(uint32_t chan, int duty)
{
   8065c:	b480      	push	{r7}
   8065e:	b083      	sub	sp, #12
   80660:	af00      	add	r7, sp, #0
   80662:	6078      	str	r0, [r7, #4]
   80664:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   80666:	4b0f      	ldr	r3, [pc, #60]	; (806a4 <SetDuty+0x48>)
   80668:	68da      	ldr	r2, [r3, #12]
   8066a:	687b      	ldr	r3, [r7, #4]
   8066c:	2101      	movs	r1, #1
   8066e:	fa01 f303 	lsl.w	r3, r1, r3
   80672:	4013      	ands	r3, r2
   80674:	2b00      	cmp	r3, #0
   80676:	d107      	bne.n	80688 <SetDuty+0x2c>
		PWM->PWM_CH_NUM[chan].PWM_CDTY = duty;
   80678:	490a      	ldr	r1, [pc, #40]	; (806a4 <SetDuty+0x48>)
   8067a:	683a      	ldr	r2, [r7, #0]
   8067c:	687b      	ldr	r3, [r7, #4]
   8067e:	3310      	adds	r3, #16
   80680:	015b      	lsls	r3, r3, #5
   80682:	440b      	add	r3, r1
   80684:	605a      	str	r2, [r3, #4]
   80686:	e007      	b.n	80698 <SetDuty+0x3c>
	else
		PWM->PWM_CH_NUM[chan].PWM_CDTYUPD = duty;
   80688:	4906      	ldr	r1, [pc, #24]	; (806a4 <SetDuty+0x48>)
   8068a:	683a      	ldr	r2, [r7, #0]
   8068c:	687b      	ldr	r3, [r7, #4]
   8068e:	015b      	lsls	r3, r3, #5
   80690:	440b      	add	r3, r1
   80692:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80696:	601a      	str	r2, [r3, #0]
}
   80698:	370c      	adds	r7, #12
   8069a:	46bd      	mov	sp, r7
   8069c:	f85d 7b04 	ldr.w	r7, [sp], #4
   806a0:	4770      	bx	lr
   806a2:	bf00      	nop
   806a4:	40094000 	.word	0x40094000

000806a8 <WriteMotors>:

void WriteMotors(int percent_ST, int percent_DR)
{
   806a8:	b590      	push	{r4, r7, lr}
   806aa:	b083      	sub	sp, #12
   806ac:	af00      	add	r7, sp, #0
   806ae:	6078      	str	r0, [r7, #4]
   806b0:	6039      	str	r1, [r7, #0]
	SetDuty(CHAN_ST,123+(percent_ST/2.43)); // PWM motor stanga
   806b2:	4b25      	ldr	r3, [pc, #148]	; (80748 <WriteMotors+0xa0>)
   806b4:	6878      	ldr	r0, [r7, #4]
   806b6:	4798      	blx	r3
   806b8:	4602      	mov	r2, r0
   806ba:	460b      	mov	r3, r1
   806bc:	4c23      	ldr	r4, [pc, #140]	; (8074c <WriteMotors+0xa4>)
   806be:	4610      	mov	r0, r2
   806c0:	4619      	mov	r1, r3
   806c2:	a31d      	add	r3, pc, #116	; (adr r3, 80738 <WriteMotors+0x90>)
   806c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   806c8:	47a0      	blx	r4
   806ca:	4602      	mov	r2, r0
   806cc:	460b      	mov	r3, r1
   806ce:	4c20      	ldr	r4, [pc, #128]	; (80750 <WriteMotors+0xa8>)
   806d0:	4610      	mov	r0, r2
   806d2:	4619      	mov	r1, r3
   806d4:	a31a      	add	r3, pc, #104	; (adr r3, 80740 <WriteMotors+0x98>)
   806d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   806da:	47a0      	blx	r4
   806dc:	4602      	mov	r2, r0
   806de:	460b      	mov	r3, r1
   806e0:	4c1c      	ldr	r4, [pc, #112]	; (80754 <WriteMotors+0xac>)
   806e2:	4610      	mov	r0, r2
   806e4:	4619      	mov	r1, r3
   806e6:	47a0      	blx	r4
   806e8:	4603      	mov	r3, r0
   806ea:	2004      	movs	r0, #4
   806ec:	4619      	mov	r1, r3
   806ee:	4b1a      	ldr	r3, [pc, #104]	; (80758 <WriteMotors+0xb0>)
   806f0:	4798      	blx	r3
	SetDuty(CHAN_DR,123-(percent_DR/2.43)); // PWM motor dreapta
   806f2:	4b15      	ldr	r3, [pc, #84]	; (80748 <WriteMotors+0xa0>)
   806f4:	6838      	ldr	r0, [r7, #0]
   806f6:	4798      	blx	r3
   806f8:	4602      	mov	r2, r0
   806fa:	460b      	mov	r3, r1
   806fc:	4c13      	ldr	r4, [pc, #76]	; (8074c <WriteMotors+0xa4>)
   806fe:	4610      	mov	r0, r2
   80700:	4619      	mov	r1, r3
   80702:	a30d      	add	r3, pc, #52	; (adr r3, 80738 <WriteMotors+0x90>)
   80704:	e9d3 2300 	ldrd	r2, r3, [r3]
   80708:	47a0      	blx	r4
   8070a:	4602      	mov	r2, r0
   8070c:	460b      	mov	r3, r1
   8070e:	4c13      	ldr	r4, [pc, #76]	; (8075c <WriteMotors+0xb4>)
   80710:	a10b      	add	r1, pc, #44	; (adr r1, 80740 <WriteMotors+0x98>)
   80712:	e9d1 0100 	ldrd	r0, r1, [r1]
   80716:	47a0      	blx	r4
   80718:	4602      	mov	r2, r0
   8071a:	460b      	mov	r3, r1
   8071c:	4c0d      	ldr	r4, [pc, #52]	; (80754 <WriteMotors+0xac>)
   8071e:	4610      	mov	r0, r2
   80720:	4619      	mov	r1, r3
   80722:	47a0      	blx	r4
   80724:	4603      	mov	r3, r0
   80726:	2005      	movs	r0, #5
   80728:	4619      	mov	r1, r3
   8072a:	4b0b      	ldr	r3, [pc, #44]	; (80758 <WriteMotors+0xb0>)
   8072c:	4798      	blx	r3
}
   8072e:	370c      	adds	r7, #12
   80730:	46bd      	mov	sp, r7
   80732:	bd90      	pop	{r4, r7, pc}
   80734:	f3af 8000 	nop.w
   80738:	d70a3d71 	.word	0xd70a3d71
   8073c:	400370a3 	.word	0x400370a3
   80740:	00000000 	.word	0x00000000
   80744:	405ec000 	.word	0x405ec000
   80748:	00080c11 	.word	0x00080c11
   8074c:	00080f31 	.word	0x00080f31
   80750:	00080979 	.word	0x00080979
   80754:	00081101 	.word	0x00081101
   80758:	0008065d 	.word	0x0008065d
   8075c:	00080975 	.word	0x00080975

00080760 <Init_Motors>:

void Init_Motors()
{
   80760:	b580      	push	{r7, lr}
   80762:	af00      	add	r7, sp, #0
	WriteMotors(0,0);
   80764:	2000      	movs	r0, #0
   80766:	2100      	movs	r1, #0
   80768:	4b18      	ldr	r3, [pc, #96]	; (807cc <Init_Motors+0x6c>)
   8076a:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23; // Arduino Due Pin 25
   8076c:	4b18      	ldr	r3, [pc, #96]	; (807d0 <Init_Motors+0x70>)
   8076e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80772:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   80774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80778:	4b16      	ldr	r3, [pc, #88]	; (807d4 <Init_Motors+0x74>)
   8077a:	4798      	blx	r3
	
	WriteMotors(100,100);//Stop Motors; Percent_RIGHT|Percent_LEFT
   8077c:	2064      	movs	r0, #100	; 0x64
   8077e:	2164      	movs	r1, #100	; 0x64
   80780:	4b12      	ldr	r3, [pc, #72]	; (807cc <Init_Motors+0x6c>)
   80782:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23; // Arduino Due Pin 25
   80784:	4b12      	ldr	r3, [pc, #72]	; (807d0 <Init_Motors+0x70>)
   80786:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8078a:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(1000);
   8078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80790:	4b10      	ldr	r3, [pc, #64]	; (807d4 <Init_Motors+0x74>)
   80792:	4798      	blx	r3
	
	WriteMotors(-100,-100);
   80794:	f06f 0063 	mvn.w	r0, #99	; 0x63
   80798:	f06f 0163 	mvn.w	r1, #99	; 0x63
   8079c:	4b0b      	ldr	r3, [pc, #44]	; (807cc <Init_Motors+0x6c>)
   8079e:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23; // Arduino Due Pin 25
   807a0:	4b0b      	ldr	r3, [pc, #44]	; (807d0 <Init_Motors+0x70>)
   807a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   807a6:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   807a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   807ac:	4b09      	ldr	r3, [pc, #36]	; (807d4 <Init_Motors+0x74>)
   807ae:	4798      	blx	r3
	
	WriteMotors(0,0);//Stop Motors; Percent_RIGHT|Percent_LEFT
   807b0:	2000      	movs	r0, #0
   807b2:	2100      	movs	r1, #0
   807b4:	4b05      	ldr	r3, [pc, #20]	; (807cc <Init_Motors+0x6c>)
   807b6:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23; // Arduino Due Pin 25
   807b8:	4b05      	ldr	r3, [pc, #20]	; (807d0 <Init_Motors+0x70>)
   807ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   807be:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(3000);
   807c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   807c4:	4b03      	ldr	r3, [pc, #12]	; (807d4 <Init_Motors+0x74>)
   807c6:	4798      	blx	r3
}  
   807c8:	bd80      	pop	{r7, pc}
   807ca:	bf00      	nop
   807cc:	000806a9 	.word	0x000806a9
   807d0:	400e1200 	.word	0x400e1200
   807d4:	00080889 	.word	0x00080889

000807d8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   807d8:	b480      	push	{r7}
   807da:	b083      	sub	sp, #12
   807dc:	af00      	add	r7, sp, #0
   807de:	4603      	mov	r3, r0
   807e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   807e2:	4b08      	ldr	r3, [pc, #32]	; (80804 <NVIC_EnableIRQ+0x2c>)
   807e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
   807e8:	0952      	lsrs	r2, r2, #5
   807ea:	79f9      	ldrb	r1, [r7, #7]
   807ec:	f001 011f 	and.w	r1, r1, #31
   807f0:	2001      	movs	r0, #1
   807f2:	fa00 f101 	lsl.w	r1, r0, r1
   807f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   807fa:	370c      	adds	r7, #12
   807fc:	46bd      	mov	sp, r7
   807fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   80802:	4770      	bx	lr
   80804:	e000e100 	.word	0xe000e100

00080808 <Configure_Timers>:
void Configure_TC0(void);
void delay_ms(uint32_t iPrescription);

// *************************************************************************************************************************************

void Configure_Timers(){
   80808:	b580      	push	{r7, lr}
   8080a:	af00      	add	r7, sp, #0
	Configure_TC0();
   8080c:	4b01      	ldr	r3, [pc, #4]	; (80814 <Configure_Timers+0xc>)
   8080e:	4798      	blx	r3
}
   80810:	bd80      	pop	{r7, pc}
   80812:	bf00      	nop
   80814:	00080819 	.word	0x00080819

00080818 <Configure_TC0>:

void Configure_TC0()
{
   80818:	b580      	push	{r7, lr}
   8081a:	af00      	add	r7, sp, #0
	// Enable TC0 in PMC power management controller - ID 27
	PMC->PMC_PCER0 |= 1 << ID_TC0;
   8081c:	4b0e      	ldr	r3, [pc, #56]	; (80858 <Configure_TC0+0x40>)
   8081e:	4a0e      	ldr	r2, [pc, #56]	; (80858 <Configure_TC0+0x40>)
   80820:	6912      	ldr	r2, [r2, #16]
   80822:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80826:	611a      	str	r2, [r3, #16]
	
	// Disable the clock for TC0
	TC0->TC_CHANNEL->TC_CCR = TC_CCR_CLKDIS;
   80828:	4b0c      	ldr	r3, [pc, #48]	; (8085c <Configure_TC0+0x44>)
   8082a:	2202      	movs	r2, #2
   8082c:	601a      	str	r2, [r3, #0]
	
	// Disable interrupts
	TC0->TC_CHANNEL->TC_IDR = 0xFFFFFFFF;
   8082e:	4b0b      	ldr	r3, [pc, #44]	; (8085c <Configure_TC0+0x44>)
   80830:	f04f 32ff 	mov.w	r2, #4294967295
   80834:	629a      	str	r2, [r3, #40]	; 0x28
	
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80836:	4b09      	ldr	r3, [pc, #36]	; (8085c <Configure_TC0+0x44>)
   80838:	6a1b      	ldr	r3, [r3, #32]
	
	// Set Mode
	TC0->TC_CHANNEL->TC_CMR = TC_CMR_CPCTRG | TC_CMR_TCCLKS_TIMER_CLOCK5;
   8083a:	4b08      	ldr	r3, [pc, #32]	; (8085c <Configure_TC0+0x44>)
   8083c:	f244 0204 	movw	r2, #16388	; 0x4004
   80840:	605a      	str	r2, [r3, #4]
	
	// Set compare value register TC_CR
	TC0->TC_CHANNEL[0].TC_RC = 10000;
   80842:	4b06      	ldr	r3, [pc, #24]	; (8085c <Configure_TC0+0x44>)
   80844:	f242 7210 	movw	r2, #10000	; 0x2710
   80848:	61da      	str	r2, [r3, #28]
	
	// Configure and enable interrupt on RC compare
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
   8084a:	201b      	movs	r0, #27
   8084c:	4b04      	ldr	r3, [pc, #16]	; (80860 <Configure_TC0+0x48>)
   8084e:	4798      	blx	r3
	TC0->TC_CHANNEL->TC_IER = TC_IER_CPCS;
   80850:	4b02      	ldr	r3, [pc, #8]	; (8085c <Configure_TC0+0x44>)
   80852:	2210      	movs	r2, #16
   80854:	625a      	str	r2, [r3, #36]	; 0x24
	
	// Enable interrupts
	//TC0->TC_CHANNEL->TC_IER = 0xFFFFFFFF;
}
   80856:	bd80      	pop	{r7, pc}
   80858:	400e0600 	.word	0x400e0600
   8085c:	40080000 	.word	0x40080000
   80860:	000807d9 	.word	0x000807d9

00080864 <TC0_Handler>:

void TC0_Handler(void)
{
   80864:	b480      	push	{r7}
   80866:	af00      	add	r7, sp, #0
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80868:	4b05      	ldr	r3, [pc, #20]	; (80880 <TC0_Handler+0x1c>)
   8086a:	6a1b      	ldr	r3, [r3, #32]
	
	// Disable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;
   8086c:	4b04      	ldr	r3, [pc, #16]	; (80880 <TC0_Handler+0x1c>)
   8086e:	2202      	movs	r2, #2
   80870:	601a      	str	r2, [r3, #0]
	
	iDelay = 1;
   80872:	4b04      	ldr	r3, [pc, #16]	; (80884 <TC0_Handler+0x20>)
   80874:	2201      	movs	r2, #1
   80876:	701a      	strb	r2, [r3, #0]
}
   80878:	46bd      	mov	sp, r7
   8087a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8087e:	4770      	bx	lr
   80880:	40080000 	.word	0x40080000
   80884:	2000044c 	.word	0x2000044c

00080888 <delay_ms>:

void delay_ms(uint32_t iPrescription)
{
   80888:	b480      	push	{r7}
   8088a:	b083      	sub	sp, #12
   8088c:	af00      	add	r7, sp, #0
   8088e:	6078      	str	r0, [r7, #4]
	// Set compare value for TC0
	TC0->TC_CHANNEL[0].TC_RC = iPrescription*29;
   80890:	490b      	ldr	r1, [pc, #44]	; (808c0 <delay_ms+0x38>)
   80892:	687a      	ldr	r2, [r7, #4]
   80894:	4613      	mov	r3, r2
   80896:	00db      	lsls	r3, r3, #3
   80898:	1a9b      	subs	r3, r3, r2
   8089a:	009b      	lsls	r3, r3, #2
   8089c:	4413      	add	r3, r2
   8089e:	61cb      	str	r3, [r1, #28]
	
	// Reset and enable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN|TC_CCR_SWTRG;
   808a0:	4b07      	ldr	r3, [pc, #28]	; (808c0 <delay_ms+0x38>)
   808a2:	2205      	movs	r2, #5
   808a4:	601a      	str	r2, [r3, #0]
	
	while(!iDelay);
   808a6:	bf00      	nop
   808a8:	4b06      	ldr	r3, [pc, #24]	; (808c4 <delay_ms+0x3c>)
   808aa:	781b      	ldrb	r3, [r3, #0]
   808ac:	2b00      	cmp	r3, #0
   808ae:	d0fb      	beq.n	808a8 <delay_ms+0x20>
	
	iDelay = 0;
   808b0:	4b04      	ldr	r3, [pc, #16]	; (808c4 <delay_ms+0x3c>)
   808b2:	2200      	movs	r2, #0
   808b4:	701a      	strb	r2, [r3, #0]
   808b6:	370c      	adds	r7, #12
   808b8:	46bd      	mov	sp, r7
   808ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   808be:	4770      	bx	lr
   808c0:	40080000 	.word	0x40080000
   808c4:	2000044c 	.word	0x2000044c

000808c8 <uart_getchar>:


// *************************************************************************************************************************************

int uart_getchar(uint8_t *c)
{
   808c8:	b480      	push	{r7}
   808ca:	b083      	sub	sp, #12
   808cc:	af00      	add	r7, sp, #0
   808ce:	6078      	str	r0, [r7, #4]
	// Check if the receiver is ready
	if((UART->UART_SR & UART_SR_RXRDY) == 0)
   808d0:	4b09      	ldr	r3, [pc, #36]	; (808f8 <uart_getchar+0x30>)
   808d2:	695b      	ldr	r3, [r3, #20]
   808d4:	f003 0301 	and.w	r3, r3, #1
   808d8:	2b00      	cmp	r3, #0
   808da:	d101      	bne.n	808e0 <uart_getchar+0x18>
	return 1;
   808dc:	2301      	movs	r3, #1
   808de:	e005      	b.n	808ec <uart_getchar+0x24>
	
	// Read the character
	*c = (uint8_t) UART->UART_RHR;
   808e0:	4b05      	ldr	r3, [pc, #20]	; (808f8 <uart_getchar+0x30>)
   808e2:	699b      	ldr	r3, [r3, #24]
   808e4:	b2da      	uxtb	r2, r3
   808e6:	687b      	ldr	r3, [r7, #4]
   808e8:	701a      	strb	r2, [r3, #0]
	return 0;
   808ea:	2300      	movs	r3, #0
}
   808ec:	4618      	mov	r0, r3
   808ee:	370c      	adds	r7, #12
   808f0:	46bd      	mov	sp, r7
   808f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   808f6:	4770      	bx	lr
   808f8:	400e0800 	.word	0x400e0800

000808fc <uart_putchar>:

int uart_putchar(const uint8_t c)
{
   808fc:	b480      	push	{r7}
   808fe:	b083      	sub	sp, #12
   80900:	af00      	add	r7, sp, #0
   80902:	4603      	mov	r3, r0
   80904:	71fb      	strb	r3, [r7, #7]
	// Check if the transmitter is ready
	if(!(UART->UART_SR & UART_SR_TXRDY))
   80906:	4b09      	ldr	r3, [pc, #36]	; (8092c <uart_putchar+0x30>)
   80908:	695b      	ldr	r3, [r3, #20]
   8090a:	f003 0302 	and.w	r3, r3, #2
   8090e:	2b00      	cmp	r3, #0
   80910:	d101      	bne.n	80916 <uart_putchar+0x1a>
	return 1;
   80912:	2301      	movs	r3, #1
   80914:	e003      	b.n	8091e <uart_putchar+0x22>
	
	// Send the character
	UART->UART_THR = c;
   80916:	4b05      	ldr	r3, [pc, #20]	; (8092c <uart_putchar+0x30>)
   80918:	79fa      	ldrb	r2, [r7, #7]
   8091a:	61da      	str	r2, [r3, #28]
	return 0;
   8091c:	2300      	movs	r3, #0
}
   8091e:	4618      	mov	r0, r3
   80920:	370c      	adds	r7, #12
   80922:	46bd      	mov	sp, r7
   80924:	f85d 7b04 	ldr.w	r7, [sp], #4
   80928:	4770      	bx	lr
   8092a:	bf00      	nop
   8092c:	400e0800 	.word	0x400e0800

00080930 <UART_Handler>:

void UART_Handler(void)
{
   80930:	b580      	push	{r7, lr}
   80932:	b082      	sub	sp, #8
   80934:	af00      	add	r7, sp, #0
	uint8_t c;
	
	// Check if the interrupt source is receive ready
	if(UART->UART_IMR & UART_IMR_RXRDY)
   80936:	4b0a      	ldr	r3, [pc, #40]	; (80960 <UART_Handler+0x30>)
   80938:	691b      	ldr	r3, [r3, #16]
   8093a:	f003 0301 	and.w	r3, r3, #1
   8093e:	2b00      	cmp	r3, #0
   80940:	d00a      	beq.n	80958 <UART_Handler+0x28>
	{
		if(uart_getchar(&c) == 0)
   80942:	1dfb      	adds	r3, r7, #7
   80944:	4618      	mov	r0, r3
   80946:	4b07      	ldr	r3, [pc, #28]	; (80964 <UART_Handler+0x34>)
   80948:	4798      	blx	r3
   8094a:	4603      	mov	r3, r0
   8094c:	2b00      	cmp	r3, #0
   8094e:	d103      	bne.n	80958 <UART_Handler+0x28>
		{
			uart_putchar(c);
   80950:	79fb      	ldrb	r3, [r7, #7]
   80952:	4618      	mov	r0, r3
   80954:	4b04      	ldr	r3, [pc, #16]	; (80968 <UART_Handler+0x38>)
   80956:	4798      	blx	r3
		}
	}
}
   80958:	3708      	adds	r7, #8
   8095a:	46bd      	mov	sp, r7
   8095c:	bd80      	pop	{r7, pc}
   8095e:	bf00      	nop
   80960:	400e0800 	.word	0x400e0800
   80964:	000808c9 	.word	0x000808c9
   80968:	000808fd 	.word	0x000808fd

0008096c <__aeabi_drsub>:
   8096c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80970:	e002      	b.n	80978 <__adddf3>
   80972:	bf00      	nop

00080974 <__aeabi_dsub>:
   80974:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080978 <__adddf3>:
   80978:	b530      	push	{r4, r5, lr}
   8097a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8097e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80982:	ea94 0f05 	teq	r4, r5
   80986:	bf08      	it	eq
   80988:	ea90 0f02 	teqeq	r0, r2
   8098c:	bf1f      	itttt	ne
   8098e:	ea54 0c00 	orrsne.w	ip, r4, r0
   80992:	ea55 0c02 	orrsne.w	ip, r5, r2
   80996:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8099a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8099e:	f000 80e2 	beq.w	80b66 <__adddf3+0x1ee>
   809a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   809a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   809aa:	bfb8      	it	lt
   809ac:	426d      	neglt	r5, r5
   809ae:	dd0c      	ble.n	809ca <__adddf3+0x52>
   809b0:	442c      	add	r4, r5
   809b2:	ea80 0202 	eor.w	r2, r0, r2
   809b6:	ea81 0303 	eor.w	r3, r1, r3
   809ba:	ea82 0000 	eor.w	r0, r2, r0
   809be:	ea83 0101 	eor.w	r1, r3, r1
   809c2:	ea80 0202 	eor.w	r2, r0, r2
   809c6:	ea81 0303 	eor.w	r3, r1, r3
   809ca:	2d36      	cmp	r5, #54	; 0x36
   809cc:	bf88      	it	hi
   809ce:	bd30      	pophi	{r4, r5, pc}
   809d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   809d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   809d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   809dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   809e0:	d002      	beq.n	809e8 <__adddf3+0x70>
   809e2:	4240      	negs	r0, r0
   809e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   809e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   809ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   809f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   809f4:	d002      	beq.n	809fc <__adddf3+0x84>
   809f6:	4252      	negs	r2, r2
   809f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   809fc:	ea94 0f05 	teq	r4, r5
   80a00:	f000 80a7 	beq.w	80b52 <__adddf3+0x1da>
   80a04:	f1a4 0401 	sub.w	r4, r4, #1
   80a08:	f1d5 0e20 	rsbs	lr, r5, #32
   80a0c:	db0d      	blt.n	80a2a <__adddf3+0xb2>
   80a0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   80a12:	fa22 f205 	lsr.w	r2, r2, r5
   80a16:	1880      	adds	r0, r0, r2
   80a18:	f141 0100 	adc.w	r1, r1, #0
   80a1c:	fa03 f20e 	lsl.w	r2, r3, lr
   80a20:	1880      	adds	r0, r0, r2
   80a22:	fa43 f305 	asr.w	r3, r3, r5
   80a26:	4159      	adcs	r1, r3
   80a28:	e00e      	b.n	80a48 <__adddf3+0xd0>
   80a2a:	f1a5 0520 	sub.w	r5, r5, #32
   80a2e:	f10e 0e20 	add.w	lr, lr, #32
   80a32:	2a01      	cmp	r2, #1
   80a34:	fa03 fc0e 	lsl.w	ip, r3, lr
   80a38:	bf28      	it	cs
   80a3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   80a3e:	fa43 f305 	asr.w	r3, r3, r5
   80a42:	18c0      	adds	r0, r0, r3
   80a44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80a48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80a4c:	d507      	bpl.n	80a5e <__adddf3+0xe6>
   80a4e:	f04f 0e00 	mov.w	lr, #0
   80a52:	f1dc 0c00 	rsbs	ip, ip, #0
   80a56:	eb7e 0000 	sbcs.w	r0, lr, r0
   80a5a:	eb6e 0101 	sbc.w	r1, lr, r1
   80a5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80a62:	d31b      	bcc.n	80a9c <__adddf3+0x124>
   80a64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80a68:	d30c      	bcc.n	80a84 <__adddf3+0x10c>
   80a6a:	0849      	lsrs	r1, r1, #1
   80a6c:	ea5f 0030 	movs.w	r0, r0, rrx
   80a70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80a74:	f104 0401 	add.w	r4, r4, #1
   80a78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80a7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80a80:	f080 809a 	bcs.w	80bb8 <__adddf3+0x240>
   80a84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80a88:	bf08      	it	eq
   80a8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80a8e:	f150 0000 	adcs.w	r0, r0, #0
   80a92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80a96:	ea41 0105 	orr.w	r1, r1, r5
   80a9a:	bd30      	pop	{r4, r5, pc}
   80a9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80aa0:	4140      	adcs	r0, r0
   80aa2:	eb41 0101 	adc.w	r1, r1, r1
   80aa6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80aaa:	f1a4 0401 	sub.w	r4, r4, #1
   80aae:	d1e9      	bne.n	80a84 <__adddf3+0x10c>
   80ab0:	f091 0f00 	teq	r1, #0
   80ab4:	bf04      	itt	eq
   80ab6:	4601      	moveq	r1, r0
   80ab8:	2000      	moveq	r0, #0
   80aba:	fab1 f381 	clz	r3, r1
   80abe:	bf08      	it	eq
   80ac0:	3320      	addeq	r3, #32
   80ac2:	f1a3 030b 	sub.w	r3, r3, #11
   80ac6:	f1b3 0220 	subs.w	r2, r3, #32
   80aca:	da0c      	bge.n	80ae6 <__adddf3+0x16e>
   80acc:	320c      	adds	r2, #12
   80ace:	dd08      	ble.n	80ae2 <__adddf3+0x16a>
   80ad0:	f102 0c14 	add.w	ip, r2, #20
   80ad4:	f1c2 020c 	rsb	r2, r2, #12
   80ad8:	fa01 f00c 	lsl.w	r0, r1, ip
   80adc:	fa21 f102 	lsr.w	r1, r1, r2
   80ae0:	e00c      	b.n	80afc <__adddf3+0x184>
   80ae2:	f102 0214 	add.w	r2, r2, #20
   80ae6:	bfd8      	it	le
   80ae8:	f1c2 0c20 	rsble	ip, r2, #32
   80aec:	fa01 f102 	lsl.w	r1, r1, r2
   80af0:	fa20 fc0c 	lsr.w	ip, r0, ip
   80af4:	bfdc      	itt	le
   80af6:	ea41 010c 	orrle.w	r1, r1, ip
   80afa:	4090      	lslle	r0, r2
   80afc:	1ae4      	subs	r4, r4, r3
   80afe:	bfa2      	ittt	ge
   80b00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80b04:	4329      	orrge	r1, r5
   80b06:	bd30      	popge	{r4, r5, pc}
   80b08:	ea6f 0404 	mvn.w	r4, r4
   80b0c:	3c1f      	subs	r4, #31
   80b0e:	da1c      	bge.n	80b4a <__adddf3+0x1d2>
   80b10:	340c      	adds	r4, #12
   80b12:	dc0e      	bgt.n	80b32 <__adddf3+0x1ba>
   80b14:	f104 0414 	add.w	r4, r4, #20
   80b18:	f1c4 0220 	rsb	r2, r4, #32
   80b1c:	fa20 f004 	lsr.w	r0, r0, r4
   80b20:	fa01 f302 	lsl.w	r3, r1, r2
   80b24:	ea40 0003 	orr.w	r0, r0, r3
   80b28:	fa21 f304 	lsr.w	r3, r1, r4
   80b2c:	ea45 0103 	orr.w	r1, r5, r3
   80b30:	bd30      	pop	{r4, r5, pc}
   80b32:	f1c4 040c 	rsb	r4, r4, #12
   80b36:	f1c4 0220 	rsb	r2, r4, #32
   80b3a:	fa20 f002 	lsr.w	r0, r0, r2
   80b3e:	fa01 f304 	lsl.w	r3, r1, r4
   80b42:	ea40 0003 	orr.w	r0, r0, r3
   80b46:	4629      	mov	r1, r5
   80b48:	bd30      	pop	{r4, r5, pc}
   80b4a:	fa21 f004 	lsr.w	r0, r1, r4
   80b4e:	4629      	mov	r1, r5
   80b50:	bd30      	pop	{r4, r5, pc}
   80b52:	f094 0f00 	teq	r4, #0
   80b56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80b5a:	bf06      	itte	eq
   80b5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80b60:	3401      	addeq	r4, #1
   80b62:	3d01      	subne	r5, #1
   80b64:	e74e      	b.n	80a04 <__adddf3+0x8c>
   80b66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80b6a:	bf18      	it	ne
   80b6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80b70:	d029      	beq.n	80bc6 <__adddf3+0x24e>
   80b72:	ea94 0f05 	teq	r4, r5
   80b76:	bf08      	it	eq
   80b78:	ea90 0f02 	teqeq	r0, r2
   80b7c:	d005      	beq.n	80b8a <__adddf3+0x212>
   80b7e:	ea54 0c00 	orrs.w	ip, r4, r0
   80b82:	bf04      	itt	eq
   80b84:	4619      	moveq	r1, r3
   80b86:	4610      	moveq	r0, r2
   80b88:	bd30      	pop	{r4, r5, pc}
   80b8a:	ea91 0f03 	teq	r1, r3
   80b8e:	bf1e      	ittt	ne
   80b90:	2100      	movne	r1, #0
   80b92:	2000      	movne	r0, #0
   80b94:	bd30      	popne	{r4, r5, pc}
   80b96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80b9a:	d105      	bne.n	80ba8 <__adddf3+0x230>
   80b9c:	0040      	lsls	r0, r0, #1
   80b9e:	4149      	adcs	r1, r1
   80ba0:	bf28      	it	cs
   80ba2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80ba6:	bd30      	pop	{r4, r5, pc}
   80ba8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80bac:	bf3c      	itt	cc
   80bae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80bb2:	bd30      	popcc	{r4, r5, pc}
   80bb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80bb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80bbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80bc0:	f04f 0000 	mov.w	r0, #0
   80bc4:	bd30      	pop	{r4, r5, pc}
   80bc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80bca:	bf1a      	itte	ne
   80bcc:	4619      	movne	r1, r3
   80bce:	4610      	movne	r0, r2
   80bd0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80bd4:	bf1c      	itt	ne
   80bd6:	460b      	movne	r3, r1
   80bd8:	4602      	movne	r2, r0
   80bda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80bde:	bf06      	itte	eq
   80be0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80be4:	ea91 0f03 	teqeq	r1, r3
   80be8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80bec:	bd30      	pop	{r4, r5, pc}
   80bee:	bf00      	nop

00080bf0 <__aeabi_ui2d>:
   80bf0:	f090 0f00 	teq	r0, #0
   80bf4:	bf04      	itt	eq
   80bf6:	2100      	moveq	r1, #0
   80bf8:	4770      	bxeq	lr
   80bfa:	b530      	push	{r4, r5, lr}
   80bfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80c00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80c04:	f04f 0500 	mov.w	r5, #0
   80c08:	f04f 0100 	mov.w	r1, #0
   80c0c:	e750      	b.n	80ab0 <__adddf3+0x138>
   80c0e:	bf00      	nop

00080c10 <__aeabi_i2d>:
   80c10:	f090 0f00 	teq	r0, #0
   80c14:	bf04      	itt	eq
   80c16:	2100      	moveq	r1, #0
   80c18:	4770      	bxeq	lr
   80c1a:	b530      	push	{r4, r5, lr}
   80c1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80c20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80c24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80c28:	bf48      	it	mi
   80c2a:	4240      	negmi	r0, r0
   80c2c:	f04f 0100 	mov.w	r1, #0
   80c30:	e73e      	b.n	80ab0 <__adddf3+0x138>
   80c32:	bf00      	nop

00080c34 <__aeabi_f2d>:
   80c34:	0042      	lsls	r2, r0, #1
   80c36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80c3a:	ea4f 0131 	mov.w	r1, r1, rrx
   80c3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80c42:	bf1f      	itttt	ne
   80c44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80c48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80c4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80c50:	4770      	bxne	lr
   80c52:	f092 0f00 	teq	r2, #0
   80c56:	bf14      	ite	ne
   80c58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80c5c:	4770      	bxeq	lr
   80c5e:	b530      	push	{r4, r5, lr}
   80c60:	f44f 7460 	mov.w	r4, #896	; 0x380
   80c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80c68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80c6c:	e720      	b.n	80ab0 <__adddf3+0x138>
   80c6e:	bf00      	nop

00080c70 <__aeabi_ul2d>:
   80c70:	ea50 0201 	orrs.w	r2, r0, r1
   80c74:	bf08      	it	eq
   80c76:	4770      	bxeq	lr
   80c78:	b530      	push	{r4, r5, lr}
   80c7a:	f04f 0500 	mov.w	r5, #0
   80c7e:	e00a      	b.n	80c96 <__aeabi_l2d+0x16>

00080c80 <__aeabi_l2d>:
   80c80:	ea50 0201 	orrs.w	r2, r0, r1
   80c84:	bf08      	it	eq
   80c86:	4770      	bxeq	lr
   80c88:	b530      	push	{r4, r5, lr}
   80c8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80c8e:	d502      	bpl.n	80c96 <__aeabi_l2d+0x16>
   80c90:	4240      	negs	r0, r0
   80c92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80c96:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80c9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80c9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80ca2:	f43f aedc 	beq.w	80a5e <__adddf3+0xe6>
   80ca6:	f04f 0203 	mov.w	r2, #3
   80caa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80cae:	bf18      	it	ne
   80cb0:	3203      	addne	r2, #3
   80cb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80cb6:	bf18      	it	ne
   80cb8:	3203      	addne	r2, #3
   80cba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80cbe:	f1c2 0320 	rsb	r3, r2, #32
   80cc2:	fa00 fc03 	lsl.w	ip, r0, r3
   80cc6:	fa20 f002 	lsr.w	r0, r0, r2
   80cca:	fa01 fe03 	lsl.w	lr, r1, r3
   80cce:	ea40 000e 	orr.w	r0, r0, lr
   80cd2:	fa21 f102 	lsr.w	r1, r1, r2
   80cd6:	4414      	add	r4, r2
   80cd8:	e6c1      	b.n	80a5e <__adddf3+0xe6>
   80cda:	bf00      	nop

00080cdc <__aeabi_dmul>:
   80cdc:	b570      	push	{r4, r5, r6, lr}
   80cde:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80ce2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80ce6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80cea:	bf1d      	ittte	ne
   80cec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80cf0:	ea94 0f0c 	teqne	r4, ip
   80cf4:	ea95 0f0c 	teqne	r5, ip
   80cf8:	f000 f8de 	bleq	80eb8 <__aeabi_dmul+0x1dc>
   80cfc:	442c      	add	r4, r5
   80cfe:	ea81 0603 	eor.w	r6, r1, r3
   80d02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80d06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80d0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80d0e:	bf18      	it	ne
   80d10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80d14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80d1c:	d038      	beq.n	80d90 <__aeabi_dmul+0xb4>
   80d1e:	fba0 ce02 	umull	ip, lr, r0, r2
   80d22:	f04f 0500 	mov.w	r5, #0
   80d26:	fbe1 e502 	umlal	lr, r5, r1, r2
   80d2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80d2e:	fbe0 e503 	umlal	lr, r5, r0, r3
   80d32:	f04f 0600 	mov.w	r6, #0
   80d36:	fbe1 5603 	umlal	r5, r6, r1, r3
   80d3a:	f09c 0f00 	teq	ip, #0
   80d3e:	bf18      	it	ne
   80d40:	f04e 0e01 	orrne.w	lr, lr, #1
   80d44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80d48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80d4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80d50:	d204      	bcs.n	80d5c <__aeabi_dmul+0x80>
   80d52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80d56:	416d      	adcs	r5, r5
   80d58:	eb46 0606 	adc.w	r6, r6, r6
   80d5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80d60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   80d64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   80d68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   80d6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   80d70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   80d74:	bf88      	it	hi
   80d76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   80d7a:	d81e      	bhi.n	80dba <__aeabi_dmul+0xde>
   80d7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   80d80:	bf08      	it	eq
   80d82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   80d86:	f150 0000 	adcs.w	r0, r0, #0
   80d8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80d8e:	bd70      	pop	{r4, r5, r6, pc}
   80d90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   80d94:	ea46 0101 	orr.w	r1, r6, r1
   80d98:	ea40 0002 	orr.w	r0, r0, r2
   80d9c:	ea81 0103 	eor.w	r1, r1, r3
   80da0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   80da4:	bfc2      	ittt	gt
   80da6:	ebd4 050c 	rsbsgt	r5, r4, ip
   80daa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   80dae:	bd70      	popgt	{r4, r5, r6, pc}
   80db0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80db4:	f04f 0e00 	mov.w	lr, #0
   80db8:	3c01      	subs	r4, #1
   80dba:	f300 80ab 	bgt.w	80f14 <__aeabi_dmul+0x238>
   80dbe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   80dc2:	bfde      	ittt	le
   80dc4:	2000      	movle	r0, #0
   80dc6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   80dca:	bd70      	pople	{r4, r5, r6, pc}
   80dcc:	f1c4 0400 	rsb	r4, r4, #0
   80dd0:	3c20      	subs	r4, #32
   80dd2:	da35      	bge.n	80e40 <__aeabi_dmul+0x164>
   80dd4:	340c      	adds	r4, #12
   80dd6:	dc1b      	bgt.n	80e10 <__aeabi_dmul+0x134>
   80dd8:	f104 0414 	add.w	r4, r4, #20
   80ddc:	f1c4 0520 	rsb	r5, r4, #32
   80de0:	fa00 f305 	lsl.w	r3, r0, r5
   80de4:	fa20 f004 	lsr.w	r0, r0, r4
   80de8:	fa01 f205 	lsl.w	r2, r1, r5
   80dec:	ea40 0002 	orr.w	r0, r0, r2
   80df0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   80df4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80df8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80dfc:	fa21 f604 	lsr.w	r6, r1, r4
   80e00:	eb42 0106 	adc.w	r1, r2, r6
   80e04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80e08:	bf08      	it	eq
   80e0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80e0e:	bd70      	pop	{r4, r5, r6, pc}
   80e10:	f1c4 040c 	rsb	r4, r4, #12
   80e14:	f1c4 0520 	rsb	r5, r4, #32
   80e18:	fa00 f304 	lsl.w	r3, r0, r4
   80e1c:	fa20 f005 	lsr.w	r0, r0, r5
   80e20:	fa01 f204 	lsl.w	r2, r1, r4
   80e24:	ea40 0002 	orr.w	r0, r0, r2
   80e28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80e2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80e30:	f141 0100 	adc.w	r1, r1, #0
   80e34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80e38:	bf08      	it	eq
   80e3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80e3e:	bd70      	pop	{r4, r5, r6, pc}
   80e40:	f1c4 0520 	rsb	r5, r4, #32
   80e44:	fa00 f205 	lsl.w	r2, r0, r5
   80e48:	ea4e 0e02 	orr.w	lr, lr, r2
   80e4c:	fa20 f304 	lsr.w	r3, r0, r4
   80e50:	fa01 f205 	lsl.w	r2, r1, r5
   80e54:	ea43 0302 	orr.w	r3, r3, r2
   80e58:	fa21 f004 	lsr.w	r0, r1, r4
   80e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80e60:	fa21 f204 	lsr.w	r2, r1, r4
   80e64:	ea20 0002 	bic.w	r0, r0, r2
   80e68:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   80e6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80e70:	bf08      	it	eq
   80e72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80e76:	bd70      	pop	{r4, r5, r6, pc}
   80e78:	f094 0f00 	teq	r4, #0
   80e7c:	d10f      	bne.n	80e9e <__aeabi_dmul+0x1c2>
   80e7e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   80e82:	0040      	lsls	r0, r0, #1
   80e84:	eb41 0101 	adc.w	r1, r1, r1
   80e88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80e8c:	bf08      	it	eq
   80e8e:	3c01      	subeq	r4, #1
   80e90:	d0f7      	beq.n	80e82 <__aeabi_dmul+0x1a6>
   80e92:	ea41 0106 	orr.w	r1, r1, r6
   80e96:	f095 0f00 	teq	r5, #0
   80e9a:	bf18      	it	ne
   80e9c:	4770      	bxne	lr
   80e9e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   80ea2:	0052      	lsls	r2, r2, #1
   80ea4:	eb43 0303 	adc.w	r3, r3, r3
   80ea8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   80eac:	bf08      	it	eq
   80eae:	3d01      	subeq	r5, #1
   80eb0:	d0f7      	beq.n	80ea2 <__aeabi_dmul+0x1c6>
   80eb2:	ea43 0306 	orr.w	r3, r3, r6
   80eb6:	4770      	bx	lr
   80eb8:	ea94 0f0c 	teq	r4, ip
   80ebc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   80ec0:	bf18      	it	ne
   80ec2:	ea95 0f0c 	teqne	r5, ip
   80ec6:	d00c      	beq.n	80ee2 <__aeabi_dmul+0x206>
   80ec8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80ecc:	bf18      	it	ne
   80ece:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80ed2:	d1d1      	bne.n	80e78 <__aeabi_dmul+0x19c>
   80ed4:	ea81 0103 	eor.w	r1, r1, r3
   80ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80edc:	f04f 0000 	mov.w	r0, #0
   80ee0:	bd70      	pop	{r4, r5, r6, pc}
   80ee2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80ee6:	bf06      	itte	eq
   80ee8:	4610      	moveq	r0, r2
   80eea:	4619      	moveq	r1, r3
   80eec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80ef0:	d019      	beq.n	80f26 <__aeabi_dmul+0x24a>
   80ef2:	ea94 0f0c 	teq	r4, ip
   80ef6:	d102      	bne.n	80efe <__aeabi_dmul+0x222>
   80ef8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   80efc:	d113      	bne.n	80f26 <__aeabi_dmul+0x24a>
   80efe:	ea95 0f0c 	teq	r5, ip
   80f02:	d105      	bne.n	80f10 <__aeabi_dmul+0x234>
   80f04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   80f08:	bf1c      	itt	ne
   80f0a:	4610      	movne	r0, r2
   80f0c:	4619      	movne	r1, r3
   80f0e:	d10a      	bne.n	80f26 <__aeabi_dmul+0x24a>
   80f10:	ea81 0103 	eor.w	r1, r1, r3
   80f14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   80f1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80f20:	f04f 0000 	mov.w	r0, #0
   80f24:	bd70      	pop	{r4, r5, r6, pc}
   80f26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   80f2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   80f2e:	bd70      	pop	{r4, r5, r6, pc}

00080f30 <__aeabi_ddiv>:
   80f30:	b570      	push	{r4, r5, r6, lr}
   80f32:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80f36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80f3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80f3e:	bf1d      	ittte	ne
   80f40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80f44:	ea94 0f0c 	teqne	r4, ip
   80f48:	ea95 0f0c 	teqne	r5, ip
   80f4c:	f000 f8a7 	bleq	8109e <__aeabi_ddiv+0x16e>
   80f50:	eba4 0405 	sub.w	r4, r4, r5
   80f54:	ea81 0e03 	eor.w	lr, r1, r3
   80f58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   80f5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80f60:	f000 8088 	beq.w	81074 <__aeabi_ddiv+0x144>
   80f64:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80f68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   80f6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   80f70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   80f74:	ea4f 2202 	mov.w	r2, r2, lsl #8
   80f78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   80f7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   80f80:	ea4f 2600 	mov.w	r6, r0, lsl #8
   80f84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   80f88:	429d      	cmp	r5, r3
   80f8a:	bf08      	it	eq
   80f8c:	4296      	cmpeq	r6, r2
   80f8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   80f92:	f504 7440 	add.w	r4, r4, #768	; 0x300
   80f96:	d202      	bcs.n	80f9e <__aeabi_ddiv+0x6e>
   80f98:	085b      	lsrs	r3, r3, #1
   80f9a:	ea4f 0232 	mov.w	r2, r2, rrx
   80f9e:	1ab6      	subs	r6, r6, r2
   80fa0:	eb65 0503 	sbc.w	r5, r5, r3
   80fa4:	085b      	lsrs	r3, r3, #1
   80fa6:	ea4f 0232 	mov.w	r2, r2, rrx
   80faa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   80fae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   80fb2:	ebb6 0e02 	subs.w	lr, r6, r2
   80fb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   80fba:	bf22      	ittt	cs
   80fbc:	1ab6      	subcs	r6, r6, r2
   80fbe:	4675      	movcs	r5, lr
   80fc0:	ea40 000c 	orrcs.w	r0, r0, ip
   80fc4:	085b      	lsrs	r3, r3, #1
   80fc6:	ea4f 0232 	mov.w	r2, r2, rrx
   80fca:	ebb6 0e02 	subs.w	lr, r6, r2
   80fce:	eb75 0e03 	sbcs.w	lr, r5, r3
   80fd2:	bf22      	ittt	cs
   80fd4:	1ab6      	subcs	r6, r6, r2
   80fd6:	4675      	movcs	r5, lr
   80fd8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   80fdc:	085b      	lsrs	r3, r3, #1
   80fde:	ea4f 0232 	mov.w	r2, r2, rrx
   80fe2:	ebb6 0e02 	subs.w	lr, r6, r2
   80fe6:	eb75 0e03 	sbcs.w	lr, r5, r3
   80fea:	bf22      	ittt	cs
   80fec:	1ab6      	subcs	r6, r6, r2
   80fee:	4675      	movcs	r5, lr
   80ff0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   80ff4:	085b      	lsrs	r3, r3, #1
   80ff6:	ea4f 0232 	mov.w	r2, r2, rrx
   80ffa:	ebb6 0e02 	subs.w	lr, r6, r2
   80ffe:	eb75 0e03 	sbcs.w	lr, r5, r3
   81002:	bf22      	ittt	cs
   81004:	1ab6      	subcs	r6, r6, r2
   81006:	4675      	movcs	r5, lr
   81008:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8100c:	ea55 0e06 	orrs.w	lr, r5, r6
   81010:	d018      	beq.n	81044 <__aeabi_ddiv+0x114>
   81012:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81016:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8101a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8101e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81022:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81026:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8102a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8102e:	d1c0      	bne.n	80fb2 <__aeabi_ddiv+0x82>
   81030:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81034:	d10b      	bne.n	8104e <__aeabi_ddiv+0x11e>
   81036:	ea41 0100 	orr.w	r1, r1, r0
   8103a:	f04f 0000 	mov.w	r0, #0
   8103e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81042:	e7b6      	b.n	80fb2 <__aeabi_ddiv+0x82>
   81044:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81048:	bf04      	itt	eq
   8104a:	4301      	orreq	r1, r0
   8104c:	2000      	moveq	r0, #0
   8104e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81052:	bf88      	it	hi
   81054:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81058:	f63f aeaf 	bhi.w	80dba <__aeabi_dmul+0xde>
   8105c:	ebb5 0c03 	subs.w	ip, r5, r3
   81060:	bf04      	itt	eq
   81062:	ebb6 0c02 	subseq.w	ip, r6, r2
   81066:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8106a:	f150 0000 	adcs.w	r0, r0, #0
   8106e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81072:	bd70      	pop	{r4, r5, r6, pc}
   81074:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81078:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8107c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81080:	bfc2      	ittt	gt
   81082:	ebd4 050c 	rsbsgt	r5, r4, ip
   81086:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8108a:	bd70      	popgt	{r4, r5, r6, pc}
   8108c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81090:	f04f 0e00 	mov.w	lr, #0
   81094:	3c01      	subs	r4, #1
   81096:	e690      	b.n	80dba <__aeabi_dmul+0xde>
   81098:	ea45 0e06 	orr.w	lr, r5, r6
   8109c:	e68d      	b.n	80dba <__aeabi_dmul+0xde>
   8109e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   810a2:	ea94 0f0c 	teq	r4, ip
   810a6:	bf08      	it	eq
   810a8:	ea95 0f0c 	teqeq	r5, ip
   810ac:	f43f af3b 	beq.w	80f26 <__aeabi_dmul+0x24a>
   810b0:	ea94 0f0c 	teq	r4, ip
   810b4:	d10a      	bne.n	810cc <__aeabi_ddiv+0x19c>
   810b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   810ba:	f47f af34 	bne.w	80f26 <__aeabi_dmul+0x24a>
   810be:	ea95 0f0c 	teq	r5, ip
   810c2:	f47f af25 	bne.w	80f10 <__aeabi_dmul+0x234>
   810c6:	4610      	mov	r0, r2
   810c8:	4619      	mov	r1, r3
   810ca:	e72c      	b.n	80f26 <__aeabi_dmul+0x24a>
   810cc:	ea95 0f0c 	teq	r5, ip
   810d0:	d106      	bne.n	810e0 <__aeabi_ddiv+0x1b0>
   810d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   810d6:	f43f aefd 	beq.w	80ed4 <__aeabi_dmul+0x1f8>
   810da:	4610      	mov	r0, r2
   810dc:	4619      	mov	r1, r3
   810de:	e722      	b.n	80f26 <__aeabi_dmul+0x24a>
   810e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   810e4:	bf18      	it	ne
   810e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   810ea:	f47f aec5 	bne.w	80e78 <__aeabi_dmul+0x19c>
   810ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   810f2:	f47f af0d 	bne.w	80f10 <__aeabi_dmul+0x234>
   810f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   810fa:	f47f aeeb 	bne.w	80ed4 <__aeabi_dmul+0x1f8>
   810fe:	e712      	b.n	80f26 <__aeabi_dmul+0x24a>

00081100 <__aeabi_d2iz>:
   81100:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81104:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81108:	d215      	bcs.n	81136 <__aeabi_d2iz+0x36>
   8110a:	d511      	bpl.n	81130 <__aeabi_d2iz+0x30>
   8110c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81110:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81114:	d912      	bls.n	8113c <__aeabi_d2iz+0x3c>
   81116:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8111a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8111e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81122:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81126:	fa23 f002 	lsr.w	r0, r3, r2
   8112a:	bf18      	it	ne
   8112c:	4240      	negne	r0, r0
   8112e:	4770      	bx	lr
   81130:	f04f 0000 	mov.w	r0, #0
   81134:	4770      	bx	lr
   81136:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8113a:	d105      	bne.n	81148 <__aeabi_d2iz+0x48>
   8113c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81140:	bf08      	it	eq
   81142:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81146:	4770      	bx	lr
   81148:	f04f 0000 	mov.w	r0, #0
   8114c:	4770      	bx	lr
   8114e:	bf00      	nop

00081150 <__libc_init_array>:
   81150:	b570      	push	{r4, r5, r6, lr}
   81152:	4e0f      	ldr	r6, [pc, #60]	; (81190 <__libc_init_array+0x40>)
   81154:	4d0f      	ldr	r5, [pc, #60]	; (81194 <__libc_init_array+0x44>)
   81156:	1b76      	subs	r6, r6, r5
   81158:	10b6      	asrs	r6, r6, #2
   8115a:	d007      	beq.n	8116c <__libc_init_array+0x1c>
   8115c:	3d04      	subs	r5, #4
   8115e:	2400      	movs	r4, #0
   81160:	3401      	adds	r4, #1
   81162:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81166:	4798      	blx	r3
   81168:	42a6      	cmp	r6, r4
   8116a:	d1f9      	bne.n	81160 <__libc_init_array+0x10>
   8116c:	4e0a      	ldr	r6, [pc, #40]	; (81198 <__libc_init_array+0x48>)
   8116e:	4d0b      	ldr	r5, [pc, #44]	; (8119c <__libc_init_array+0x4c>)
   81170:	f000 f896 	bl	812a0 <_init>
   81174:	1b76      	subs	r6, r6, r5
   81176:	10b6      	asrs	r6, r6, #2
   81178:	d008      	beq.n	8118c <__libc_init_array+0x3c>
   8117a:	3d04      	subs	r5, #4
   8117c:	2400      	movs	r4, #0
   8117e:	3401      	adds	r4, #1
   81180:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81184:	4798      	blx	r3
   81186:	42a6      	cmp	r6, r4
   81188:	d1f9      	bne.n	8117e <__libc_init_array+0x2e>
   8118a:	bd70      	pop	{r4, r5, r6, pc}
   8118c:	bd70      	pop	{r4, r5, r6, pc}
   8118e:	bf00      	nop
   81190:	000812ac 	.word	0x000812ac
   81194:	000812ac 	.word	0x000812ac
   81198:	000812b4 	.word	0x000812b4
   8119c:	000812ac 	.word	0x000812ac

000811a0 <register_fini>:
   811a0:	4b02      	ldr	r3, [pc, #8]	; (811ac <register_fini+0xc>)
   811a2:	b113      	cbz	r3, 811aa <register_fini+0xa>
   811a4:	4802      	ldr	r0, [pc, #8]	; (811b0 <register_fini+0x10>)
   811a6:	f000 b805 	b.w	811b4 <atexit>
   811aa:	4770      	bx	lr
   811ac:	00000000 	.word	0x00000000
   811b0:	000811c1 	.word	0x000811c1

000811b4 <atexit>:
   811b4:	4601      	mov	r1, r0
   811b6:	2000      	movs	r0, #0
   811b8:	4602      	mov	r2, r0
   811ba:	4603      	mov	r3, r0
   811bc:	f000 b818 	b.w	811f0 <__register_exitproc>

000811c0 <__libc_fini_array>:
   811c0:	b538      	push	{r3, r4, r5, lr}
   811c2:	4d09      	ldr	r5, [pc, #36]	; (811e8 <__libc_fini_array+0x28>)
   811c4:	4c09      	ldr	r4, [pc, #36]	; (811ec <__libc_fini_array+0x2c>)
   811c6:	1b64      	subs	r4, r4, r5
   811c8:	10a4      	asrs	r4, r4, #2
   811ca:	bf18      	it	ne
   811cc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   811d0:	d005      	beq.n	811de <__libc_fini_array+0x1e>
   811d2:	3c01      	subs	r4, #1
   811d4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   811d8:	4798      	blx	r3
   811da:	2c00      	cmp	r4, #0
   811dc:	d1f9      	bne.n	811d2 <__libc_fini_array+0x12>
   811de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   811e2:	f000 b867 	b.w	812b4 <_fini>
   811e6:	bf00      	nop
   811e8:	000812c0 	.word	0x000812c0
   811ec:	000812c4 	.word	0x000812c4

000811f0 <__register_exitproc>:
   811f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   811f2:	4c27      	ldr	r4, [pc, #156]	; (81290 <__register_exitproc+0xa0>)
   811f4:	b085      	sub	sp, #20
   811f6:	6826      	ldr	r6, [r4, #0]
   811f8:	4607      	mov	r7, r0
   811fa:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   811fe:	2c00      	cmp	r4, #0
   81200:	d040      	beq.n	81284 <__register_exitproc+0x94>
   81202:	6865      	ldr	r5, [r4, #4]
   81204:	2d1f      	cmp	r5, #31
   81206:	dd1e      	ble.n	81246 <__register_exitproc+0x56>
   81208:	4822      	ldr	r0, [pc, #136]	; (81294 <__register_exitproc+0xa4>)
   8120a:	b918      	cbnz	r0, 81214 <__register_exitproc+0x24>
   8120c:	f04f 30ff 	mov.w	r0, #4294967295
   81210:	b005      	add	sp, #20
   81212:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81214:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81218:	9103      	str	r1, [sp, #12]
   8121a:	9202      	str	r2, [sp, #8]
   8121c:	9301      	str	r3, [sp, #4]
   8121e:	f3af 8000 	nop.w
   81222:	9903      	ldr	r1, [sp, #12]
   81224:	4604      	mov	r4, r0
   81226:	9a02      	ldr	r2, [sp, #8]
   81228:	9b01      	ldr	r3, [sp, #4]
   8122a:	2800      	cmp	r0, #0
   8122c:	d0ee      	beq.n	8120c <__register_exitproc+0x1c>
   8122e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   81232:	2000      	movs	r0, #0
   81234:	6025      	str	r5, [r4, #0]
   81236:	6060      	str	r0, [r4, #4]
   81238:	4605      	mov	r5, r0
   8123a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8123e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   81242:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   81246:	b93f      	cbnz	r7, 81258 <__register_exitproc+0x68>
   81248:	1c6b      	adds	r3, r5, #1
   8124a:	2000      	movs	r0, #0
   8124c:	3502      	adds	r5, #2
   8124e:	6063      	str	r3, [r4, #4]
   81250:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   81254:	b005      	add	sp, #20
   81256:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81258:	2601      	movs	r6, #1
   8125a:	40ae      	lsls	r6, r5
   8125c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   81260:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   81264:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   81268:	2f02      	cmp	r7, #2
   8126a:	ea42 0206 	orr.w	r2, r2, r6
   8126e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   81272:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   81276:	d1e7      	bne.n	81248 <__register_exitproc+0x58>
   81278:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8127c:	431e      	orrs	r6, r3
   8127e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   81282:	e7e1      	b.n	81248 <__register_exitproc+0x58>
   81284:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81288:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8128c:	e7b9      	b.n	81202 <__register_exitproc+0x12>
   8128e:	bf00      	nop
   81290:	0008129c 	.word	0x0008129c
   81294:	00000000 	.word	0x00000000
   81298:	00000043 	.word	0x00000043

0008129c <_global_impure_ptr>:
   8129c:	20000008                                ... 

000812a0 <_init>:
   812a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   812a2:	bf00      	nop
   812a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   812a6:	bc08      	pop	{r3}
   812a8:	469e      	mov	lr, r3
   812aa:	4770      	bx	lr

000812ac <__init_array_start>:
   812ac:	000811a1 	.word	0x000811a1

000812b0 <__frame_dummy_init_array_entry>:
   812b0:	00080119                                ....

000812b4 <_fini>:
   812b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   812b6:	bf00      	nop
   812b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   812ba:	bc08      	pop	{r3}
   812bc:	469e      	mov	lr, r3
   812be:	4770      	bx	lr

000812c0 <__fini_array_start>:
   812c0:	000800f5 	.word	0x000800f5
