
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000197c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0008197c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  20000438  00081db4  00010438  2**2
                  ALLOC
  3 .stack        00000400  20000488  00081e04  00010438  2**0
                  ALLOC
  4 .heap         00000200  20000888  00082204  00010438  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  7 .debug_info   000043d6  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000999  00000000  00000000  00014892  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000062c  00000000  00000000  0001522b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001b8  00000000  00000000  00015857  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00015a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011f10  00000000  00000000  00015b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000454a  00000000  00000000  00027a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005531c  00000000  00000000  0002bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000005d4  00000000  00000000  000812c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20000888 	.word	0x20000888
   80004:	00080149 	.word	0x00080149
   80008:	000801d1 	.word	0x000801d1
   8000c:	000801d1 	.word	0x000801d1
   80010:	000801d1 	.word	0x000801d1
   80014:	000801d1 	.word	0x000801d1
   80018:	000801d1 	.word	0x000801d1
	...
   8002c:	000801d1 	.word	0x000801d1
   80030:	000801d1 	.word	0x000801d1
   80034:	00000000 	.word	0x00000000
   80038:	000801d1 	.word	0x000801d1
   8003c:	000801d1 	.word	0x000801d1
   80040:	000801d1 	.word	0x000801d1
   80044:	000801d1 	.word	0x000801d1
   80048:	000801d1 	.word	0x000801d1
   8004c:	000801d1 	.word	0x000801d1
   80050:	000801d1 	.word	0x000801d1
   80054:	000801d1 	.word	0x000801d1
   80058:	000801d1 	.word	0x000801d1
   8005c:	000801d1 	.word	0x000801d1
   80060:	00080a0d 	.word	0x00080a0d
   80064:	000801d1 	.word	0x000801d1
   80068:	00000000 	.word	0x00000000
   8006c:	000801d1 	.word	0x000801d1
   80070:	000802a9 	.word	0x000802a9
   80074:	000801d1 	.word	0x000801d1
   80078:	000802e1 	.word	0x000802e1
	...
   80084:	000801d1 	.word	0x000801d1
   80088:	000801d1 	.word	0x000801d1
   8008c:	000801d1 	.word	0x000801d1
   80090:	000801d1 	.word	0x000801d1
   80094:	000801d1 	.word	0x000801d1
   80098:	000801d1 	.word	0x000801d1
   8009c:	000801d1 	.word	0x000801d1
   800a0:	000801d1 	.word	0x000801d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000801d1 	.word	0x000801d1
   800ac:	00080911 	.word	0x00080911
   800b0:	000801d1 	.word	0x000801d1
   800b4:	000801d1 	.word	0x000801d1
   800b8:	000801d1 	.word	0x000801d1
   800bc:	000801d1 	.word	0x000801d1
   800c0:	000801d1 	.word	0x000801d1
   800c4:	000801d1 	.word	0x000801d1
   800c8:	000801d1 	.word	0x000801d1
   800cc:	000801d1 	.word	0x000801d1
   800d0:	000801d1 	.word	0x000801d1
   800d4:	000801d1 	.word	0x000801d1
   800d8:	000801d1 	.word	0x000801d1
   800dc:	000801d1 	.word	0x000801d1
   800e0:	000801d1 	.word	0x000801d1
   800e4:	000801d1 	.word	0x000801d1
   800e8:	000801d1 	.word	0x000801d1
   800ec:	000801d1 	.word	0x000801d1
   800f0:	000801d1 	.word	0x000801d1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000438 	.word	0x20000438
   80110:	00000000 	.word	0x00000000
   80114:	0008197c 	.word	0x0008197c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008197c 	.word	0x0008197c
   8013c:	2000043c 	.word	0x2000043c
   80140:	0008197c 	.word	0x0008197c
   80144:	00000000 	.word	0x00000000

00080148 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   8014e:	4b17      	ldr	r3, [pc, #92]	; (801ac <Reset_Handler+0x64>)
   80150:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   80152:	4b17      	ldr	r3, [pc, #92]	; (801b0 <Reset_Handler+0x68>)
   80154:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   80156:	687a      	ldr	r2, [r7, #4]
   80158:	683b      	ldr	r3, [r7, #0]
   8015a:	429a      	cmp	r2, r3
   8015c:	d00c      	beq.n	80178 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   8015e:	e007      	b.n	80170 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   80160:	683b      	ldr	r3, [r7, #0]
   80162:	1d1a      	adds	r2, r3, #4
   80164:	603a      	str	r2, [r7, #0]
   80166:	687a      	ldr	r2, [r7, #4]
   80168:	1d11      	adds	r1, r2, #4
   8016a:	6079      	str	r1, [r7, #4]
   8016c:	6812      	ldr	r2, [r2, #0]
   8016e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   80170:	683a      	ldr	r2, [r7, #0]
   80172:	4b10      	ldr	r3, [pc, #64]	; (801b4 <Reset_Handler+0x6c>)
   80174:	429a      	cmp	r2, r3
   80176:	d3f3      	bcc.n	80160 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80178:	4b0f      	ldr	r3, [pc, #60]	; (801b8 <Reset_Handler+0x70>)
   8017a:	603b      	str	r3, [r7, #0]
   8017c:	e004      	b.n	80188 <Reset_Handler+0x40>
                *pDest++ = 0;
   8017e:	683b      	ldr	r3, [r7, #0]
   80180:	1d1a      	adds	r2, r3, #4
   80182:	603a      	str	r2, [r7, #0]
   80184:	2200      	movs	r2, #0
   80186:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80188:	683a      	ldr	r2, [r7, #0]
   8018a:	4b0c      	ldr	r3, [pc, #48]	; (801bc <Reset_Handler+0x74>)
   8018c:	429a      	cmp	r2, r3
   8018e:	d3f6      	bcc.n	8017e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   80190:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x78>)
   80192:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80194:	4a0b      	ldr	r2, [pc, #44]	; (801c4 <Reset_Handler+0x7c>)
   80196:	687b      	ldr	r3, [r7, #4]
   80198:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8019c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   801a0:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   801a2:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x80>)
   801a4:	4798      	blx	r3

        /* Branch to main function */
        main();
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x84>)
   801a8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   801aa:	e7fe      	b.n	801aa <Reset_Handler+0x62>
   801ac:	0008197c 	.word	0x0008197c
   801b0:	20000000 	.word	0x20000000
   801b4:	20000438 	.word	0x20000438
   801b8:	20000438 	.word	0x20000438
   801bc:	20000488 	.word	0x20000488
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	00081449 	.word	0x00081449
   801cc:	00080319 	.word	0x00080319

000801d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   801d0:	b480      	push	{r7}
   801d2:	af00      	add	r7, sp, #0
        while (1) {
        }
   801d4:	e7fe      	b.n	801d4 <Dummy_Handler+0x4>
   801d6:	bf00      	nop

000801d8 <SystemInit>:
/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
   801d8:	b480      	push	{r7}
   801da:	af00      	add	r7, sp, #0
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801dc:	4b2a      	ldr	r3, [pc, #168]	; (80288 <SystemInit+0xb0>)
   801de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801e2:	601a      	str	r2, [r3, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801e4:	4b29      	ldr	r3, [pc, #164]	; (8028c <SystemInit+0xb4>)
   801e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801ea:	601a      	str	r2, [r3, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801ec:	4b28      	ldr	r3, [pc, #160]	; (80290 <SystemInit+0xb8>)
   801ee:	6a1b      	ldr	r3, [r3, #32]
   801f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   801f4:	2b00      	cmp	r3, #0
   801f6:	d109      	bne.n	8020c <SystemInit+0x34>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801f8:	4b25      	ldr	r3, [pc, #148]	; (80290 <SystemInit+0xb8>)
   801fa:	4a26      	ldr	r2, [pc, #152]	; (80294 <SystemInit+0xbc>)
   801fc:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801fe:	bf00      	nop
   80200:	4b23      	ldr	r3, [pc, #140]	; (80290 <SystemInit+0xb8>)
   80202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80204:	f003 0301 	and.w	r3, r3, #1
   80208:	2b00      	cmp	r3, #0
   8020a:	d0f9      	beq.n	80200 <SystemInit+0x28>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8020c:	4b20      	ldr	r3, [pc, #128]	; (80290 <SystemInit+0xb8>)
   8020e:	4a22      	ldr	r2, [pc, #136]	; (80298 <SystemInit+0xc0>)
   80210:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80212:	bf00      	nop
   80214:	4b1e      	ldr	r3, [pc, #120]	; (80290 <SystemInit+0xb8>)
   80216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8021c:	2b00      	cmp	r3, #0
   8021e:	d0f9      	beq.n	80214 <SystemInit+0x3c>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80220:	4b1b      	ldr	r3, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80222:	4a1b      	ldr	r2, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80224:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80226:	f022 0203 	bic.w	r2, r2, #3
   8022a:	f042 0201 	orr.w	r2, r2, #1
   8022e:	631a      	str	r2, [r3, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80230:	bf00      	nop
   80232:	4b17      	ldr	r3, [pc, #92]	; (80290 <SystemInit+0xb8>)
   80234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80236:	f003 0308 	and.w	r3, r3, #8
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f9      	beq.n	80232 <SystemInit+0x5a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8023e:	4b14      	ldr	r3, [pc, #80]	; (80290 <SystemInit+0xb8>)
   80240:	4a16      	ldr	r2, [pc, #88]	; (8029c <SystemInit+0xc4>)
   80242:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80244:	bf00      	nop
   80246:	4b12      	ldr	r3, [pc, #72]	; (80290 <SystemInit+0xb8>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f003 0302 	and.w	r3, r3, #2
   8024e:	2b00      	cmp	r3, #0
   80250:	d0f9      	beq.n	80246 <SystemInit+0x6e>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80252:	4b0f      	ldr	r3, [pc, #60]	; (80290 <SystemInit+0xb8>)
   80254:	2211      	movs	r2, #17
   80256:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80258:	bf00      	nop
   8025a:	4b0d      	ldr	r3, [pc, #52]	; (80290 <SystemInit+0xb8>)
   8025c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8025e:	f003 0308 	and.w	r3, r3, #8
   80262:	2b00      	cmp	r3, #0
   80264:	d0f9      	beq.n	8025a <SystemInit+0x82>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80266:	4b0a      	ldr	r3, [pc, #40]	; (80290 <SystemInit+0xb8>)
   80268:	2212      	movs	r2, #18
   8026a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8026c:	bf00      	nop
   8026e:	4b08      	ldr	r3, [pc, #32]	; (80290 <SystemInit+0xb8>)
   80270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80272:	f003 0308 	and.w	r3, r3, #8
   80276:	2b00      	cmp	r3, #0
   80278:	d0f9      	beq.n	8026e <SystemInit+0x96>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8027a:	4b09      	ldr	r3, [pc, #36]	; (802a0 <SystemInit+0xc8>)
   8027c:	4a09      	ldr	r2, [pc, #36]	; (802a4 <SystemInit+0xcc>)
   8027e:	601a      	str	r2, [r3, #0]
}
   80280:	46bd      	mov	sp, r7
   80282:	f85d 7b04 	ldr.w	r7, [sp], #4
   80286:	4770      	bx	lr
   80288:	400e0a00 	.word	0x400e0a00
   8028c:	400e0c00 	.word	0x400e0c00
   80290:	400e0600 	.word	0x400e0600
   80294:	00370809 	.word	0x00370809
   80298:	01370809 	.word	0x01370809
   8029c:	200d3f01 	.word	0x200d3f01
   802a0:	20000000 	.word	0x20000000
   802a4:	0501bd00 	.word	0x0501bd00

000802a8 <PIOB_Handler>:


// *************************************************************************************************************************************

void PIOB_Handler()
{
   802a8:	b480      	push	{r7}
   802aa:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTB we need to
	//  check if PB27 is the one triggering the interrupt.
	if((PIOB->PIO_ISR & PIO_PB27)==PIO_PB27){
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <PIOB_Handler+0x2c>)
   802ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   802b4:	2b00      	cmp	r3, #0
   802b6:	d009      	beq.n	802cc <PIOB_Handler+0x24>
		iEncoder_ST++;
   802b8:	4b07      	ldr	r3, [pc, #28]	; (802d8 <PIOB_Handler+0x30>)
   802ba:	681b      	ldr	r3, [r3, #0]
   802bc:	1c5a      	adds	r2, r3, #1
   802be:	4b06      	ldr	r3, [pc, #24]	; (802d8 <PIOB_Handler+0x30>)
   802c0:	601a      	str	r2, [r3, #0]
		iEncoder_ST_current++;
   802c2:	4b06      	ldr	r3, [pc, #24]	; (802dc <PIOB_Handler+0x34>)
   802c4:	681b      	ldr	r3, [r3, #0]
   802c6:	1c5a      	adds	r2, r3, #1
   802c8:	4b04      	ldr	r3, [pc, #16]	; (802dc <PIOB_Handler+0x34>)
   802ca:	601a      	str	r2, [r3, #0]
	}
}
   802cc:	46bd      	mov	sp, r7
   802ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   802d2:	4770      	bx	lr
   802d4:	400e1000 	.word	0x400e1000
   802d8:	2000045c 	.word	0x2000045c
   802dc:	20000464 	.word	0x20000464

000802e0 <PIOD_Handler>:

void PIOD_Handler()
{
   802e0:	b480      	push	{r7}
   802e2:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTD we need to
	//  check if PD8 is the one triggering the interrupt.
	if((PIOD->PIO_ISR & PIO_PD8)==PIO_PD8){
   802e4:	4b09      	ldr	r3, [pc, #36]	; (8030c <PIOD_Handler+0x2c>)
   802e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
   802ec:	2b00      	cmp	r3, #0
   802ee:	d009      	beq.n	80304 <PIOD_Handler+0x24>
		iEncoder_DR++;
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <PIOD_Handler+0x30>)
   802f2:	681b      	ldr	r3, [r3, #0]
   802f4:	1c5a      	adds	r2, r3, #1
   802f6:	4b06      	ldr	r3, [pc, #24]	; (80310 <PIOD_Handler+0x30>)
   802f8:	601a      	str	r2, [r3, #0]
		iEncoder_DR_current++;
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <PIOD_Handler+0x34>)
   802fc:	681b      	ldr	r3, [r3, #0]
   802fe:	1c5a      	adds	r2, r3, #1
   80300:	4b04      	ldr	r3, [pc, #16]	; (80314 <PIOD_Handler+0x34>)
   80302:	601a      	str	r2, [r3, #0]
	}
}
   80304:	46bd      	mov	sp, r7
   80306:	f85d 7b04 	ldr.w	r7, [sp], #4
   8030a:	4770      	bx	lr
   8030c:	400e1400 	.word	0x400e1400
   80310:	20000470 	.word	0x20000470
   80314:	20000460 	.word	0x20000460

00080318 <main>:
uint8_t c = 4;

// *************************************************************************************************************************************

int main(void)
{
   80318:	b580      	push	{r7, lr}
   8031a:	af00      	add	r7, sp, #0
    /* Initialize the SAM system */
    SystemInit();
   8031c:	4b12      	ldr	r3, [pc, #72]	; (80368 <main+0x50>)
   8031e:	4798      	blx	r3
	/* Initialize pins */
	Pin_Configuration();
   80320:	4b12      	ldr	r3, [pc, #72]	; (8036c <main+0x54>)
   80322:	4798      	blx	r3
	/* Initialize PWM generator */
	InitPWMController_MCLK(); 
   80324:	4b12      	ldr	r3, [pc, #72]	; (80370 <main+0x58>)
   80326:	4798      	blx	r3
	/* Initialize timers */
	Configure_Timers();
   80328:	4b12      	ldr	r3, [pc, #72]	; (80374 <main+0x5c>)
   8032a:	4798      	blx	r3
	/* Configre UART */
	configure_uart();
   8032c:	4b12      	ldr	r3, [pc, #72]	; (80378 <main+0x60>)
   8032e:	4798      	blx	r3
	
	
	/* Disable watchdog */
	WDT->WDT_MR |=  WDT_MR_WDDIS;
   80330:	4b12      	ldr	r3, [pc, #72]	; (8037c <main+0x64>)
   80332:	4a12      	ldr	r2, [pc, #72]	; (8037c <main+0x64>)
   80334:	6852      	ldr	r2, [r2, #4]
   80336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   8033a:	605a      	str	r2, [r3, #4]
	
	/* Run initialization sequence for motor drivers */
	InitMotors();
   8033c:	4b10      	ldr	r3, [pc, #64]	; (80380 <main+0x68>)
   8033e:	4798      	blx	r3

	//selfTest();
	
    while (1) 
    {
		if(newSpeed){
   80340:	4b10      	ldr	r3, [pc, #64]	; (80384 <main+0x6c>)
   80342:	781b      	ldrb	r3, [r3, #0]
   80344:	b2db      	uxtb	r3, r3
   80346:	2b00      	cmp	r3, #0
   80348:	d00d      	beq.n	80366 <main+0x4e>
			newSpeed = 0;
   8034a:	4b0e      	ldr	r3, [pc, #56]	; (80384 <main+0x6c>)
   8034c:	2200      	movs	r2, #0
   8034e:	701a      	strb	r2, [r3, #0]
			ControlledDrive(percentage_ST,percentage_DR);
   80350:	4b0d      	ldr	r3, [pc, #52]	; (80388 <main+0x70>)
   80352:	781b      	ldrb	r3, [r3, #0]
   80354:	b2da      	uxtb	r2, r3
   80356:	4b0d      	ldr	r3, [pc, #52]	; (8038c <main+0x74>)
   80358:	781b      	ldrb	r3, [r3, #0]
   8035a:	b2db      	uxtb	r3, r3
   8035c:	4610      	mov	r0, r2
   8035e:	4619      	mov	r1, r3
   80360:	4b0b      	ldr	r3, [pc, #44]	; (80390 <main+0x78>)
   80362:	4798      	blx	r3
		}
		
	}
   80364:	e7ec      	b.n	80340 <main+0x28>
   80366:	e7eb      	b.n	80340 <main+0x28>
   80368:	000801d9 	.word	0x000801d9
   8036c:	000803c5 	.word	0x000803c5
   80370:	0008059d 	.word	0x0008059d
   80374:	000808b5 	.word	0x000808b5
   80378:	00080ab1 	.word	0x00080ab1
   8037c:	400e1a50 	.word	0x400e1a50
   80380:	00080759 	.word	0x00080759
   80384:	20000458 	.word	0x20000458
   80388:	2000046e 	.word	0x2000046e
   8038c:	20000468 	.word	0x20000468
   80390:	000807d1 	.word	0x000807d1

00080394 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80394:	b480      	push	{r7}
   80396:	b083      	sub	sp, #12
   80398:	af00      	add	r7, sp, #0
   8039a:	4603      	mov	r3, r0
   8039c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8039e:	4b08      	ldr	r3, [pc, #32]	; (803c0 <NVIC_EnableIRQ+0x2c>)
   803a0:	f997 2007 	ldrsb.w	r2, [r7, #7]
   803a4:	0952      	lsrs	r2, r2, #5
   803a6:	79f9      	ldrb	r1, [r7, #7]
   803a8:	f001 011f 	and.w	r1, r1, #31
   803ac:	2001      	movs	r0, #1
   803ae:	fa00 f101 	lsl.w	r1, r0, r1
   803b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803b6:	370c      	adds	r7, #12
   803b8:	46bd      	mov	sp, r7
   803ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   803be:	4770      	bx	lr
   803c0:	e000e100 	.word	0xe000e100

000803c4 <Pin_Configuration>:
// ----- Defines
#define _BV(bit) (0x1u << bit)

// *************************************************************************************************************************************
void Pin_Configuration()
{
   803c4:	b580      	push	{r7, lr}
   803c6:	af00      	add	r7, sp, #0
	// Enable clock for line C
		PMC->PMC_PCER0 |= _BV(ID_PIOC);
   803c8:	4b6f      	ldr	r3, [pc, #444]	; (80588 <Pin_Configuration+0x1c4>)
   803ca:	4a6f      	ldr	r2, [pc, #444]	; (80588 <Pin_Configuration+0x1c4>)
   803cc:	6912      	ldr	r2, [r2, #16]
   803ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   803d2:	611a      	str	r2, [r3, #16]
	// Enable clock for line B
		PMC->PMC_PCER0 |= _BV(ID_PIOB);
   803d4:	4b6c      	ldr	r3, [pc, #432]	; (80588 <Pin_Configuration+0x1c4>)
   803d6:	4a6c      	ldr	r2, [pc, #432]	; (80588 <Pin_Configuration+0x1c4>)
   803d8:	6912      	ldr	r2, [r2, #16]
   803da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   803de:	611a      	str	r2, [r3, #16]
	// Enable clock for line D
		PMC->PMC_PCER0 |= _BV(ID_PIOD);
   803e0:	4b69      	ldr	r3, [pc, #420]	; (80588 <Pin_Configuration+0x1c4>)
   803e2:	4a69      	ldr	r2, [pc, #420]	; (80588 <Pin_Configuration+0x1c4>)
   803e4:	6912      	ldr	r2, [r2, #16]
   803e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   803ea:	611a      	str	r2, [r3, #16]

	// Set pin 13[B27] as input for encoder data - left[ST]
		PIOB -> PIO_PER |= PIO_PB27;
   803ec:	4b67      	ldr	r3, [pc, #412]	; (8058c <Pin_Configuration+0x1c8>)
   803ee:	4a67      	ldr	r2, [pc, #412]	; (8058c <Pin_Configuration+0x1c8>)
   803f0:	6812      	ldr	r2, [r2, #0]
   803f2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   803f6:	601a      	str	r2, [r3, #0]
		PIOB -> PIO_ODR |= PIO_PB27;
   803f8:	4b64      	ldr	r3, [pc, #400]	; (8058c <Pin_Configuration+0x1c8>)
   803fa:	4a64      	ldr	r2, [pc, #400]	; (8058c <Pin_Configuration+0x1c8>)
   803fc:	6952      	ldr	r2, [r2, #20]
   803fe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80402:	615a      	str	r2, [r3, #20]
		PIOB -> PIO_PUDR |= PIO_PB27;
   80404:	4b61      	ldr	r3, [pc, #388]	; (8058c <Pin_Configuration+0x1c8>)
   80406:	4a61      	ldr	r2, [pc, #388]	; (8058c <Pin_Configuration+0x1c8>)
   80408:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8040a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8040e:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOB->PIO_AIMER |= PIO_PB27;
   80410:	4b5e      	ldr	r3, [pc, #376]	; (8058c <Pin_Configuration+0x1c8>)
   80412:	4a5e      	ldr	r2, [pc, #376]	; (8058c <Pin_Configuration+0x1c8>)
   80414:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   80418:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8041c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOB->PIO_ESR |= PIO_PB27;
   80420:	4b5a      	ldr	r3, [pc, #360]	; (8058c <Pin_Configuration+0x1c8>)
   80422:	4a5a      	ldr	r2, [pc, #360]	; (8058c <Pin_Configuration+0x1c8>)
   80424:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   80428:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8042c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Falling Edge/Low Level Select Register
		PIOB->PIO_REHLSR |= PIO_PB27;
   80430:	4b56      	ldr	r3, [pc, #344]	; (8058c <Pin_Configuration+0x1c8>)
   80432:	4a56      	ldr	r2, [pc, #344]	; (8058c <Pin_Configuration+0x1c8>)
   80434:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   80438:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8043c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTB.PB27
		PIOB->PIO_IER |= PIO_PB27;
   80440:	4b52      	ldr	r3, [pc, #328]	; (8058c <Pin_Configuration+0x1c8>)
   80442:	4a52      	ldr	r2, [pc, #328]	; (8058c <Pin_Configuration+0x1c8>)
   80444:	6c12      	ldr	r2, [r2, #64]	; 0x40
   80446:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8044a:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOB_IRQn);
   8044c:	200c      	movs	r0, #12
   8044e:	4b50      	ldr	r3, [pc, #320]	; (80590 <Pin_Configuration+0x1cc>)
   80450:	4798      	blx	r3
	
	// Set pin 12[D8] as input for encoder data - right[DR]
		PIOD -> PIO_PER |= PIO_PD8;
   80452:	4b50      	ldr	r3, [pc, #320]	; (80594 <Pin_Configuration+0x1d0>)
   80454:	4a4f      	ldr	r2, [pc, #316]	; (80594 <Pin_Configuration+0x1d0>)
   80456:	6812      	ldr	r2, [r2, #0]
   80458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8045c:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_ODR |= PIO_PD8;
   8045e:	4b4d      	ldr	r3, [pc, #308]	; (80594 <Pin_Configuration+0x1d0>)
   80460:	4a4c      	ldr	r2, [pc, #304]	; (80594 <Pin_Configuration+0x1d0>)
   80462:	6952      	ldr	r2, [r2, #20]
   80464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80468:	615a      	str	r2, [r3, #20]
		PIOD -> PIO_PUDR |= PIO_PD8;
   8046a:	4b4a      	ldr	r3, [pc, #296]	; (80594 <Pin_Configuration+0x1d0>)
   8046c:	4a49      	ldr	r2, [pc, #292]	; (80594 <Pin_Configuration+0x1d0>)
   8046e:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80474:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOD -> PIO_AIMER |= PIO_PD8;
   80476:	4b47      	ldr	r3, [pc, #284]	; (80594 <Pin_Configuration+0x1d0>)
   80478:	4a46      	ldr	r2, [pc, #280]	; (80594 <Pin_Configuration+0x1d0>)
   8047a:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   8047e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80482:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOD -> PIO_ESR |= PIO_PD8;
   80486:	4b43      	ldr	r3, [pc, #268]	; (80594 <Pin_Configuration+0x1d0>)
   80488:	4a42      	ldr	r2, [pc, #264]	; (80594 <Pin_Configuration+0x1d0>)
   8048a:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   8048e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80492:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Falling Edge/Low Level Select Register
		PIOD -> PIO_REHLSR |= PIO_PD8;
   80496:	4b3f      	ldr	r3, [pc, #252]	; (80594 <Pin_Configuration+0x1d0>)
   80498:	4a3e      	ldr	r2, [pc, #248]	; (80594 <Pin_Configuration+0x1d0>)
   8049a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   8049e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804a2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTD.PD8
		PIOD -> PIO_IER |= PIO_PD8;
   804a6:	4b3b      	ldr	r3, [pc, #236]	; (80594 <Pin_Configuration+0x1d0>)
   804a8:	4a3a      	ldr	r2, [pc, #232]	; (80594 <Pin_Configuration+0x1d0>)
   804aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
   804ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804b0:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOD_IRQn);
   804b2:	200e      	movs	r0, #14
   804b4:	4b36      	ldr	r3, [pc, #216]	; (80590 <Pin_Configuration+0x1cc>)
   804b6:	4798      	blx	r3
		
	// Set pin 11[D7] as output for Buzzer - PCB2 pin U
		PIOD -> PIO_PER |= PIO_PD7; // PIO_PER = PIO enable register
   804b8:	4b36      	ldr	r3, [pc, #216]	; (80594 <Pin_Configuration+0x1d0>)
   804ba:	4a36      	ldr	r2, [pc, #216]	; (80594 <Pin_Configuration+0x1d0>)
   804bc:	6812      	ldr	r2, [r2, #0]
   804be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804c2:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_OER |= PIO_PD7; // PIO_OER = Output Enable Register
   804c4:	4b33      	ldr	r3, [pc, #204]	; (80594 <Pin_Configuration+0x1d0>)
   804c6:	4a33      	ldr	r2, [pc, #204]	; (80594 <Pin_Configuration+0x1d0>)
   804c8:	6912      	ldr	r2, [r2, #16]
   804ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804ce:	611a      	str	r2, [r3, #16]
		PIOD -> PIO_PUDR |= PIO_PD7; // Disable pull-up on pin D7
   804d0:	4b30      	ldr	r3, [pc, #192]	; (80594 <Pin_Configuration+0x1d0>)
   804d2:	4a30      	ldr	r2, [pc, #192]	; (80594 <Pin_Configuration+0x1d0>)
   804d4:	6e12      	ldr	r2, [r2, #96]	; 0x60
   804d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804da:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 9[C21] as PWM output for motors - left[ST]
		PIOC->PIO_PDR |= PIO_PC22; // PIO_PDR = PIO Disable register
   804dc:	4b2e      	ldr	r3, [pc, #184]	; (80598 <Pin_Configuration+0x1d4>)
   804de:	4a2e      	ldr	r2, [pc, #184]	; (80598 <Pin_Configuration+0x1d4>)
   804e0:	6852      	ldr	r2, [r2, #4]
   804e2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804e6:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC22; // PIO_ABSR = Peripheral AB Select Register
   804e8:	4b2b      	ldr	r3, [pc, #172]	; (80598 <Pin_Configuration+0x1d4>)
   804ea:	4a2b      	ldr	r2, [pc, #172]	; (80598 <Pin_Configuration+0x1d4>)
   804ec:	6f12      	ldr	r2, [r2, #112]	; 0x70
   804ee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804f2:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC22; // Enable output on pin C22
   804f4:	4b28      	ldr	r3, [pc, #160]	; (80598 <Pin_Configuration+0x1d4>)
   804f6:	4a28      	ldr	r2, [pc, #160]	; (80598 <Pin_Configuration+0x1d4>)
   804f8:	6912      	ldr	r2, [r2, #16]
   804fa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804fe:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC22; // Disable pull-up on pin C22
   80500:	4b25      	ldr	r3, [pc, #148]	; (80598 <Pin_Configuration+0x1d4>)
   80502:	4a25      	ldr	r2, [pc, #148]	; (80598 <Pin_Configuration+0x1d4>)
   80504:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80506:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   8050a:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 8[C22] as PWM output for motors - right[DR]
		PIOC->PIO_PDR |= PIO_PC21; // Disable PIO Control on PC21 and set up for Peripheral B
   8050c:	4b22      	ldr	r3, [pc, #136]	; (80598 <Pin_Configuration+0x1d4>)
   8050e:	4a22      	ldr	r2, [pc, #136]	; (80598 <Pin_Configuration+0x1d4>)
   80510:	6852      	ldr	r2, [r2, #4]
   80512:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   80516:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC21;
   80518:	4b1f      	ldr	r3, [pc, #124]	; (80598 <Pin_Configuration+0x1d4>)
   8051a:	4a1f      	ldr	r2, [pc, #124]	; (80598 <Pin_Configuration+0x1d4>)
   8051c:	6f12      	ldr	r2, [r2, #112]	; 0x70
   8051e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   80522:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC21; // Enable output on pin C21
   80524:	4b1c      	ldr	r3, [pc, #112]	; (80598 <Pin_Configuration+0x1d4>)
   80526:	4a1c      	ldr	r2, [pc, #112]	; (80598 <Pin_Configuration+0x1d4>)
   80528:	6912      	ldr	r2, [r2, #16]
   8052a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   8052e:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC21; // Enable pull-up on pin C21
   80530:	4b19      	ldr	r3, [pc, #100]	; (80598 <Pin_Configuration+0x1d4>)
   80532:	4a19      	ldr	r2, [pc, #100]	; (80598 <Pin_Configuration+0x1d4>)
   80534:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80536:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   8053a:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 7[C23] as output for LED - PCB2 pinS
		PIOC -> PIO_PER |= PIO_PC23;
   8053c:	4b16      	ldr	r3, [pc, #88]	; (80598 <Pin_Configuration+0x1d4>)
   8053e:	4a16      	ldr	r2, [pc, #88]	; (80598 <Pin_Configuration+0x1d4>)
   80540:	6812      	ldr	r2, [r2, #0]
   80542:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80546:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC23;
   80548:	4b13      	ldr	r3, [pc, #76]	; (80598 <Pin_Configuration+0x1d4>)
   8054a:	4a13      	ldr	r2, [pc, #76]	; (80598 <Pin_Configuration+0x1d4>)
   8054c:	6912      	ldr	r2, [r2, #16]
   8054e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80552:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC23;
   80554:	4b10      	ldr	r3, [pc, #64]	; (80598 <Pin_Configuration+0x1d4>)
   80556:	4a10      	ldr	r2, [pc, #64]	; (80598 <Pin_Configuration+0x1d4>)
   80558:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8055a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8055e:	661a      	str	r2, [r3, #96]	; 0x60
		
	// Set pin 6[C24] as output for PUMP - PCB2 pinH
		PIOC -> PIO_PER |= PIO_PC24;
   80560:	4b0d      	ldr	r3, [pc, #52]	; (80598 <Pin_Configuration+0x1d4>)
   80562:	4a0d      	ldr	r2, [pc, #52]	; (80598 <Pin_Configuration+0x1d4>)
   80564:	6812      	ldr	r2, [r2, #0]
   80566:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8056a:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC24;
   8056c:	4b0a      	ldr	r3, [pc, #40]	; (80598 <Pin_Configuration+0x1d4>)
   8056e:	4a0a      	ldr	r2, [pc, #40]	; (80598 <Pin_Configuration+0x1d4>)
   80570:	6912      	ldr	r2, [r2, #16]
   80572:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80576:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC24;
   80578:	4b07      	ldr	r3, [pc, #28]	; (80598 <Pin_Configuration+0x1d4>)
   8057a:	4a07      	ldr	r2, [pc, #28]	; (80598 <Pin_Configuration+0x1d4>)
   8057c:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8057e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80582:	661a      	str	r2, [r3, #96]	; 0x60
		////Falling Edge/Low Level Select Register
		//PIOB->PIO_REHLSR |= PIO_PB27;
		////Finally enable interrupts on PORTB.PB27
		//PIOB->PIO_IER |= PIO_PB27;
		//NVIC_EnableIRQ(PIOB_IRQn);
}
   80584:	bd80      	pop	{r7, pc}
   80586:	bf00      	nop
   80588:	400e0600 	.word	0x400e0600
   8058c:	400e1000 	.word	0x400e1000
   80590:	00080395 	.word	0x00080395
   80594:	400e1400 	.word	0x400e1400
   80598:	400e1200 	.word	0x400e1200

0008059c <InitPWMController_MCLK>:
void ControlledDrive(uint8_t percentage_ST, uint8_t percentage_DR);

// *************************************************************************************************************************************

void InitPWMController_MCLK()
{
   8059c:	b580      	push	{r7, lr}
   8059e:	af00      	add	r7, sp, #0
	//Enable the PWM clock (36) 
	PMC->PMC_PCER1 |= _BV((ID_PWM - 32)); // PMC_PCER1 = Peripheral Clock Enable Register 1
   805a0:	4b14      	ldr	r3, [pc, #80]	; (805f4 <InitPWMController_MCLK+0x58>)
   805a2:	4a14      	ldr	r2, [pc, #80]	; (805f4 <InitPWMController_MCLK+0x58>)
   805a4:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   805a8:	f042 0210 	orr.w	r2, r2, #16
   805ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	//Channel Prescaler - Use ClockA as configured in PWM_CLK
	//Preliminary frequency = 84000000 / 1024 = 82031 Hz
	PWM->PWM_CH_NUM[CHAN_ST].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   805b0:	4b11      	ldr	r3, [pc, #68]	; (805f8 <InitPWMController_MCLK+0x5c>)
   805b2:	220a      	movs	r2, #10
   805b4:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[CHAN_DR].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   805b8:	4b0f      	ldr	r3, [pc, #60]	; (805f8 <InitPWMController_MCLK+0x5c>)
   805ba:	220a      	movs	r2, #10
   805bc:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	//Final frequency = 82031 / 1600 = 51 Hz
	SetPeriod(CHAN_ST, 1640);
   805c0:	2004      	movs	r0, #4
   805c2:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   805c6:	4b0d      	ldr	r3, [pc, #52]	; (805fc <InitPWMController_MCLK+0x60>)
   805c8:	4798      	blx	r3
	//Duty cycle = (200 / 400) * 100 = 50%
	SetDuty(CHAN_ST, 100);
   805ca:	2004      	movs	r0, #4
   805cc:	2164      	movs	r1, #100	; 0x64
   805ce:	4b0c      	ldr	r3, [pc, #48]	; (80600 <InitPWMController_MCLK+0x64>)
   805d0:	4798      	blx	r3
	
	//Final frequency = 82031 / 1600 = 51Hz
	SetPeriod(CHAN_DR, 1640);
   805d2:	2005      	movs	r0, #5
   805d4:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   805d8:	4b08      	ldr	r3, [pc, #32]	; (805fc <InitPWMController_MCLK+0x60>)
   805da:	4798      	blx	r3
	//Duty cycle = (x / 800) * 100 = y%
	SetDuty(CHAN_DR, 100);
   805dc:	2005      	movs	r0, #5
   805de:	2164      	movs	r1, #100	; 0x64
   805e0:	4b07      	ldr	r3, [pc, #28]	; (80600 <InitPWMController_MCLK+0x64>)
   805e2:	4798      	blx	r3
	
	PWM->PWM_ENA = _BV(CHAN_DR); // PWM_ENA = PWM Enable Register
   805e4:	4b04      	ldr	r3, [pc, #16]	; (805f8 <InitPWMController_MCLK+0x5c>)
   805e6:	2220      	movs	r2, #32
   805e8:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA = _BV(CHAN_ST); // PWM_ENA = PWM Enable Register
   805ea:	4b03      	ldr	r3, [pc, #12]	; (805f8 <InitPWMController_MCLK+0x5c>)
   805ec:	2210      	movs	r2, #16
   805ee:	605a      	str	r2, [r3, #4]
}
   805f0:	bd80      	pop	{r7, pc}
   805f2:	bf00      	nop
   805f4:	400e0600 	.word	0x400e0600
   805f8:	40094000 	.word	0x40094000
   805fc:	00080605 	.word	0x00080605
   80600:	00080651 	.word	0x00080651

00080604 <SetPeriod>:

static void SetPeriod(uint32_t chan, int period)
{
   80604:	b480      	push	{r7}
   80606:	b083      	sub	sp, #12
   80608:	af00      	add	r7, sp, #0
   8060a:	6078      	str	r0, [r7, #4]
   8060c:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   8060e:	4b0f      	ldr	r3, [pc, #60]	; (8064c <SetPeriod+0x48>)
   80610:	68da      	ldr	r2, [r3, #12]
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2101      	movs	r1, #1
   80616:	fa01 f303 	lsl.w	r3, r1, r3
   8061a:	4013      	ands	r3, r2
   8061c:	2b00      	cmp	r3, #0
   8061e:	d108      	bne.n	80632 <SetPeriod+0x2e>
		PWM->PWM_CH_NUM[chan].PWM_CPRD = period; // PWM_CPRD = PWM Channel Period Register
   80620:	490a      	ldr	r1, [pc, #40]	; (8064c <SetPeriod+0x48>)
   80622:	683a      	ldr	r2, [r7, #0]
   80624:	687b      	ldr	r3, [r7, #4]
   80626:	015b      	lsls	r3, r3, #5
   80628:	440b      	add	r3, r1
   8062a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8062e:	605a      	str	r2, [r3, #4]
   80630:	e007      	b.n	80642 <SetPeriod+0x3e>
	else
		PWM->PWM_CH_NUM[chan].PWM_CPRDUPD = period; // PWM_CPRDUPD = PWM Channel Period Update Register
   80632:	4906      	ldr	r1, [pc, #24]	; (8064c <SetPeriod+0x48>)
   80634:	683a      	ldr	r2, [r7, #0]
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	015b      	lsls	r3, r3, #5
   8063a:	440b      	add	r3, r1
   8063c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80640:	601a      	str	r2, [r3, #0]
}
   80642:	370c      	adds	r7, #12
   80644:	46bd      	mov	sp, r7
   80646:	f85d 7b04 	ldr.w	r7, [sp], #4
   8064a:	4770      	bx	lr
   8064c:	40094000 	.word	0x40094000

00080650 <SetDuty>:

static void SetDuty(uint32_t chan, int duty)
{
   80650:	b480      	push	{r7}
   80652:	b083      	sub	sp, #12
   80654:	af00      	add	r7, sp, #0
   80656:	6078      	str	r0, [r7, #4]
   80658:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   8065a:	4b0f      	ldr	r3, [pc, #60]	; (80698 <SetDuty+0x48>)
   8065c:	68da      	ldr	r2, [r3, #12]
   8065e:	687b      	ldr	r3, [r7, #4]
   80660:	2101      	movs	r1, #1
   80662:	fa01 f303 	lsl.w	r3, r1, r3
   80666:	4013      	ands	r3, r2
   80668:	2b00      	cmp	r3, #0
   8066a:	d107      	bne.n	8067c <SetDuty+0x2c>
		PWM->PWM_CH_NUM[chan].PWM_CDTY = duty;
   8066c:	490a      	ldr	r1, [pc, #40]	; (80698 <SetDuty+0x48>)
   8066e:	683a      	ldr	r2, [r7, #0]
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	3310      	adds	r3, #16
   80674:	015b      	lsls	r3, r3, #5
   80676:	440b      	add	r3, r1
   80678:	605a      	str	r2, [r3, #4]
   8067a:	e007      	b.n	8068c <SetDuty+0x3c>
	else
		PWM->PWM_CH_NUM[chan].PWM_CDTYUPD = duty;
   8067c:	4906      	ldr	r1, [pc, #24]	; (80698 <SetDuty+0x48>)
   8067e:	683a      	ldr	r2, [r7, #0]
   80680:	687b      	ldr	r3, [r7, #4]
   80682:	015b      	lsls	r3, r3, #5
   80684:	440b      	add	r3, r1
   80686:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8068a:	601a      	str	r2, [r3, #0]
}
   8068c:	370c      	adds	r7, #12
   8068e:	46bd      	mov	sp, r7
   80690:	f85d 7b04 	ldr.w	r7, [sp], #4
   80694:	4770      	bx	lr
   80696:	bf00      	nop
   80698:	40094000 	.word	0x40094000
   8069c:	00000000 	.word	0x00000000

000806a0 <WriteMotors>:

void WriteMotors(int percent_ST, int percent_DR)
{
   806a0:	b590      	push	{r4, r7, lr}
   806a2:	b083      	sub	sp, #12
   806a4:	af00      	add	r7, sp, #0
   806a6:	6078      	str	r0, [r7, #4]
   806a8:	6039      	str	r1, [r7, #0]
	SetDuty(CHAN_ST,123+(percent_ST/2.43)); // PWM motor stanga
   806aa:	4b25      	ldr	r3, [pc, #148]	; (80740 <WriteMotors+0xa0>)
   806ac:	6878      	ldr	r0, [r7, #4]
   806ae:	4798      	blx	r3
   806b0:	4602      	mov	r2, r0
   806b2:	460b      	mov	r3, r1
   806b4:	4c23      	ldr	r4, [pc, #140]	; (80744 <WriteMotors+0xa4>)
   806b6:	4610      	mov	r0, r2
   806b8:	4619      	mov	r1, r3
   806ba:	a31d      	add	r3, pc, #116	; (adr r3, 80730 <WriteMotors+0x90>)
   806bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   806c0:	47a0      	blx	r4
   806c2:	4602      	mov	r2, r0
   806c4:	460b      	mov	r3, r1
   806c6:	4c20      	ldr	r4, [pc, #128]	; (80748 <WriteMotors+0xa8>)
   806c8:	4610      	mov	r0, r2
   806ca:	4619      	mov	r1, r3
   806cc:	a31a      	add	r3, pc, #104	; (adr r3, 80738 <WriteMotors+0x98>)
   806ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   806d2:	47a0      	blx	r4
   806d4:	4602      	mov	r2, r0
   806d6:	460b      	mov	r3, r1
   806d8:	4c1c      	ldr	r4, [pc, #112]	; (8074c <WriteMotors+0xac>)
   806da:	4610      	mov	r0, r2
   806dc:	4619      	mov	r1, r3
   806de:	47a0      	blx	r4
   806e0:	4603      	mov	r3, r0
   806e2:	2004      	movs	r0, #4
   806e4:	4619      	mov	r1, r3
   806e6:	4b1a      	ldr	r3, [pc, #104]	; (80750 <WriteMotors+0xb0>)
   806e8:	4798      	blx	r3
	SetDuty(CHAN_DR,123-(percent_DR/2.43)); // PWM motor dreapta
   806ea:	4b15      	ldr	r3, [pc, #84]	; (80740 <WriteMotors+0xa0>)
   806ec:	6838      	ldr	r0, [r7, #0]
   806ee:	4798      	blx	r3
   806f0:	4602      	mov	r2, r0
   806f2:	460b      	mov	r3, r1
   806f4:	4c13      	ldr	r4, [pc, #76]	; (80744 <WriteMotors+0xa4>)
   806f6:	4610      	mov	r0, r2
   806f8:	4619      	mov	r1, r3
   806fa:	a30d      	add	r3, pc, #52	; (adr r3, 80730 <WriteMotors+0x90>)
   806fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   80700:	47a0      	blx	r4
   80702:	4602      	mov	r2, r0
   80704:	460b      	mov	r3, r1
   80706:	4c13      	ldr	r4, [pc, #76]	; (80754 <WriteMotors+0xb4>)
   80708:	a10b      	add	r1, pc, #44	; (adr r1, 80738 <WriteMotors+0x98>)
   8070a:	e9d1 0100 	ldrd	r0, r1, [r1]
   8070e:	47a0      	blx	r4
   80710:	4602      	mov	r2, r0
   80712:	460b      	mov	r3, r1
   80714:	4c0d      	ldr	r4, [pc, #52]	; (8074c <WriteMotors+0xac>)
   80716:	4610      	mov	r0, r2
   80718:	4619      	mov	r1, r3
   8071a:	47a0      	blx	r4
   8071c:	4603      	mov	r3, r0
   8071e:	2005      	movs	r0, #5
   80720:	4619      	mov	r1, r3
   80722:	4b0b      	ldr	r3, [pc, #44]	; (80750 <WriteMotors+0xb0>)
   80724:	4798      	blx	r3
}
   80726:	370c      	adds	r7, #12
   80728:	46bd      	mov	sp, r7
   8072a:	bd90      	pop	{r4, r7, pc}
   8072c:	f3af 8000 	nop.w
   80730:	d70a3d71 	.word	0xd70a3d71
   80734:	400370a3 	.word	0x400370a3
   80738:	00000000 	.word	0x00000000
   8073c:	405ec000 	.word	0x405ec000
   80740:	00080f09 	.word	0x00080f09
   80744:	00081229 	.word	0x00081229
   80748:	00080c71 	.word	0x00080c71
   8074c:	000813f9 	.word	0x000813f9
   80750:	00080651 	.word	0x00080651
   80754:	00080c6d 	.word	0x00080c6d

00080758 <InitMotors>:

void InitMotors()
{
   80758:	b580      	push	{r7, lr}
   8075a:	af00      	add	r7, sp, #0
	WriteMotors(0,0);
   8075c:	2000      	movs	r0, #0
   8075e:	2100      	movs	r1, #0
   80760:	4b18      	ldr	r3, [pc, #96]	; (807c4 <InitMotors+0x6c>)
   80762:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23; 
   80764:	4b18      	ldr	r3, [pc, #96]	; (807c8 <InitMotors+0x70>)
   80766:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8076a:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   8076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80770:	4b16      	ldr	r3, [pc, #88]	; (807cc <InitMotors+0x74>)
   80772:	4798      	blx	r3
	
	WriteMotors(100,100);//Stop Motors; Percent_RIGHT|Percent_LEFT
   80774:	2064      	movs	r0, #100	; 0x64
   80776:	2164      	movs	r1, #100	; 0x64
   80778:	4b12      	ldr	r3, [pc, #72]	; (807c4 <InitMotors+0x6c>)
   8077a:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   8077c:	4b12      	ldr	r3, [pc, #72]	; (807c8 <InitMotors+0x70>)
   8077e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80782:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(1000);
   80784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80788:	4b10      	ldr	r3, [pc, #64]	; (807cc <InitMotors+0x74>)
   8078a:	4798      	blx	r3
	
	WriteMotors(-100,-100);
   8078c:	f06f 0063 	mvn.w	r0, #99	; 0x63
   80790:	f06f 0163 	mvn.w	r1, #99	; 0x63
   80794:	4b0b      	ldr	r3, [pc, #44]	; (807c4 <InitMotors+0x6c>)
   80796:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23;
   80798:	4b0b      	ldr	r3, [pc, #44]	; (807c8 <InitMotors+0x70>)
   8079a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8079e:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   807a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   807a4:	4b09      	ldr	r3, [pc, #36]	; (807cc <InitMotors+0x74>)
   807a6:	4798      	blx	r3
	
	WriteMotors(0,0);//Stop Motors; Percent_RIGHT|Percent_LEFT
   807a8:	2000      	movs	r0, #0
   807aa:	2100      	movs	r1, #0
   807ac:	4b05      	ldr	r3, [pc, #20]	; (807c4 <InitMotors+0x6c>)
   807ae:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   807b0:	4b05      	ldr	r3, [pc, #20]	; (807c8 <InitMotors+0x70>)
   807b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   807b6:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(3000);
   807b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   807bc:	4b03      	ldr	r3, [pc, #12]	; (807cc <InitMotors+0x74>)
   807be:	4798      	blx	r3
}  
   807c0:	bd80      	pop	{r7, pc}
   807c2:	bf00      	nop
   807c4:	000806a1 	.word	0x000806a1
   807c8:	400e1200 	.word	0x400e1200
   807cc:	00080935 	.word	0x00080935

000807d0 <ControlledDrive>:
	
	WriteMotors(iSpeed_ST,iSpeed_DR);
}


void ControlledDrive(uint8_t percentage_ST, uint8_t percentage_DR){
   807d0:	b580      	push	{r7, lr}
   807d2:	b084      	sub	sp, #16
   807d4:	af00      	add	r7, sp, #0
   807d6:	4602      	mov	r2, r0
   807d8:	460b      	mov	r3, r1
   807da:	71fa      	strb	r2, [r7, #7]
   807dc:	71bb      	strb	r3, [r7, #6]
	// Enable output
	PIOD->PIO_SODR = PIO_PD7;
   807de:	4b22      	ldr	r3, [pc, #136]	; (80868 <ControlledDrive+0x98>)
   807e0:	2280      	movs	r2, #128	; 0x80
   807e2:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   807e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   807e8:	4b20      	ldr	r3, [pc, #128]	; (8086c <ControlledDrive+0x9c>)
   807ea:	4798      	blx	r3
	// Disable output
	PIOD->PIO_CODR = PIO_PD7;
   807ec:	4b1e      	ldr	r3, [pc, #120]	; (80868 <ControlledDrive+0x98>)
   807ee:	2280      	movs	r2, #128	; 0x80
   807f0:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(1000);
   807f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   807f6:	4b1d      	ldr	r3, [pc, #116]	; (8086c <ControlledDrive+0x9c>)
   807f8:	4798      	blx	r3
	
	uint8_t st = 0;
   807fa:	2300      	movs	r3, #0
   807fc:	73fb      	strb	r3, [r7, #15]
	uint8_t dr = 0;
   807fe:	2300      	movs	r3, #0
   80800:	73bb      	strb	r3, [r7, #14]
	
	iEncoder_ST_current = 0;
   80802:	4b1b      	ldr	r3, [pc, #108]	; (80870 <ControlledDrive+0xa0>)
   80804:	2200      	movs	r2, #0
   80806:	601a      	str	r2, [r3, #0]
	iEncoder_DR_current = 0;
   80808:	4b1a      	ldr	r3, [pc, #104]	; (80874 <ControlledDrive+0xa4>)
   8080a:	2200      	movs	r2, #0
   8080c:	601a      	str	r2, [r3, #0]
	
	WriteMotors(70,70);
   8080e:	2046      	movs	r0, #70	; 0x46
   80810:	2146      	movs	r1, #70	; 0x46
   80812:	4b19      	ldr	r3, [pc, #100]	; (80878 <ControlledDrive+0xa8>)
   80814:	4798      	blx	r3
	
	while(st<1||dr<1){
   80816:	e01e      	b.n	80856 <ControlledDrive+0x86>
		if(iEncoder_DR_current >= percentage_DR){
   80818:	79ba      	ldrb	r2, [r7, #6]
   8081a:	4b16      	ldr	r3, [pc, #88]	; (80874 <ControlledDrive+0xa4>)
   8081c:	681b      	ldr	r3, [r3, #0]
   8081e:	429a      	cmp	r2, r3
   80820:	d804      	bhi.n	8082c <ControlledDrive+0x5c>
			iSpeed_DR = 0;
   80822:	4b16      	ldr	r3, [pc, #88]	; (8087c <ControlledDrive+0xac>)
   80824:	2200      	movs	r2, #0
   80826:	801a      	strh	r2, [r3, #0]
			st=1;
   80828:	2301      	movs	r3, #1
   8082a:	73fb      	strb	r3, [r7, #15]
		}
		if(iEncoder_ST_current >= percentage_ST){
   8082c:	79fa      	ldrb	r2, [r7, #7]
   8082e:	4b10      	ldr	r3, [pc, #64]	; (80870 <ControlledDrive+0xa0>)
   80830:	681b      	ldr	r3, [r3, #0]
   80832:	429a      	cmp	r2, r3
   80834:	d804      	bhi.n	80840 <ControlledDrive+0x70>
			iSpeed_ST = 0;
   80836:	4b12      	ldr	r3, [pc, #72]	; (80880 <ControlledDrive+0xb0>)
   80838:	2200      	movs	r2, #0
   8083a:	801a      	strh	r2, [r3, #0]
			dr=1;
   8083c:	2301      	movs	r3, #1
   8083e:	73bb      	strb	r3, [r7, #14]
		}
		WriteMotors(iSpeed_ST,iSpeed_DR);
   80840:	4b0f      	ldr	r3, [pc, #60]	; (80880 <ControlledDrive+0xb0>)
   80842:	881b      	ldrh	r3, [r3, #0]
   80844:	b29b      	uxth	r3, r3
   80846:	461a      	mov	r2, r3
   80848:	4b0c      	ldr	r3, [pc, #48]	; (8087c <ControlledDrive+0xac>)
   8084a:	881b      	ldrh	r3, [r3, #0]
   8084c:	b29b      	uxth	r3, r3
   8084e:	4610      	mov	r0, r2
   80850:	4619      	mov	r1, r3
   80852:	4b09      	ldr	r3, [pc, #36]	; (80878 <ControlledDrive+0xa8>)
   80854:	4798      	blx	r3
	iEncoder_ST_current = 0;
	iEncoder_DR_current = 0;
	
	WriteMotors(70,70);
	
	while(st<1||dr<1){
   80856:	7bfb      	ldrb	r3, [r7, #15]
   80858:	2b00      	cmp	r3, #0
   8085a:	d0dd      	beq.n	80818 <ControlledDrive+0x48>
   8085c:	7bbb      	ldrb	r3, [r7, #14]
   8085e:	2b00      	cmp	r3, #0
   80860:	d0da      	beq.n	80818 <ControlledDrive+0x48>
		}
		WriteMotors(iSpeed_ST,iSpeed_DR);
	}
	
	
   80862:	3710      	adds	r7, #16
   80864:	46bd      	mov	sp, r7
   80866:	bd80      	pop	{r7, pc}
   80868:	400e1400 	.word	0x400e1400
   8086c:	00080935 	.word	0x00080935
   80870:	20000464 	.word	0x20000464
   80874:	20000460 	.word	0x20000460
   80878:	000806a1 	.word	0x000806a1
   8087c:	2000046a 	.word	0x2000046a
   80880:	2000046c 	.word	0x2000046c

00080884 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80884:	b480      	push	{r7}
   80886:	b083      	sub	sp, #12
   80888:	af00      	add	r7, sp, #0
   8088a:	4603      	mov	r3, r0
   8088c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8088e:	4b08      	ldr	r3, [pc, #32]	; (808b0 <NVIC_EnableIRQ+0x2c>)
   80890:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80894:	0952      	lsrs	r2, r2, #5
   80896:	79f9      	ldrb	r1, [r7, #7]
   80898:	f001 011f 	and.w	r1, r1, #31
   8089c:	2001      	movs	r0, #1
   8089e:	fa00 f101 	lsl.w	r1, r0, r1
   808a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   808a6:	370c      	adds	r7, #12
   808a8:	46bd      	mov	sp, r7
   808aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   808ae:	4770      	bx	lr
   808b0:	e000e100 	.word	0xe000e100

000808b4 <Configure_Timers>:
void Configure_TC0(void);
void delay_ms(uint32_t iPrescription);

// *************************************************************************************************************************************

void Configure_Timers(){
   808b4:	b580      	push	{r7, lr}
   808b6:	af00      	add	r7, sp, #0
	Configure_TC0();
   808b8:	4b01      	ldr	r3, [pc, #4]	; (808c0 <Configure_Timers+0xc>)
   808ba:	4798      	blx	r3
}
   808bc:	bd80      	pop	{r7, pc}
   808be:	bf00      	nop
   808c0:	000808c5 	.word	0x000808c5

000808c4 <Configure_TC0>:

void Configure_TC0()
{
   808c4:	b580      	push	{r7, lr}
   808c6:	af00      	add	r7, sp, #0
	// Enable TC0 in PMC power management controller - ID 27
	PMC->PMC_PCER0 |= 1 << ID_TC0;
   808c8:	4b0e      	ldr	r3, [pc, #56]	; (80904 <Configure_TC0+0x40>)
   808ca:	4a0e      	ldr	r2, [pc, #56]	; (80904 <Configure_TC0+0x40>)
   808cc:	6912      	ldr	r2, [r2, #16]
   808ce:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   808d2:	611a      	str	r2, [r3, #16]
	
	// Disable the clock for TC0
	TC0->TC_CHANNEL->TC_CCR = TC_CCR_CLKDIS;
   808d4:	4b0c      	ldr	r3, [pc, #48]	; (80908 <Configure_TC0+0x44>)
   808d6:	2202      	movs	r2, #2
   808d8:	601a      	str	r2, [r3, #0]
	
	// Disable interrupts
	TC0->TC_CHANNEL->TC_IDR = 0xFFFFFFFF;
   808da:	4b0b      	ldr	r3, [pc, #44]	; (80908 <Configure_TC0+0x44>)
   808dc:	f04f 32ff 	mov.w	r2, #4294967295
   808e0:	629a      	str	r2, [r3, #40]	; 0x28
	
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   808e2:	4b09      	ldr	r3, [pc, #36]	; (80908 <Configure_TC0+0x44>)
   808e4:	6a1b      	ldr	r3, [r3, #32]
	
	// Set Mode
	TC0->TC_CHANNEL->TC_CMR = TC_CMR_CPCTRG | TC_CMR_TCCLKS_TIMER_CLOCK5;
   808e6:	4b08      	ldr	r3, [pc, #32]	; (80908 <Configure_TC0+0x44>)
   808e8:	f244 0204 	movw	r2, #16388	; 0x4004
   808ec:	605a      	str	r2, [r3, #4]
	
	// Set compare value register TC_CR
	TC0->TC_CHANNEL[0].TC_RC = 10000;
   808ee:	4b06      	ldr	r3, [pc, #24]	; (80908 <Configure_TC0+0x44>)
   808f0:	f242 7210 	movw	r2, #10000	; 0x2710
   808f4:	61da      	str	r2, [r3, #28]
	
	// Configure and enable interrupt on RC compare
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
   808f6:	201b      	movs	r0, #27
   808f8:	4b04      	ldr	r3, [pc, #16]	; (8090c <Configure_TC0+0x48>)
   808fa:	4798      	blx	r3
	TC0->TC_CHANNEL->TC_IER = TC_IER_CPCS;
   808fc:	4b02      	ldr	r3, [pc, #8]	; (80908 <Configure_TC0+0x44>)
   808fe:	2210      	movs	r2, #16
   80900:	625a      	str	r2, [r3, #36]	; 0x24
	
	// Enable interrupts
	//TC0->TC_CHANNEL->TC_IER = 0xFFFFFFFF;
}
   80902:	bd80      	pop	{r7, pc}
   80904:	400e0600 	.word	0x400e0600
   80908:	40080000 	.word	0x40080000
   8090c:	00080885 	.word	0x00080885

00080910 <TC0_Handler>:

void TC0_Handler(void)
{
   80910:	b480      	push	{r7}
   80912:	af00      	add	r7, sp, #0
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80914:	4b05      	ldr	r3, [pc, #20]	; (8092c <TC0_Handler+0x1c>)
   80916:	6a1b      	ldr	r3, [r3, #32]
	
	// Disable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;
   80918:	4b04      	ldr	r3, [pc, #16]	; (8092c <TC0_Handler+0x1c>)
   8091a:	2202      	movs	r2, #2
   8091c:	601a      	str	r2, [r3, #0]
	
	iDelay = 1;
   8091e:	4b04      	ldr	r3, [pc, #16]	; (80930 <TC0_Handler+0x20>)
   80920:	2201      	movs	r2, #1
   80922:	701a      	strb	r2, [r3, #0]
}
   80924:	46bd      	mov	sp, r7
   80926:	f85d 7b04 	ldr.w	r7, [sp], #4
   8092a:	4770      	bx	lr
   8092c:	40080000 	.word	0x40080000
   80930:	20000454 	.word	0x20000454

00080934 <delay_ms>:

void delay_ms(uint32_t iPrescription)
{
   80934:	b480      	push	{r7}
   80936:	b083      	sub	sp, #12
   80938:	af00      	add	r7, sp, #0
   8093a:	6078      	str	r0, [r7, #4]
	// Set compare value for TC0
	TC0->TC_CHANNEL[0].TC_RC = iPrescription*29;
   8093c:	490b      	ldr	r1, [pc, #44]	; (8096c <delay_ms+0x38>)
   8093e:	687a      	ldr	r2, [r7, #4]
   80940:	4613      	mov	r3, r2
   80942:	00db      	lsls	r3, r3, #3
   80944:	1a9b      	subs	r3, r3, r2
   80946:	009b      	lsls	r3, r3, #2
   80948:	4413      	add	r3, r2
   8094a:	61cb      	str	r3, [r1, #28]
	
	// Reset and enable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN|TC_CCR_SWTRG;
   8094c:	4b07      	ldr	r3, [pc, #28]	; (8096c <delay_ms+0x38>)
   8094e:	2205      	movs	r2, #5
   80950:	601a      	str	r2, [r3, #0]
	
	while(!iDelay);
   80952:	bf00      	nop
   80954:	4b06      	ldr	r3, [pc, #24]	; (80970 <delay_ms+0x3c>)
   80956:	781b      	ldrb	r3, [r3, #0]
   80958:	2b00      	cmp	r3, #0
   8095a:	d0fb      	beq.n	80954 <delay_ms+0x20>
	
	iDelay = 0;
   8095c:	4b04      	ldr	r3, [pc, #16]	; (80970 <delay_ms+0x3c>)
   8095e:	2200      	movs	r2, #0
   80960:	701a      	strb	r2, [r3, #0]
   80962:	370c      	adds	r7, #12
   80964:	46bd      	mov	sp, r7
   80966:	f85d 7b04 	ldr.w	r7, [sp], #4
   8096a:	4770      	bx	lr
   8096c:	40080000 	.word	0x40080000
   80970:	20000454 	.word	0x20000454

00080974 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80974:	b480      	push	{r7}
   80976:	b083      	sub	sp, #12
   80978:	af00      	add	r7, sp, #0
   8097a:	4603      	mov	r3, r0
   8097c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8097e:	4b08      	ldr	r3, [pc, #32]	; (809a0 <NVIC_EnableIRQ+0x2c>)
   80980:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80984:	0952      	lsrs	r2, r2, #5
   80986:	79f9      	ldrb	r1, [r7, #7]
   80988:	f001 011f 	and.w	r1, r1, #31
   8098c:	2001      	movs	r0, #1
   8098e:	fa00 f101 	lsl.w	r1, r0, r1
   80992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80996:	370c      	adds	r7, #12
   80998:	46bd      	mov	sp, r7
   8099a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8099e:	4770      	bx	lr
   809a0:	e000e100 	.word	0xe000e100

000809a4 <uart_getchar>:
void parseSpeed(char* buffer);

// *************************************************************************************************************************************

inline int uart_getchar(uint8_t *c)
{
   809a4:	b480      	push	{r7}
   809a6:	b083      	sub	sp, #12
   809a8:	af00      	add	r7, sp, #0
   809aa:	6078      	str	r0, [r7, #4]
	// Check if the receiver is ready
	if((UART->UART_SR & UART_SR_RXRDY) == 0)
   809ac:	4b09      	ldr	r3, [pc, #36]	; (809d4 <uart_getchar+0x30>)
   809ae:	695b      	ldr	r3, [r3, #20]
   809b0:	f003 0301 	and.w	r3, r3, #1
   809b4:	2b00      	cmp	r3, #0
   809b6:	d101      	bne.n	809bc <uart_getchar+0x18>
	return 1;
   809b8:	2301      	movs	r3, #1
   809ba:	e005      	b.n	809c8 <uart_getchar+0x24>
	
	// Read the character
	*c = (uint8_t) UART->UART_RHR;
   809bc:	4b05      	ldr	r3, [pc, #20]	; (809d4 <uart_getchar+0x30>)
   809be:	699b      	ldr	r3, [r3, #24]
   809c0:	b2da      	uxtb	r2, r3
   809c2:	687b      	ldr	r3, [r7, #4]
   809c4:	701a      	strb	r2, [r3, #0]
	return 0;
   809c6:	2300      	movs	r3, #0
}
   809c8:	4618      	mov	r0, r3
   809ca:	370c      	adds	r7, #12
   809cc:	46bd      	mov	sp, r7
   809ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   809d2:	4770      	bx	lr
   809d4:	400e0800 	.word	0x400e0800

000809d8 <uart_putchar>:

inline int uart_putchar(const uint8_t c)
{
   809d8:	b480      	push	{r7}
   809da:	b083      	sub	sp, #12
   809dc:	af00      	add	r7, sp, #0
   809de:	4603      	mov	r3, r0
   809e0:	71fb      	strb	r3, [r7, #7]
	// Check if the transmitter is ready
	if(!(UART->UART_SR & UART_SR_TXRDY))
   809e2:	4b09      	ldr	r3, [pc, #36]	; (80a08 <uart_putchar+0x30>)
   809e4:	695b      	ldr	r3, [r3, #20]
   809e6:	f003 0302 	and.w	r3, r3, #2
   809ea:	2b00      	cmp	r3, #0
   809ec:	d101      	bne.n	809f2 <uart_putchar+0x1a>
	return 1;
   809ee:	2301      	movs	r3, #1
   809f0:	e003      	b.n	809fa <uart_putchar+0x22>
	
	// Send the character
	UART->UART_THR = c;
   809f2:	4b05      	ldr	r3, [pc, #20]	; (80a08 <uart_putchar+0x30>)
   809f4:	79fa      	ldrb	r2, [r7, #7]
   809f6:	61da      	str	r2, [r3, #28]
	return 0;
   809f8:	2300      	movs	r3, #0
}
   809fa:	4618      	mov	r0, r3
   809fc:	370c      	adds	r7, #12
   809fe:	46bd      	mov	sp, r7
   80a00:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a04:	4770      	bx	lr
   80a06:	bf00      	nop
   80a08:	400e0800 	.word	0x400e0800

00080a0c <UART_Handler>:

void UART_Handler(void)
{
   80a0c:	b580      	push	{r7, lr}
   80a0e:	b082      	sub	sp, #8
   80a10:	af00      	add	r7, sp, #0
	uint8_t c = 0;
   80a12:	2300      	movs	r3, #0
   80a14:	70fb      	strb	r3, [r7, #3]
	int i = 0;
   80a16:	2300      	movs	r3, #0
   80a18:	607b      	str	r3, [r7, #4]
	memset(buffer, 0, sizeof(buffer));
   80a1a:	481e      	ldr	r0, [pc, #120]	; (80a94 <UART_Handler+0x88>)
   80a1c:	2100      	movs	r1, #0
   80a1e:	2214      	movs	r2, #20
   80a20:	4b1d      	ldr	r3, [pc, #116]	; (80a98 <UART_Handler+0x8c>)
   80a22:	4798      	blx	r3
	
	// Check if the interrupt source is receive ready
	if(UART->UART_IMR & UART_IMR_RXRDY)
   80a24:	4b1d      	ldr	r3, [pc, #116]	; (80a9c <UART_Handler+0x90>)
   80a26:	691b      	ldr	r3, [r3, #16]
   80a28:	f003 0301 	and.w	r3, r3, #1
   80a2c:	2b00      	cmp	r3, #0
   80a2e:	d02d      	beq.n	80a8c <UART_Handler+0x80>
	{
		while(1)
		{
			while(!uart_getchar(&c)){
   80a30:	e005      	b.n	80a3e <UART_Handler+0x32>
				buffer[i++]=c;
   80a32:	687b      	ldr	r3, [r7, #4]
   80a34:	1c5a      	adds	r2, r3, #1
   80a36:	607a      	str	r2, [r7, #4]
   80a38:	78f9      	ldrb	r1, [r7, #3]
   80a3a:	4a16      	ldr	r2, [pc, #88]	; (80a94 <UART_Handler+0x88>)
   80a3c:	54d1      	strb	r1, [r2, r3]
	// Check if the interrupt source is receive ready
	if(UART->UART_IMR & UART_IMR_RXRDY)
	{
		while(1)
		{
			while(!uart_getchar(&c)){
   80a3e:	1cfb      	adds	r3, r7, #3
   80a40:	4618      	mov	r0, r3
   80a42:	4b17      	ldr	r3, [pc, #92]	; (80aa0 <UART_Handler+0x94>)
   80a44:	4798      	blx	r3
   80a46:	4603      	mov	r3, r0
   80a48:	2b00      	cmp	r3, #0
   80a4a:	d0f2      	beq.n	80a32 <UART_Handler+0x26>
				buffer[i++]=c;
			}
			if(c == '\n' || (i >sizeof(buffer)-3))
   80a4c:	78fb      	ldrb	r3, [r7, #3]
   80a4e:	2b0a      	cmp	r3, #10
   80a50:	d003      	beq.n	80a5a <UART_Handler+0x4e>
   80a52:	687b      	ldr	r3, [r7, #4]
   80a54:	2b11      	cmp	r3, #17
   80a56:	d800      	bhi.n	80a5a <UART_Handler+0x4e>
				break;
		}
   80a58:	e7ea      	b.n	80a30 <UART_Handler+0x24>
		buffer[i++] = '\r';
   80a5a:	687b      	ldr	r3, [r7, #4]
   80a5c:	1c5a      	adds	r2, r3, #1
   80a5e:	607a      	str	r2, [r7, #4]
   80a60:	4a0c      	ldr	r2, [pc, #48]	; (80a94 <UART_Handler+0x88>)
   80a62:	210d      	movs	r1, #13
   80a64:	54d1      	strb	r1, [r2, r3]
		buffer[i++] = '\n';
   80a66:	687b      	ldr	r3, [r7, #4]
   80a68:	1c5a      	adds	r2, r3, #1
   80a6a:	607a      	str	r2, [r7, #4]
   80a6c:	4a09      	ldr	r2, [pc, #36]	; (80a94 <UART_Handler+0x88>)
   80a6e:	210a      	movs	r1, #10
   80a70:	54d1      	strb	r1, [r2, r3]
		sendString("Received: ", 10);
   80a72:	480c      	ldr	r0, [pc, #48]	; (80aa4 <UART_Handler+0x98>)
   80a74:	210a      	movs	r1, #10
   80a76:	4b0c      	ldr	r3, [pc, #48]	; (80aa8 <UART_Handler+0x9c>)
   80a78:	4798      	blx	r3
		sendString(buffer, i);
   80a7a:	687b      	ldr	r3, [r7, #4]
   80a7c:	b29b      	uxth	r3, r3
   80a7e:	4805      	ldr	r0, [pc, #20]	; (80a94 <UART_Handler+0x88>)
   80a80:	4619      	mov	r1, r3
   80a82:	4b09      	ldr	r3, [pc, #36]	; (80aa8 <UART_Handler+0x9c>)
   80a84:	4798      	blx	r3
		parseSpeed(buffer);
   80a86:	4803      	ldr	r0, [pc, #12]	; (80a94 <UART_Handler+0x88>)
   80a88:	4b08      	ldr	r3, [pc, #32]	; (80aac <UART_Handler+0xa0>)
   80a8a:	4798      	blx	r3
		
	}
}
   80a8c:	3708      	adds	r7, #8
   80a8e:	46bd      	mov	sp, r7
   80a90:	bd80      	pop	{r7, pc}
   80a92:	bf00      	nop
   80a94:	20000474 	.word	0x20000474
   80a98:	00081499 	.word	0x00081499
   80a9c:	400e0800 	.word	0x400e0800
   80aa0:	000809a5 	.word	0x000809a5
   80aa4:	00081824 	.word	0x00081824
   80aa8:	00080b69 	.word	0x00080b69
   80aac:	00080ba9 	.word	0x00080ba9

00080ab0 <configure_uart>:

void configure_uart(void)
{
   80ab0:	b580      	push	{r7, lr}
   80ab2:	b082      	sub	sp, #8
   80ab4:	af00      	add	r7, sp, #0
	uint32_t ul_sr;
	
	// ==> Pin configuration
	// Disable interrupts on Rx and Tx
	PIOA->PIO_IDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ab6:	4b28      	ldr	r3, [pc, #160]	; (80b58 <configure_uart+0xa8>)
   80ab8:	4a27      	ldr	r2, [pc, #156]	; (80b58 <configure_uart+0xa8>)
   80aba:	6c52      	ldr	r2, [r2, #68]	; 0x44
   80abc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   80ac0:	645a      	str	r2, [r3, #68]	; 0x44
	
	// Disable the PIO of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ac2:	4b25      	ldr	r3, [pc, #148]	; (80b58 <configure_uart+0xa8>)
   80ac4:	4a24      	ldr	r2, [pc, #144]	; (80b58 <configure_uart+0xa8>)
   80ac6:	6852      	ldr	r2, [r2, #4]
   80ac8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   80acc:	605a      	str	r2, [r3, #4]
	
	// Read current peripheral AB select register and set the Rx and Tx pins to 0 (Peripheral A function)
	ul_sr = PIOA->PIO_ABSR;
   80ace:	4b22      	ldr	r3, [pc, #136]	; (80b58 <configure_uart+0xa8>)
   80ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80ad2:	607b      	str	r3, [r7, #4]
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80ad4:	4b20      	ldr	r3, [pc, #128]	; (80b58 <configure_uart+0xa8>)
   80ad6:	4a20      	ldr	r2, [pc, #128]	; (80b58 <configure_uart+0xa8>)
   80ad8:	6f11      	ldr	r1, [r2, #112]	; 0x70
   80ada:	687a      	ldr	r2, [r7, #4]
   80adc:	400a      	ands	r2, r1
   80ade:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80ae2:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Enable the pull up on the Rx and Tx pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ae4:	4b1c      	ldr	r3, [pc, #112]	; (80b58 <configure_uart+0xa8>)
   80ae6:	f44f 7240 	mov.w	r2, #768	; 0x300
   80aea:	665a      	str	r2, [r3, #100]	; 0x64
	
	// ==> Actual uart configuration
	// Enable the peripheral uart controller
	PMC->PMC_PCER0 |= 1 << ID_UART;
   80aec:	4b1b      	ldr	r3, [pc, #108]	; (80b5c <configure_uart+0xac>)
   80aee:	4a1b      	ldr	r2, [pc, #108]	; (80b5c <configure_uart+0xac>)
   80af0:	6912      	ldr	r2, [r2, #16]
   80af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80af6:	611a      	str	r2, [r3, #16]
	
	// Reset and disable receiver & transmitter
	UART->UART_CR |= UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80af8:	4b19      	ldr	r3, [pc, #100]	; (80b60 <configure_uart+0xb0>)
   80afa:	4a19      	ldr	r2, [pc, #100]	; (80b60 <configure_uart+0xb0>)
   80afc:	6812      	ldr	r2, [r2, #0]
   80afe:	f042 02ac 	orr.w	r2, r2, #172	; 0xac
   80b02:	601a      	str	r2, [r3, #0]
	
	// Set the baudrate to 115200
	UART->UART_BRGR |= 45; // 84000000 / 16 * x = BaudRate (write x into UART_BRGR)
   80b04:	4b16      	ldr	r3, [pc, #88]	; (80b60 <configure_uart+0xb0>)
   80b06:	4a16      	ldr	r2, [pc, #88]	; (80b60 <configure_uart+0xb0>)
   80b08:	6a12      	ldr	r2, [r2, #32]
   80b0a:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
   80b0e:	621a      	str	r2, [r3, #32]
	
	// No Parity
	UART->UART_MR |= UART_MR_PAR_NO;
   80b10:	4b13      	ldr	r3, [pc, #76]	; (80b60 <configure_uart+0xb0>)
   80b12:	4a13      	ldr	r2, [pc, #76]	; (80b60 <configure_uart+0xb0>)
   80b14:	6852      	ldr	r2, [r2, #4]
   80b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   80b1a:	605a      	str	r2, [r3, #4]
	
	// Disable PDC channel requests
	UART->UART_PTCR |= UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80b1c:	4a10      	ldr	r2, [pc, #64]	; (80b60 <configure_uart+0xb0>)
   80b1e:	4b10      	ldr	r3, [pc, #64]	; (80b60 <configure_uart+0xb0>)
   80b20:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   80b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80b28:	f043 0302 	orr.w	r3, r3, #2
   80b2c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	
	// Disable / Enable interrupts on end of receive
	UART->UART_IDR = 0xFFFFFFFF;
   80b30:	4b0b      	ldr	r3, [pc, #44]	; (80b60 <configure_uart+0xb0>)
   80b32:	f04f 32ff 	mov.w	r2, #4294967295
   80b36:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ((IRQn_Type) ID_UART);
   80b38:	2008      	movs	r0, #8
   80b3a:	4b0a      	ldr	r3, [pc, #40]	; (80b64 <configure_uart+0xb4>)
   80b3c:	4798      	blx	r3
	UART->UART_IER = UART_IER_RXRDY;
   80b3e:	4b08      	ldr	r3, [pc, #32]	; (80b60 <configure_uart+0xb0>)
   80b40:	2201      	movs	r2, #1
   80b42:	609a      	str	r2, [r3, #8]
	
	// Enable receiver and trasmitter
	UART->UART_CR |= UART_CR_RXEN | UART_CR_TXEN;
   80b44:	4b06      	ldr	r3, [pc, #24]	; (80b60 <configure_uart+0xb0>)
   80b46:	4a06      	ldr	r2, [pc, #24]	; (80b60 <configure_uart+0xb0>)
   80b48:	6812      	ldr	r2, [r2, #0]
   80b4a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   80b4e:	601a      	str	r2, [r3, #0]
	
}
   80b50:	3708      	adds	r7, #8
   80b52:	46bd      	mov	sp, r7
   80b54:	bd80      	pop	{r7, pc}
   80b56:	bf00      	nop
   80b58:	400e0e00 	.word	0x400e0e00
   80b5c:	400e0600 	.word	0x400e0600
   80b60:	400e0800 	.word	0x400e0800
   80b64:	00080975 	.word	0x00080975

00080b68 <sendString>:


void sendString(const char* c, uint16_t length){
   80b68:	b580      	push	{r7, lr}
   80b6a:	b084      	sub	sp, #16
   80b6c:	af00      	add	r7, sp, #0
   80b6e:	6078      	str	r0, [r7, #4]
   80b70:	460b      	mov	r3, r1
   80b72:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<length;i++){
   80b74:	2300      	movs	r3, #0
   80b76:	60fb      	str	r3, [r7, #12]
   80b78:	e00d      	b.n	80b96 <sendString+0x2e>
		while(uart_putchar(*(c+i)));
   80b7a:	bf00      	nop
   80b7c:	68fb      	ldr	r3, [r7, #12]
   80b7e:	687a      	ldr	r2, [r7, #4]
   80b80:	4413      	add	r3, r2
   80b82:	781b      	ldrb	r3, [r3, #0]
   80b84:	4618      	mov	r0, r3
   80b86:	4b07      	ldr	r3, [pc, #28]	; (80ba4 <sendString+0x3c>)
   80b88:	4798      	blx	r3
   80b8a:	4603      	mov	r3, r0
   80b8c:	2b00      	cmp	r3, #0
   80b8e:	d1f5      	bne.n	80b7c <sendString+0x14>
	
}


void sendString(const char* c, uint16_t length){
	for(int i = 0;i<length;i++){
   80b90:	68fb      	ldr	r3, [r7, #12]
   80b92:	3301      	adds	r3, #1
   80b94:	60fb      	str	r3, [r7, #12]
   80b96:	887a      	ldrh	r2, [r7, #2]
   80b98:	68fb      	ldr	r3, [r7, #12]
   80b9a:	429a      	cmp	r2, r3
   80b9c:	dced      	bgt.n	80b7a <sendString+0x12>
		while(uart_putchar(*(c+i)));
	}
}
   80b9e:	3710      	adds	r7, #16
   80ba0:	46bd      	mov	sp, r7
   80ba2:	bd80      	pop	{r7, pc}
   80ba4:	000809d9 	.word	0x000809d9

00080ba8 <parseSpeed>:
		i--;
	}
}

void parseSpeed(char* buffer)
{
   80ba8:	b580      	push	{r7, lr}
   80baa:	b086      	sub	sp, #24
   80bac:	af00      	add	r7, sp, #0
   80bae:	6078      	str	r0, [r7, #4]
	char* token1;
	token1 = strtok(buffer, "#");
   80bb0:	6878      	ldr	r0, [r7, #4]
   80bb2:	4922      	ldr	r1, [pc, #136]	; (80c3c <parseSpeed+0x94>)
   80bb4:	4b22      	ldr	r3, [pc, #136]	; (80c40 <parseSpeed+0x98>)
   80bb6:	4798      	blx	r3
   80bb8:	6178      	str	r0, [r7, #20]
	if(token1 != NULL)
   80bba:	697b      	ldr	r3, [r7, #20]
   80bbc:	2b00      	cmp	r3, #0
   80bbe:	d03a      	beq.n	80c36 <parseSpeed+0x8e>
	{
		char* token2;
		token2 = strtok(NULL, "#");
   80bc0:	2000      	movs	r0, #0
   80bc2:	491e      	ldr	r1, [pc, #120]	; (80c3c <parseSpeed+0x94>)
   80bc4:	4b1e      	ldr	r3, [pc, #120]	; (80c40 <parseSpeed+0x98>)
   80bc6:	4798      	blx	r3
   80bc8:	6138      	str	r0, [r7, #16]
		if(token2 != NULL)
   80bca:	693b      	ldr	r3, [r7, #16]
   80bcc:	2b00      	cmp	r3, #0
   80bce:	d032      	beq.n	80c36 <parseSpeed+0x8e>
		{
			sendString("Speed1: ", 8);
   80bd0:	481c      	ldr	r0, [pc, #112]	; (80c44 <parseSpeed+0x9c>)
   80bd2:	2108      	movs	r1, #8
   80bd4:	4b1c      	ldr	r3, [pc, #112]	; (80c48 <parseSpeed+0xa0>)
   80bd6:	4798      	blx	r3
			sendString(token1, strlen(token1));
   80bd8:	6978      	ldr	r0, [r7, #20]
   80bda:	4b1c      	ldr	r3, [pc, #112]	; (80c4c <parseSpeed+0xa4>)
   80bdc:	4798      	blx	r3
   80bde:	4603      	mov	r3, r0
   80be0:	b29b      	uxth	r3, r3
   80be2:	6978      	ldr	r0, [r7, #20]
   80be4:	4619      	mov	r1, r3
   80be6:	4b18      	ldr	r3, [pc, #96]	; (80c48 <parseSpeed+0xa0>)
   80be8:	4798      	blx	r3
			sendString(" Speed2: ", 8);
   80bea:	4819      	ldr	r0, [pc, #100]	; (80c50 <parseSpeed+0xa8>)
   80bec:	2108      	movs	r1, #8
   80bee:	4b16      	ldr	r3, [pc, #88]	; (80c48 <parseSpeed+0xa0>)
   80bf0:	4798      	blx	r3
			sendString(token2, strlen(token2));
   80bf2:	6938      	ldr	r0, [r7, #16]
   80bf4:	4b15      	ldr	r3, [pc, #84]	; (80c4c <parseSpeed+0xa4>)
   80bf6:	4798      	blx	r3
   80bf8:	4603      	mov	r3, r0
   80bfa:	b29b      	uxth	r3, r3
   80bfc:	6938      	ldr	r0, [r7, #16]
   80bfe:	4619      	mov	r1, r3
   80c00:	4b11      	ldr	r3, [pc, #68]	; (80c48 <parseSpeed+0xa0>)
   80c02:	4798      	blx	r3
			
			char *end;
			percentage_ST = strtol(token1, &end, 10);
   80c04:	f107 030c 	add.w	r3, r7, #12
   80c08:	6978      	ldr	r0, [r7, #20]
   80c0a:	4619      	mov	r1, r3
   80c0c:	220a      	movs	r2, #10
   80c0e:	4b11      	ldr	r3, [pc, #68]	; (80c54 <parseSpeed+0xac>)
   80c10:	4798      	blx	r3
   80c12:	4603      	mov	r3, r0
   80c14:	b2da      	uxtb	r2, r3
   80c16:	4b10      	ldr	r3, [pc, #64]	; (80c58 <parseSpeed+0xb0>)
   80c18:	701a      	strb	r2, [r3, #0]
			percentage_DR = strtol(token2, &end, 10);
   80c1a:	f107 030c 	add.w	r3, r7, #12
   80c1e:	6938      	ldr	r0, [r7, #16]
   80c20:	4619      	mov	r1, r3
   80c22:	220a      	movs	r2, #10
   80c24:	4b0b      	ldr	r3, [pc, #44]	; (80c54 <parseSpeed+0xac>)
   80c26:	4798      	blx	r3
   80c28:	4603      	mov	r3, r0
   80c2a:	b2da      	uxtb	r2, r3
   80c2c:	4b0b      	ldr	r3, [pc, #44]	; (80c5c <parseSpeed+0xb4>)
   80c2e:	701a      	strb	r2, [r3, #0]
			
			newSpeed = 1;
   80c30:	4b0b      	ldr	r3, [pc, #44]	; (80c60 <parseSpeed+0xb8>)
   80c32:	2201      	movs	r2, #1
   80c34:	701a      	strb	r2, [r3, #0]
			//parsed[0]=speed1;
			//parsed[1]=speed2;
			//sendString(parsed, 2);
		}
	}
   80c36:	3718      	adds	r7, #24
   80c38:	46bd      	mov	sp, r7
   80c3a:	bd80      	pop	{r7, pc}
   80c3c:	00081830 	.word	0x00081830
   80c40:	0008158d 	.word	0x0008158d
   80c44:	00081834 	.word	0x00081834
   80c48:	00080b69 	.word	0x00080b69
   80c4c:	0008152d 	.word	0x0008152d
   80c50:	00081840 	.word	0x00081840
   80c54:	00081715 	.word	0x00081715
   80c58:	2000046e 	.word	0x2000046e
   80c5c:	20000468 	.word	0x20000468
   80c60:	20000458 	.word	0x20000458

00080c64 <__aeabi_drsub>:
   80c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80c68:	e002      	b.n	80c70 <__adddf3>
   80c6a:	bf00      	nop

00080c6c <__aeabi_dsub>:
   80c6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080c70 <__adddf3>:
   80c70:	b530      	push	{r4, r5, lr}
   80c72:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80c76:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80c7a:	ea94 0f05 	teq	r4, r5
   80c7e:	bf08      	it	eq
   80c80:	ea90 0f02 	teqeq	r0, r2
   80c84:	bf1f      	itttt	ne
   80c86:	ea54 0c00 	orrsne.w	ip, r4, r0
   80c8a:	ea55 0c02 	orrsne.w	ip, r5, r2
   80c8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80c92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80c96:	f000 80e2 	beq.w	80e5e <__adddf3+0x1ee>
   80c9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80c9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80ca2:	bfb8      	it	lt
   80ca4:	426d      	neglt	r5, r5
   80ca6:	dd0c      	ble.n	80cc2 <__adddf3+0x52>
   80ca8:	442c      	add	r4, r5
   80caa:	ea80 0202 	eor.w	r2, r0, r2
   80cae:	ea81 0303 	eor.w	r3, r1, r3
   80cb2:	ea82 0000 	eor.w	r0, r2, r0
   80cb6:	ea83 0101 	eor.w	r1, r3, r1
   80cba:	ea80 0202 	eor.w	r2, r0, r2
   80cbe:	ea81 0303 	eor.w	r3, r1, r3
   80cc2:	2d36      	cmp	r5, #54	; 0x36
   80cc4:	bf88      	it	hi
   80cc6:	bd30      	pophi	{r4, r5, pc}
   80cc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80ccc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80cd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80cd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80cd8:	d002      	beq.n	80ce0 <__adddf3+0x70>
   80cda:	4240      	negs	r0, r0
   80cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80ce0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80ce8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80cec:	d002      	beq.n	80cf4 <__adddf3+0x84>
   80cee:	4252      	negs	r2, r2
   80cf0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80cf4:	ea94 0f05 	teq	r4, r5
   80cf8:	f000 80a7 	beq.w	80e4a <__adddf3+0x1da>
   80cfc:	f1a4 0401 	sub.w	r4, r4, #1
   80d00:	f1d5 0e20 	rsbs	lr, r5, #32
   80d04:	db0d      	blt.n	80d22 <__adddf3+0xb2>
   80d06:	fa02 fc0e 	lsl.w	ip, r2, lr
   80d0a:	fa22 f205 	lsr.w	r2, r2, r5
   80d0e:	1880      	adds	r0, r0, r2
   80d10:	f141 0100 	adc.w	r1, r1, #0
   80d14:	fa03 f20e 	lsl.w	r2, r3, lr
   80d18:	1880      	adds	r0, r0, r2
   80d1a:	fa43 f305 	asr.w	r3, r3, r5
   80d1e:	4159      	adcs	r1, r3
   80d20:	e00e      	b.n	80d40 <__adddf3+0xd0>
   80d22:	f1a5 0520 	sub.w	r5, r5, #32
   80d26:	f10e 0e20 	add.w	lr, lr, #32
   80d2a:	2a01      	cmp	r2, #1
   80d2c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80d30:	bf28      	it	cs
   80d32:	f04c 0c02 	orrcs.w	ip, ip, #2
   80d36:	fa43 f305 	asr.w	r3, r3, r5
   80d3a:	18c0      	adds	r0, r0, r3
   80d3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80d40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80d44:	d507      	bpl.n	80d56 <__adddf3+0xe6>
   80d46:	f04f 0e00 	mov.w	lr, #0
   80d4a:	f1dc 0c00 	rsbs	ip, ip, #0
   80d4e:	eb7e 0000 	sbcs.w	r0, lr, r0
   80d52:	eb6e 0101 	sbc.w	r1, lr, r1
   80d56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80d5a:	d31b      	bcc.n	80d94 <__adddf3+0x124>
   80d5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80d60:	d30c      	bcc.n	80d7c <__adddf3+0x10c>
   80d62:	0849      	lsrs	r1, r1, #1
   80d64:	ea5f 0030 	movs.w	r0, r0, rrx
   80d68:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80d6c:	f104 0401 	add.w	r4, r4, #1
   80d70:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80d74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80d78:	f080 809a 	bcs.w	80eb0 <__adddf3+0x240>
   80d7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80d80:	bf08      	it	eq
   80d82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80d86:	f150 0000 	adcs.w	r0, r0, #0
   80d8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80d8e:	ea41 0105 	orr.w	r1, r1, r5
   80d92:	bd30      	pop	{r4, r5, pc}
   80d94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80d98:	4140      	adcs	r0, r0
   80d9a:	eb41 0101 	adc.w	r1, r1, r1
   80d9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80da2:	f1a4 0401 	sub.w	r4, r4, #1
   80da6:	d1e9      	bne.n	80d7c <__adddf3+0x10c>
   80da8:	f091 0f00 	teq	r1, #0
   80dac:	bf04      	itt	eq
   80dae:	4601      	moveq	r1, r0
   80db0:	2000      	moveq	r0, #0
   80db2:	fab1 f381 	clz	r3, r1
   80db6:	bf08      	it	eq
   80db8:	3320      	addeq	r3, #32
   80dba:	f1a3 030b 	sub.w	r3, r3, #11
   80dbe:	f1b3 0220 	subs.w	r2, r3, #32
   80dc2:	da0c      	bge.n	80dde <__adddf3+0x16e>
   80dc4:	320c      	adds	r2, #12
   80dc6:	dd08      	ble.n	80dda <__adddf3+0x16a>
   80dc8:	f102 0c14 	add.w	ip, r2, #20
   80dcc:	f1c2 020c 	rsb	r2, r2, #12
   80dd0:	fa01 f00c 	lsl.w	r0, r1, ip
   80dd4:	fa21 f102 	lsr.w	r1, r1, r2
   80dd8:	e00c      	b.n	80df4 <__adddf3+0x184>
   80dda:	f102 0214 	add.w	r2, r2, #20
   80dde:	bfd8      	it	le
   80de0:	f1c2 0c20 	rsble	ip, r2, #32
   80de4:	fa01 f102 	lsl.w	r1, r1, r2
   80de8:	fa20 fc0c 	lsr.w	ip, r0, ip
   80dec:	bfdc      	itt	le
   80dee:	ea41 010c 	orrle.w	r1, r1, ip
   80df2:	4090      	lslle	r0, r2
   80df4:	1ae4      	subs	r4, r4, r3
   80df6:	bfa2      	ittt	ge
   80df8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80dfc:	4329      	orrge	r1, r5
   80dfe:	bd30      	popge	{r4, r5, pc}
   80e00:	ea6f 0404 	mvn.w	r4, r4
   80e04:	3c1f      	subs	r4, #31
   80e06:	da1c      	bge.n	80e42 <__adddf3+0x1d2>
   80e08:	340c      	adds	r4, #12
   80e0a:	dc0e      	bgt.n	80e2a <__adddf3+0x1ba>
   80e0c:	f104 0414 	add.w	r4, r4, #20
   80e10:	f1c4 0220 	rsb	r2, r4, #32
   80e14:	fa20 f004 	lsr.w	r0, r0, r4
   80e18:	fa01 f302 	lsl.w	r3, r1, r2
   80e1c:	ea40 0003 	orr.w	r0, r0, r3
   80e20:	fa21 f304 	lsr.w	r3, r1, r4
   80e24:	ea45 0103 	orr.w	r1, r5, r3
   80e28:	bd30      	pop	{r4, r5, pc}
   80e2a:	f1c4 040c 	rsb	r4, r4, #12
   80e2e:	f1c4 0220 	rsb	r2, r4, #32
   80e32:	fa20 f002 	lsr.w	r0, r0, r2
   80e36:	fa01 f304 	lsl.w	r3, r1, r4
   80e3a:	ea40 0003 	orr.w	r0, r0, r3
   80e3e:	4629      	mov	r1, r5
   80e40:	bd30      	pop	{r4, r5, pc}
   80e42:	fa21 f004 	lsr.w	r0, r1, r4
   80e46:	4629      	mov	r1, r5
   80e48:	bd30      	pop	{r4, r5, pc}
   80e4a:	f094 0f00 	teq	r4, #0
   80e4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80e52:	bf06      	itte	eq
   80e54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80e58:	3401      	addeq	r4, #1
   80e5a:	3d01      	subne	r5, #1
   80e5c:	e74e      	b.n	80cfc <__adddf3+0x8c>
   80e5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80e62:	bf18      	it	ne
   80e64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80e68:	d029      	beq.n	80ebe <__adddf3+0x24e>
   80e6a:	ea94 0f05 	teq	r4, r5
   80e6e:	bf08      	it	eq
   80e70:	ea90 0f02 	teqeq	r0, r2
   80e74:	d005      	beq.n	80e82 <__adddf3+0x212>
   80e76:	ea54 0c00 	orrs.w	ip, r4, r0
   80e7a:	bf04      	itt	eq
   80e7c:	4619      	moveq	r1, r3
   80e7e:	4610      	moveq	r0, r2
   80e80:	bd30      	pop	{r4, r5, pc}
   80e82:	ea91 0f03 	teq	r1, r3
   80e86:	bf1e      	ittt	ne
   80e88:	2100      	movne	r1, #0
   80e8a:	2000      	movne	r0, #0
   80e8c:	bd30      	popne	{r4, r5, pc}
   80e8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80e92:	d105      	bne.n	80ea0 <__adddf3+0x230>
   80e94:	0040      	lsls	r0, r0, #1
   80e96:	4149      	adcs	r1, r1
   80e98:	bf28      	it	cs
   80e9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80e9e:	bd30      	pop	{r4, r5, pc}
   80ea0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80ea4:	bf3c      	itt	cc
   80ea6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80eaa:	bd30      	popcc	{r4, r5, pc}
   80eac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80eb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80eb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80eb8:	f04f 0000 	mov.w	r0, #0
   80ebc:	bd30      	pop	{r4, r5, pc}
   80ebe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80ec2:	bf1a      	itte	ne
   80ec4:	4619      	movne	r1, r3
   80ec6:	4610      	movne	r0, r2
   80ec8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80ecc:	bf1c      	itt	ne
   80ece:	460b      	movne	r3, r1
   80ed0:	4602      	movne	r2, r0
   80ed2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80ed6:	bf06      	itte	eq
   80ed8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80edc:	ea91 0f03 	teqeq	r1, r3
   80ee0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80ee4:	bd30      	pop	{r4, r5, pc}
   80ee6:	bf00      	nop

00080ee8 <__aeabi_ui2d>:
   80ee8:	f090 0f00 	teq	r0, #0
   80eec:	bf04      	itt	eq
   80eee:	2100      	moveq	r1, #0
   80ef0:	4770      	bxeq	lr
   80ef2:	b530      	push	{r4, r5, lr}
   80ef4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80ef8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80efc:	f04f 0500 	mov.w	r5, #0
   80f00:	f04f 0100 	mov.w	r1, #0
   80f04:	e750      	b.n	80da8 <__adddf3+0x138>
   80f06:	bf00      	nop

00080f08 <__aeabi_i2d>:
   80f08:	f090 0f00 	teq	r0, #0
   80f0c:	bf04      	itt	eq
   80f0e:	2100      	moveq	r1, #0
   80f10:	4770      	bxeq	lr
   80f12:	b530      	push	{r4, r5, lr}
   80f14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80f18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80f1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80f20:	bf48      	it	mi
   80f22:	4240      	negmi	r0, r0
   80f24:	f04f 0100 	mov.w	r1, #0
   80f28:	e73e      	b.n	80da8 <__adddf3+0x138>
   80f2a:	bf00      	nop

00080f2c <__aeabi_f2d>:
   80f2c:	0042      	lsls	r2, r0, #1
   80f2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80f32:	ea4f 0131 	mov.w	r1, r1, rrx
   80f36:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80f3a:	bf1f      	itttt	ne
   80f3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80f40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80f44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80f48:	4770      	bxne	lr
   80f4a:	f092 0f00 	teq	r2, #0
   80f4e:	bf14      	ite	ne
   80f50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80f54:	4770      	bxeq	lr
   80f56:	b530      	push	{r4, r5, lr}
   80f58:	f44f 7460 	mov.w	r4, #896	; 0x380
   80f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80f64:	e720      	b.n	80da8 <__adddf3+0x138>
   80f66:	bf00      	nop

00080f68 <__aeabi_ul2d>:
   80f68:	ea50 0201 	orrs.w	r2, r0, r1
   80f6c:	bf08      	it	eq
   80f6e:	4770      	bxeq	lr
   80f70:	b530      	push	{r4, r5, lr}
   80f72:	f04f 0500 	mov.w	r5, #0
   80f76:	e00a      	b.n	80f8e <__aeabi_l2d+0x16>

00080f78 <__aeabi_l2d>:
   80f78:	ea50 0201 	orrs.w	r2, r0, r1
   80f7c:	bf08      	it	eq
   80f7e:	4770      	bxeq	lr
   80f80:	b530      	push	{r4, r5, lr}
   80f82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80f86:	d502      	bpl.n	80f8e <__aeabi_l2d+0x16>
   80f88:	4240      	negs	r0, r0
   80f8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80f92:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80f96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80f9a:	f43f aedc 	beq.w	80d56 <__adddf3+0xe6>
   80f9e:	f04f 0203 	mov.w	r2, #3
   80fa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80fa6:	bf18      	it	ne
   80fa8:	3203      	addne	r2, #3
   80faa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80fae:	bf18      	it	ne
   80fb0:	3203      	addne	r2, #3
   80fb2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80fb6:	f1c2 0320 	rsb	r3, r2, #32
   80fba:	fa00 fc03 	lsl.w	ip, r0, r3
   80fbe:	fa20 f002 	lsr.w	r0, r0, r2
   80fc2:	fa01 fe03 	lsl.w	lr, r1, r3
   80fc6:	ea40 000e 	orr.w	r0, r0, lr
   80fca:	fa21 f102 	lsr.w	r1, r1, r2
   80fce:	4414      	add	r4, r2
   80fd0:	e6c1      	b.n	80d56 <__adddf3+0xe6>
   80fd2:	bf00      	nop

00080fd4 <__aeabi_dmul>:
   80fd4:	b570      	push	{r4, r5, r6, lr}
   80fd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80fda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80fde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80fe2:	bf1d      	ittte	ne
   80fe4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80fe8:	ea94 0f0c 	teqne	r4, ip
   80fec:	ea95 0f0c 	teqne	r5, ip
   80ff0:	f000 f8de 	bleq	811b0 <__aeabi_dmul+0x1dc>
   80ff4:	442c      	add	r4, r5
   80ff6:	ea81 0603 	eor.w	r6, r1, r3
   80ffa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80ffe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81002:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81006:	bf18      	it	ne
   81008:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8100c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81014:	d038      	beq.n	81088 <__aeabi_dmul+0xb4>
   81016:	fba0 ce02 	umull	ip, lr, r0, r2
   8101a:	f04f 0500 	mov.w	r5, #0
   8101e:	fbe1 e502 	umlal	lr, r5, r1, r2
   81022:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81026:	fbe0 e503 	umlal	lr, r5, r0, r3
   8102a:	f04f 0600 	mov.w	r6, #0
   8102e:	fbe1 5603 	umlal	r5, r6, r1, r3
   81032:	f09c 0f00 	teq	ip, #0
   81036:	bf18      	it	ne
   81038:	f04e 0e01 	orrne.w	lr, lr, #1
   8103c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81040:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81044:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81048:	d204      	bcs.n	81054 <__aeabi_dmul+0x80>
   8104a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8104e:	416d      	adcs	r5, r5
   81050:	eb46 0606 	adc.w	r6, r6, r6
   81054:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81058:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8105c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81060:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81064:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81068:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8106c:	bf88      	it	hi
   8106e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81072:	d81e      	bhi.n	810b2 <__aeabi_dmul+0xde>
   81074:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81078:	bf08      	it	eq
   8107a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8107e:	f150 0000 	adcs.w	r0, r0, #0
   81082:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81086:	bd70      	pop	{r4, r5, r6, pc}
   81088:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8108c:	ea46 0101 	orr.w	r1, r6, r1
   81090:	ea40 0002 	orr.w	r0, r0, r2
   81094:	ea81 0103 	eor.w	r1, r1, r3
   81098:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8109c:	bfc2      	ittt	gt
   8109e:	ebd4 050c 	rsbsgt	r5, r4, ip
   810a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   810a6:	bd70      	popgt	{r4, r5, r6, pc}
   810a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   810ac:	f04f 0e00 	mov.w	lr, #0
   810b0:	3c01      	subs	r4, #1
   810b2:	f300 80ab 	bgt.w	8120c <__aeabi_dmul+0x238>
   810b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   810ba:	bfde      	ittt	le
   810bc:	2000      	movle	r0, #0
   810be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   810c2:	bd70      	pople	{r4, r5, r6, pc}
   810c4:	f1c4 0400 	rsb	r4, r4, #0
   810c8:	3c20      	subs	r4, #32
   810ca:	da35      	bge.n	81138 <__aeabi_dmul+0x164>
   810cc:	340c      	adds	r4, #12
   810ce:	dc1b      	bgt.n	81108 <__aeabi_dmul+0x134>
   810d0:	f104 0414 	add.w	r4, r4, #20
   810d4:	f1c4 0520 	rsb	r5, r4, #32
   810d8:	fa00 f305 	lsl.w	r3, r0, r5
   810dc:	fa20 f004 	lsr.w	r0, r0, r4
   810e0:	fa01 f205 	lsl.w	r2, r1, r5
   810e4:	ea40 0002 	orr.w	r0, r0, r2
   810e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   810ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   810f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   810f4:	fa21 f604 	lsr.w	r6, r1, r4
   810f8:	eb42 0106 	adc.w	r1, r2, r6
   810fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81100:	bf08      	it	eq
   81102:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81106:	bd70      	pop	{r4, r5, r6, pc}
   81108:	f1c4 040c 	rsb	r4, r4, #12
   8110c:	f1c4 0520 	rsb	r5, r4, #32
   81110:	fa00 f304 	lsl.w	r3, r0, r4
   81114:	fa20 f005 	lsr.w	r0, r0, r5
   81118:	fa01 f204 	lsl.w	r2, r1, r4
   8111c:	ea40 0002 	orr.w	r0, r0, r2
   81120:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81124:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81128:	f141 0100 	adc.w	r1, r1, #0
   8112c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81130:	bf08      	it	eq
   81132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81136:	bd70      	pop	{r4, r5, r6, pc}
   81138:	f1c4 0520 	rsb	r5, r4, #32
   8113c:	fa00 f205 	lsl.w	r2, r0, r5
   81140:	ea4e 0e02 	orr.w	lr, lr, r2
   81144:	fa20 f304 	lsr.w	r3, r0, r4
   81148:	fa01 f205 	lsl.w	r2, r1, r5
   8114c:	ea43 0302 	orr.w	r3, r3, r2
   81150:	fa21 f004 	lsr.w	r0, r1, r4
   81154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81158:	fa21 f204 	lsr.w	r2, r1, r4
   8115c:	ea20 0002 	bic.w	r0, r0, r2
   81160:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81168:	bf08      	it	eq
   8116a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8116e:	bd70      	pop	{r4, r5, r6, pc}
   81170:	f094 0f00 	teq	r4, #0
   81174:	d10f      	bne.n	81196 <__aeabi_dmul+0x1c2>
   81176:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8117a:	0040      	lsls	r0, r0, #1
   8117c:	eb41 0101 	adc.w	r1, r1, r1
   81180:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81184:	bf08      	it	eq
   81186:	3c01      	subeq	r4, #1
   81188:	d0f7      	beq.n	8117a <__aeabi_dmul+0x1a6>
   8118a:	ea41 0106 	orr.w	r1, r1, r6
   8118e:	f095 0f00 	teq	r5, #0
   81192:	bf18      	it	ne
   81194:	4770      	bxne	lr
   81196:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8119a:	0052      	lsls	r2, r2, #1
   8119c:	eb43 0303 	adc.w	r3, r3, r3
   811a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   811a4:	bf08      	it	eq
   811a6:	3d01      	subeq	r5, #1
   811a8:	d0f7      	beq.n	8119a <__aeabi_dmul+0x1c6>
   811aa:	ea43 0306 	orr.w	r3, r3, r6
   811ae:	4770      	bx	lr
   811b0:	ea94 0f0c 	teq	r4, ip
   811b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   811b8:	bf18      	it	ne
   811ba:	ea95 0f0c 	teqne	r5, ip
   811be:	d00c      	beq.n	811da <__aeabi_dmul+0x206>
   811c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   811c4:	bf18      	it	ne
   811c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   811ca:	d1d1      	bne.n	81170 <__aeabi_dmul+0x19c>
   811cc:	ea81 0103 	eor.w	r1, r1, r3
   811d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   811d4:	f04f 0000 	mov.w	r0, #0
   811d8:	bd70      	pop	{r4, r5, r6, pc}
   811da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   811de:	bf06      	itte	eq
   811e0:	4610      	moveq	r0, r2
   811e2:	4619      	moveq	r1, r3
   811e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   811e8:	d019      	beq.n	8121e <__aeabi_dmul+0x24a>
   811ea:	ea94 0f0c 	teq	r4, ip
   811ee:	d102      	bne.n	811f6 <__aeabi_dmul+0x222>
   811f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   811f4:	d113      	bne.n	8121e <__aeabi_dmul+0x24a>
   811f6:	ea95 0f0c 	teq	r5, ip
   811fa:	d105      	bne.n	81208 <__aeabi_dmul+0x234>
   811fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81200:	bf1c      	itt	ne
   81202:	4610      	movne	r0, r2
   81204:	4619      	movne	r1, r3
   81206:	d10a      	bne.n	8121e <__aeabi_dmul+0x24a>
   81208:	ea81 0103 	eor.w	r1, r1, r3
   8120c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81210:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81214:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81218:	f04f 0000 	mov.w	r0, #0
   8121c:	bd70      	pop	{r4, r5, r6, pc}
   8121e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81222:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81226:	bd70      	pop	{r4, r5, r6, pc}

00081228 <__aeabi_ddiv>:
   81228:	b570      	push	{r4, r5, r6, lr}
   8122a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8122e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81236:	bf1d      	ittte	ne
   81238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8123c:	ea94 0f0c 	teqne	r4, ip
   81240:	ea95 0f0c 	teqne	r5, ip
   81244:	f000 f8a7 	bleq	81396 <__aeabi_ddiv+0x16e>
   81248:	eba4 0405 	sub.w	r4, r4, r5
   8124c:	ea81 0e03 	eor.w	lr, r1, r3
   81250:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81254:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81258:	f000 8088 	beq.w	8136c <__aeabi_ddiv+0x144>
   8125c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81260:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81264:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81268:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8126c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81270:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81274:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81278:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8127c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81280:	429d      	cmp	r5, r3
   81282:	bf08      	it	eq
   81284:	4296      	cmpeq	r6, r2
   81286:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8128a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8128e:	d202      	bcs.n	81296 <__aeabi_ddiv+0x6e>
   81290:	085b      	lsrs	r3, r3, #1
   81292:	ea4f 0232 	mov.w	r2, r2, rrx
   81296:	1ab6      	subs	r6, r6, r2
   81298:	eb65 0503 	sbc.w	r5, r5, r3
   8129c:	085b      	lsrs	r3, r3, #1
   8129e:	ea4f 0232 	mov.w	r2, r2, rrx
   812a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   812a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   812aa:	ebb6 0e02 	subs.w	lr, r6, r2
   812ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   812b2:	bf22      	ittt	cs
   812b4:	1ab6      	subcs	r6, r6, r2
   812b6:	4675      	movcs	r5, lr
   812b8:	ea40 000c 	orrcs.w	r0, r0, ip
   812bc:	085b      	lsrs	r3, r3, #1
   812be:	ea4f 0232 	mov.w	r2, r2, rrx
   812c2:	ebb6 0e02 	subs.w	lr, r6, r2
   812c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   812ca:	bf22      	ittt	cs
   812cc:	1ab6      	subcs	r6, r6, r2
   812ce:	4675      	movcs	r5, lr
   812d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   812d4:	085b      	lsrs	r3, r3, #1
   812d6:	ea4f 0232 	mov.w	r2, r2, rrx
   812da:	ebb6 0e02 	subs.w	lr, r6, r2
   812de:	eb75 0e03 	sbcs.w	lr, r5, r3
   812e2:	bf22      	ittt	cs
   812e4:	1ab6      	subcs	r6, r6, r2
   812e6:	4675      	movcs	r5, lr
   812e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   812ec:	085b      	lsrs	r3, r3, #1
   812ee:	ea4f 0232 	mov.w	r2, r2, rrx
   812f2:	ebb6 0e02 	subs.w	lr, r6, r2
   812f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   812fa:	bf22      	ittt	cs
   812fc:	1ab6      	subcs	r6, r6, r2
   812fe:	4675      	movcs	r5, lr
   81300:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81304:	ea55 0e06 	orrs.w	lr, r5, r6
   81308:	d018      	beq.n	8133c <__aeabi_ddiv+0x114>
   8130a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8130e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81312:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81316:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8131a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8131e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81322:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81326:	d1c0      	bne.n	812aa <__aeabi_ddiv+0x82>
   81328:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8132c:	d10b      	bne.n	81346 <__aeabi_ddiv+0x11e>
   8132e:	ea41 0100 	orr.w	r1, r1, r0
   81332:	f04f 0000 	mov.w	r0, #0
   81336:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8133a:	e7b6      	b.n	812aa <__aeabi_ddiv+0x82>
   8133c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81340:	bf04      	itt	eq
   81342:	4301      	orreq	r1, r0
   81344:	2000      	moveq	r0, #0
   81346:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8134a:	bf88      	it	hi
   8134c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81350:	f63f aeaf 	bhi.w	810b2 <__aeabi_dmul+0xde>
   81354:	ebb5 0c03 	subs.w	ip, r5, r3
   81358:	bf04      	itt	eq
   8135a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8135e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81362:	f150 0000 	adcs.w	r0, r0, #0
   81366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8136a:	bd70      	pop	{r4, r5, r6, pc}
   8136c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81370:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81374:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81378:	bfc2      	ittt	gt
   8137a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8137e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81382:	bd70      	popgt	{r4, r5, r6, pc}
   81384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81388:	f04f 0e00 	mov.w	lr, #0
   8138c:	3c01      	subs	r4, #1
   8138e:	e690      	b.n	810b2 <__aeabi_dmul+0xde>
   81390:	ea45 0e06 	orr.w	lr, r5, r6
   81394:	e68d      	b.n	810b2 <__aeabi_dmul+0xde>
   81396:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8139a:	ea94 0f0c 	teq	r4, ip
   8139e:	bf08      	it	eq
   813a0:	ea95 0f0c 	teqeq	r5, ip
   813a4:	f43f af3b 	beq.w	8121e <__aeabi_dmul+0x24a>
   813a8:	ea94 0f0c 	teq	r4, ip
   813ac:	d10a      	bne.n	813c4 <__aeabi_ddiv+0x19c>
   813ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   813b2:	f47f af34 	bne.w	8121e <__aeabi_dmul+0x24a>
   813b6:	ea95 0f0c 	teq	r5, ip
   813ba:	f47f af25 	bne.w	81208 <__aeabi_dmul+0x234>
   813be:	4610      	mov	r0, r2
   813c0:	4619      	mov	r1, r3
   813c2:	e72c      	b.n	8121e <__aeabi_dmul+0x24a>
   813c4:	ea95 0f0c 	teq	r5, ip
   813c8:	d106      	bne.n	813d8 <__aeabi_ddiv+0x1b0>
   813ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   813ce:	f43f aefd 	beq.w	811cc <__aeabi_dmul+0x1f8>
   813d2:	4610      	mov	r0, r2
   813d4:	4619      	mov	r1, r3
   813d6:	e722      	b.n	8121e <__aeabi_dmul+0x24a>
   813d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813dc:	bf18      	it	ne
   813de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   813e2:	f47f aec5 	bne.w	81170 <__aeabi_dmul+0x19c>
   813e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   813ea:	f47f af0d 	bne.w	81208 <__aeabi_dmul+0x234>
   813ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   813f2:	f47f aeeb 	bne.w	811cc <__aeabi_dmul+0x1f8>
   813f6:	e712      	b.n	8121e <__aeabi_dmul+0x24a>

000813f8 <__aeabi_d2iz>:
   813f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   813fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81400:	d215      	bcs.n	8142e <__aeabi_d2iz+0x36>
   81402:	d511      	bpl.n	81428 <__aeabi_d2iz+0x30>
   81404:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81408:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8140c:	d912      	bls.n	81434 <__aeabi_d2iz+0x3c>
   8140e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81416:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8141a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8141e:	fa23 f002 	lsr.w	r0, r3, r2
   81422:	bf18      	it	ne
   81424:	4240      	negne	r0, r0
   81426:	4770      	bx	lr
   81428:	f04f 0000 	mov.w	r0, #0
   8142c:	4770      	bx	lr
   8142e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81432:	d105      	bne.n	81440 <__aeabi_d2iz+0x48>
   81434:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81438:	bf08      	it	eq
   8143a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8143e:	4770      	bx	lr
   81440:	f04f 0000 	mov.w	r0, #0
   81444:	4770      	bx	lr
   81446:	bf00      	nop

00081448 <__libc_init_array>:
   81448:	b570      	push	{r4, r5, r6, lr}
   8144a:	4e0f      	ldr	r6, [pc, #60]	; (81488 <__libc_init_array+0x40>)
   8144c:	4d0f      	ldr	r5, [pc, #60]	; (8148c <__libc_init_array+0x44>)
   8144e:	1b76      	subs	r6, r6, r5
   81450:	10b6      	asrs	r6, r6, #2
   81452:	d007      	beq.n	81464 <__libc_init_array+0x1c>
   81454:	3d04      	subs	r5, #4
   81456:	2400      	movs	r4, #0
   81458:	3401      	adds	r4, #1
   8145a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8145e:	4798      	blx	r3
   81460:	42a6      	cmp	r6, r4
   81462:	d1f9      	bne.n	81458 <__libc_init_array+0x10>
   81464:	4e0a      	ldr	r6, [pc, #40]	; (81490 <__libc_init_array+0x48>)
   81466:	4d0b      	ldr	r5, [pc, #44]	; (81494 <__libc_init_array+0x4c>)
   81468:	f000 fa76 	bl	81958 <_init>
   8146c:	1b76      	subs	r6, r6, r5
   8146e:	10b6      	asrs	r6, r6, #2
   81470:	d008      	beq.n	81484 <__libc_init_array+0x3c>
   81472:	3d04      	subs	r5, #4
   81474:	2400      	movs	r4, #0
   81476:	3401      	adds	r4, #1
   81478:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8147c:	4798      	blx	r3
   8147e:	42a6      	cmp	r6, r4
   81480:	d1f9      	bne.n	81476 <__libc_init_array+0x2e>
   81482:	bd70      	pop	{r4, r5, r6, pc}
   81484:	bd70      	pop	{r4, r5, r6, pc}
   81486:	bf00      	nop
   81488:	00081964 	.word	0x00081964
   8148c:	00081964 	.word	0x00081964
   81490:	0008196c 	.word	0x0008196c
   81494:	00081964 	.word	0x00081964

00081498 <memset>:
   81498:	b4f0      	push	{r4, r5, r6, r7}
   8149a:	0784      	lsls	r4, r0, #30
   8149c:	d043      	beq.n	81526 <memset+0x8e>
   8149e:	1e54      	subs	r4, r2, #1
   814a0:	2a00      	cmp	r2, #0
   814a2:	d03e      	beq.n	81522 <memset+0x8a>
   814a4:	b2cd      	uxtb	r5, r1
   814a6:	4603      	mov	r3, r0
   814a8:	e003      	b.n	814b2 <memset+0x1a>
   814aa:	1e62      	subs	r2, r4, #1
   814ac:	2c00      	cmp	r4, #0
   814ae:	d038      	beq.n	81522 <memset+0x8a>
   814b0:	4614      	mov	r4, r2
   814b2:	f803 5b01 	strb.w	r5, [r3], #1
   814b6:	079a      	lsls	r2, r3, #30
   814b8:	d1f7      	bne.n	814aa <memset+0x12>
   814ba:	2c03      	cmp	r4, #3
   814bc:	d92a      	bls.n	81514 <memset+0x7c>
   814be:	b2cd      	uxtb	r5, r1
   814c0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   814c4:	2c0f      	cmp	r4, #15
   814c6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   814ca:	d915      	bls.n	814f8 <memset+0x60>
   814cc:	f1a4 0710 	sub.w	r7, r4, #16
   814d0:	093f      	lsrs	r7, r7, #4
   814d2:	f103 0610 	add.w	r6, r3, #16
   814d6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   814da:	461a      	mov	r2, r3
   814dc:	6015      	str	r5, [r2, #0]
   814de:	6055      	str	r5, [r2, #4]
   814e0:	6095      	str	r5, [r2, #8]
   814e2:	60d5      	str	r5, [r2, #12]
   814e4:	3210      	adds	r2, #16
   814e6:	42b2      	cmp	r2, r6
   814e8:	d1f8      	bne.n	814dc <memset+0x44>
   814ea:	f004 040f 	and.w	r4, r4, #15
   814ee:	3701      	adds	r7, #1
   814f0:	2c03      	cmp	r4, #3
   814f2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   814f6:	d90d      	bls.n	81514 <memset+0x7c>
   814f8:	461e      	mov	r6, r3
   814fa:	4622      	mov	r2, r4
   814fc:	3a04      	subs	r2, #4
   814fe:	2a03      	cmp	r2, #3
   81500:	f846 5b04 	str.w	r5, [r6], #4
   81504:	d8fa      	bhi.n	814fc <memset+0x64>
   81506:	1f22      	subs	r2, r4, #4
   81508:	f022 0203 	bic.w	r2, r2, #3
   8150c:	3204      	adds	r2, #4
   8150e:	4413      	add	r3, r2
   81510:	f004 0403 	and.w	r4, r4, #3
   81514:	b12c      	cbz	r4, 81522 <memset+0x8a>
   81516:	b2c9      	uxtb	r1, r1
   81518:	441c      	add	r4, r3
   8151a:	f803 1b01 	strb.w	r1, [r3], #1
   8151e:	42a3      	cmp	r3, r4
   81520:	d1fb      	bne.n	8151a <memset+0x82>
   81522:	bcf0      	pop	{r4, r5, r6, r7}
   81524:	4770      	bx	lr
   81526:	4614      	mov	r4, r2
   81528:	4603      	mov	r3, r0
   8152a:	e7c6      	b.n	814ba <memset+0x22>

0008152c <strlen>:
   8152c:	f020 0103 	bic.w	r1, r0, #3
   81530:	f010 0003 	ands.w	r0, r0, #3
   81534:	f1c0 0000 	rsb	r0, r0, #0
   81538:	f851 3b04 	ldr.w	r3, [r1], #4
   8153c:	f100 0c04 	add.w	ip, r0, #4
   81540:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81544:	f06f 0200 	mvn.w	r2, #0
   81548:	bf1c      	itt	ne
   8154a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8154e:	4313      	orrne	r3, r2
   81550:	f04f 0c01 	mov.w	ip, #1
   81554:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81558:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8155c:	eba3 020c 	sub.w	r2, r3, ip
   81560:	ea22 0203 	bic.w	r2, r2, r3
   81564:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81568:	bf04      	itt	eq
   8156a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8156e:	3004      	addeq	r0, #4
   81570:	d0f4      	beq.n	8155c <strlen+0x30>
   81572:	f013 0fff 	tst.w	r3, #255	; 0xff
   81576:	bf1f      	itttt	ne
   81578:	3001      	addne	r0, #1
   8157a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8157e:	3001      	addne	r0, #1
   81580:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81584:	bf18      	it	ne
   81586:	3001      	addne	r0, #1
   81588:	4770      	bx	lr
   8158a:	bf00      	nop

0008158c <strtok>:
   8158c:	4a02      	ldr	r2, [pc, #8]	; (81598 <strtok+0xc>)
   8158e:	2301      	movs	r3, #1
   81590:	6812      	ldr	r2, [r2, #0]
   81592:	325c      	adds	r2, #92	; 0x5c
   81594:	f000 b802 	b.w	8159c <__strtok_r>
   81598:	20000430 	.word	0x20000430

0008159c <__strtok_r>:
   8159c:	b4f0      	push	{r4, r5, r6, r7}
   8159e:	b320      	cbz	r0, 815ea <__strtok_r+0x4e>
   815a0:	4607      	mov	r7, r0
   815a2:	f817 6b01 	ldrb.w	r6, [r7], #1
   815a6:	460d      	mov	r5, r1
   815a8:	e001      	b.n	815ae <__strtok_r+0x12>
   815aa:	42a6      	cmp	r6, r4
   815ac:	d016      	beq.n	815dc <__strtok_r+0x40>
   815ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   815b2:	2c00      	cmp	r4, #0
   815b4:	d1f9      	bne.n	815aa <__strtok_r+0xe>
   815b6:	b1ee      	cbz	r6, 815f4 <__strtok_r+0x58>
   815b8:	463e      	mov	r6, r7
   815ba:	f816 5b01 	ldrb.w	r5, [r6], #1
   815be:	460c      	mov	r4, r1
   815c0:	e000      	b.n	815c4 <__strtok_r+0x28>
   815c2:	b173      	cbz	r3, 815e2 <__strtok_r+0x46>
   815c4:	f814 3b01 	ldrb.w	r3, [r4], #1
   815c8:	42ab      	cmp	r3, r5
   815ca:	d1fa      	bne.n	815c2 <__strtok_r+0x26>
   815cc:	b15d      	cbz	r5, 815e6 <__strtok_r+0x4a>
   815ce:	2300      	movs	r3, #0
   815d0:	703b      	strb	r3, [r7, #0]
   815d2:	6016      	str	r6, [r2, #0]
   815d4:	4606      	mov	r6, r0
   815d6:	4630      	mov	r0, r6
   815d8:	bcf0      	pop	{r4, r5, r6, r7}
   815da:	4770      	bx	lr
   815dc:	b163      	cbz	r3, 815f8 <__strtok_r+0x5c>
   815de:	4638      	mov	r0, r7
   815e0:	e7de      	b.n	815a0 <__strtok_r+0x4>
   815e2:	4637      	mov	r7, r6
   815e4:	e7e8      	b.n	815b8 <__strtok_r+0x1c>
   815e6:	462e      	mov	r6, r5
   815e8:	e7f3      	b.n	815d2 <__strtok_r+0x36>
   815ea:	6810      	ldr	r0, [r2, #0]
   815ec:	2800      	cmp	r0, #0
   815ee:	d1d7      	bne.n	815a0 <__strtok_r+0x4>
   815f0:	4606      	mov	r6, r0
   815f2:	e7f0      	b.n	815d6 <__strtok_r+0x3a>
   815f4:	6016      	str	r6, [r2, #0]
   815f6:	e7ee      	b.n	815d6 <__strtok_r+0x3a>
   815f8:	6017      	str	r7, [r2, #0]
   815fa:	4606      	mov	r6, r0
   815fc:	7003      	strb	r3, [r0, #0]
   815fe:	e7ea      	b.n	815d6 <__strtok_r+0x3a>

00081600 <_strtol_r>:
   81600:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81604:	4c42      	ldr	r4, [pc, #264]	; (81710 <_strtol_r+0x110>)
   81606:	b082      	sub	sp, #8
   81608:	f8d4 c000 	ldr.w	ip, [r4]
   8160c:	9001      	str	r0, [sp, #4]
   8160e:	460e      	mov	r6, r1
   81610:	e000      	b.n	81614 <_strtol_r+0x14>
   81612:	4626      	mov	r6, r4
   81614:	4634      	mov	r4, r6
   81616:	f814 5b01 	ldrb.w	r5, [r4], #1
   8161a:	eb0c 0005 	add.w	r0, ip, r5
   8161e:	7840      	ldrb	r0, [r0, #1]
   81620:	f000 0008 	and.w	r0, r0, #8
   81624:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   81628:	2800      	cmp	r0, #0
   8162a:	d1f2      	bne.n	81612 <_strtol_r+0x12>
   8162c:	2d2d      	cmp	r5, #45	; 0x2d
   8162e:	d05b      	beq.n	816e8 <_strtol_r+0xe8>
   81630:	2d2b      	cmp	r5, #43	; 0x2b
   81632:	bf04      	itt	eq
   81634:	7875      	ldrbeq	r5, [r6, #1]
   81636:	1cb4      	addeq	r4, r6, #2
   81638:	f033 0010 	bics.w	r0, r3, #16
   8163c:	d03c      	beq.n	816b8 <_strtol_r+0xb8>
   8163e:	4699      	mov	r9, r3
   81640:	f1ba 0f00 	cmp.w	sl, #0
   81644:	bf0c      	ite	eq
   81646:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
   8164a:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
   8164e:	fbbb f8f9 	udiv	r8, fp, r9
   81652:	2700      	movs	r7, #0
   81654:	fb09 bb18 	mls	fp, r9, r8, fp
   81658:	4638      	mov	r0, r7
   8165a:	e00c      	b.n	81676 <_strtol_r+0x76>
   8165c:	3d30      	subs	r5, #48	; 0x30
   8165e:	42ab      	cmp	r3, r5
   81660:	dd19      	ble.n	81696 <_strtol_r+0x96>
   81662:	1c7e      	adds	r6, r7, #1
   81664:	d005      	beq.n	81672 <_strtol_r+0x72>
   81666:	4540      	cmp	r0, r8
   81668:	d823      	bhi.n	816b2 <_strtol_r+0xb2>
   8166a:	d020      	beq.n	816ae <_strtol_r+0xae>
   8166c:	fb09 5000 	mla	r0, r9, r0, r5
   81670:	2701      	movs	r7, #1
   81672:	f814 5b01 	ldrb.w	r5, [r4], #1
   81676:	eb0c 0605 	add.w	r6, ip, r5
   8167a:	7876      	ldrb	r6, [r6, #1]
   8167c:	f016 0f04 	tst.w	r6, #4
   81680:	d1ec      	bne.n	8165c <_strtol_r+0x5c>
   81682:	f016 0603 	ands.w	r6, r6, #3
   81686:	d006      	beq.n	81696 <_strtol_r+0x96>
   81688:	2e01      	cmp	r6, #1
   8168a:	bf14      	ite	ne
   8168c:	2657      	movne	r6, #87	; 0x57
   8168e:	2637      	moveq	r6, #55	; 0x37
   81690:	1bad      	subs	r5, r5, r6
   81692:	42ab      	cmp	r3, r5
   81694:	dce5      	bgt.n	81662 <_strtol_r+0x62>
   81696:	1c7b      	adds	r3, r7, #1
   81698:	d015      	beq.n	816c6 <_strtol_r+0xc6>
   8169a:	f1ba 0f00 	cmp.w	sl, #0
   8169e:	d121      	bne.n	816e4 <_strtol_r+0xe4>
   816a0:	b10a      	cbz	r2, 816a6 <_strtol_r+0xa6>
   816a2:	b9ef      	cbnz	r7, 816e0 <_strtol_r+0xe0>
   816a4:	6011      	str	r1, [r2, #0]
   816a6:	b002      	add	sp, #8
   816a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   816ac:	4770      	bx	lr
   816ae:	455d      	cmp	r5, fp
   816b0:	dddc      	ble.n	8166c <_strtol_r+0x6c>
   816b2:	f04f 37ff 	mov.w	r7, #4294967295
   816b6:	e7dc      	b.n	81672 <_strtol_r+0x72>
   816b8:	2d30      	cmp	r5, #48	; 0x30
   816ba:	d01a      	beq.n	816f2 <_strtol_r+0xf2>
   816bc:	2b00      	cmp	r3, #0
   816be:	d1be      	bne.n	8163e <_strtol_r+0x3e>
   816c0:	230a      	movs	r3, #10
   816c2:	4699      	mov	r9, r3
   816c4:	e7bc      	b.n	81640 <_strtol_r+0x40>
   816c6:	9901      	ldr	r1, [sp, #4]
   816c8:	f1ba 0f00 	cmp.w	sl, #0
   816cc:	f04f 0322 	mov.w	r3, #34	; 0x22
   816d0:	bf0c      	ite	eq
   816d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   816d6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   816da:	600b      	str	r3, [r1, #0]
   816dc:	2a00      	cmp	r2, #0
   816de:	d0e2      	beq.n	816a6 <_strtol_r+0xa6>
   816e0:	1e61      	subs	r1, r4, #1
   816e2:	e7df      	b.n	816a4 <_strtol_r+0xa4>
   816e4:	4240      	negs	r0, r0
   816e6:	e7db      	b.n	816a0 <_strtol_r+0xa0>
   816e8:	1cb4      	adds	r4, r6, #2
   816ea:	7875      	ldrb	r5, [r6, #1]
   816ec:	f04f 0a01 	mov.w	sl, #1
   816f0:	e7a2      	b.n	81638 <_strtol_r+0x38>
   816f2:	7820      	ldrb	r0, [r4, #0]
   816f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   816f8:	2858      	cmp	r0, #88	; 0x58
   816fa:	d003      	beq.n	81704 <_strtol_r+0x104>
   816fc:	2b00      	cmp	r3, #0
   816fe:	d19e      	bne.n	8163e <_strtol_r+0x3e>
   81700:	2308      	movs	r3, #8
   81702:	e79c      	b.n	8163e <_strtol_r+0x3e>
   81704:	2310      	movs	r3, #16
   81706:	7865      	ldrb	r5, [r4, #1]
   81708:	4699      	mov	r9, r3
   8170a:	3402      	adds	r4, #2
   8170c:	e798      	b.n	81640 <_strtol_r+0x40>
   8170e:	bf00      	nop
   81710:	20000434 	.word	0x20000434

00081714 <strtol>:
   81714:	b430      	push	{r4, r5}
   81716:	4c04      	ldr	r4, [pc, #16]	; (81728 <strtol+0x14>)
   81718:	460d      	mov	r5, r1
   8171a:	4613      	mov	r3, r2
   8171c:	4601      	mov	r1, r0
   8171e:	462a      	mov	r2, r5
   81720:	6820      	ldr	r0, [r4, #0]
   81722:	bc30      	pop	{r4, r5}
   81724:	f7ff bf6c 	b.w	81600 <_strtol_r>
   81728:	20000430 	.word	0x20000430

0008172c <register_fini>:
   8172c:	4b02      	ldr	r3, [pc, #8]	; (81738 <register_fini+0xc>)
   8172e:	b113      	cbz	r3, 81736 <register_fini+0xa>
   81730:	4802      	ldr	r0, [pc, #8]	; (8173c <register_fini+0x10>)
   81732:	f000 b805 	b.w	81740 <atexit>
   81736:	4770      	bx	lr
   81738:	00000000 	.word	0x00000000
   8173c:	0008174d 	.word	0x0008174d

00081740 <atexit>:
   81740:	4601      	mov	r1, r0
   81742:	2000      	movs	r0, #0
   81744:	4602      	mov	r2, r0
   81746:	4603      	mov	r3, r0
   81748:	f000 b818 	b.w	8177c <__register_exitproc>

0008174c <__libc_fini_array>:
   8174c:	b538      	push	{r3, r4, r5, lr}
   8174e:	4d09      	ldr	r5, [pc, #36]	; (81774 <__libc_fini_array+0x28>)
   81750:	4c09      	ldr	r4, [pc, #36]	; (81778 <__libc_fini_array+0x2c>)
   81752:	1b64      	subs	r4, r4, r5
   81754:	10a4      	asrs	r4, r4, #2
   81756:	bf18      	it	ne
   81758:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   8175c:	d005      	beq.n	8176a <__libc_fini_array+0x1e>
   8175e:	3c01      	subs	r4, #1
   81760:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81764:	4798      	blx	r3
   81766:	2c00      	cmp	r4, #0
   81768:	d1f9      	bne.n	8175e <__libc_fini_array+0x12>
   8176a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8176e:	f000 b8fd 	b.w	8196c <_fini>
   81772:	bf00      	nop
   81774:	00081978 	.word	0x00081978
   81778:	0008197c 	.word	0x0008197c

0008177c <__register_exitproc>:
   8177c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8177e:	4c27      	ldr	r4, [pc, #156]	; (8181c <__register_exitproc+0xa0>)
   81780:	b085      	sub	sp, #20
   81782:	6826      	ldr	r6, [r4, #0]
   81784:	4607      	mov	r7, r0
   81786:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8178a:	2c00      	cmp	r4, #0
   8178c:	d040      	beq.n	81810 <__register_exitproc+0x94>
   8178e:	6865      	ldr	r5, [r4, #4]
   81790:	2d1f      	cmp	r5, #31
   81792:	dd1e      	ble.n	817d2 <__register_exitproc+0x56>
   81794:	4822      	ldr	r0, [pc, #136]	; (81820 <__register_exitproc+0xa4>)
   81796:	b918      	cbnz	r0, 817a0 <__register_exitproc+0x24>
   81798:	f04f 30ff 	mov.w	r0, #4294967295
   8179c:	b005      	add	sp, #20
   8179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   817a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   817a4:	9103      	str	r1, [sp, #12]
   817a6:	9202      	str	r2, [sp, #8]
   817a8:	9301      	str	r3, [sp, #4]
   817aa:	f3af 8000 	nop.w
   817ae:	9903      	ldr	r1, [sp, #12]
   817b0:	4604      	mov	r4, r0
   817b2:	9a02      	ldr	r2, [sp, #8]
   817b4:	9b01      	ldr	r3, [sp, #4]
   817b6:	2800      	cmp	r0, #0
   817b8:	d0ee      	beq.n	81798 <__register_exitproc+0x1c>
   817ba:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   817be:	2000      	movs	r0, #0
   817c0:	6025      	str	r5, [r4, #0]
   817c2:	6060      	str	r0, [r4, #4]
   817c4:	4605      	mov	r5, r0
   817c6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   817ca:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   817ce:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   817d2:	b93f      	cbnz	r7, 817e4 <__register_exitproc+0x68>
   817d4:	1c6b      	adds	r3, r5, #1
   817d6:	2000      	movs	r0, #0
   817d8:	3502      	adds	r5, #2
   817da:	6063      	str	r3, [r4, #4]
   817dc:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   817e0:	b005      	add	sp, #20
   817e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   817e4:	2601      	movs	r6, #1
   817e6:	40ae      	lsls	r6, r5
   817e8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   817ec:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   817f0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   817f4:	2f02      	cmp	r7, #2
   817f6:	ea42 0206 	orr.w	r2, r2, r6
   817fa:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   817fe:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   81802:	d1e7      	bne.n	817d4 <__register_exitproc+0x58>
   81804:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81808:	431e      	orrs	r6, r3
   8180a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8180e:	e7e1      	b.n	817d4 <__register_exitproc+0x58>
   81810:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81814:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81818:	e7b9      	b.n	8178e <__register_exitproc+0x12>
   8181a:	bf00      	nop
   8181c:	00081850 	.word	0x00081850
   81820:	00000000 	.word	0x00000000
   81824:	65636552 	.word	0x65636552
   81828:	64657669 	.word	0x64657669
   8182c:	0000203a 	.word	0x0000203a
   81830:	00000023 	.word	0x00000023
   81834:	65657053 	.word	0x65657053
   81838:	203a3164 	.word	0x203a3164
   8183c:	00000000 	.word	0x00000000
   81840:	65705320 	.word	0x65705320
   81844:	3a326465 	.word	0x3a326465
   81848:	00000020 	.word	0x00000020
   8184c:	00000043 	.word	0x00000043

00081850 <_global_impure_ptr>:
   81850:	20000008                                ... 

00081854 <_ctype_>:
   81854:	20202000 20202020 28282020 20282828     .         ((((( 
   81864:	20202020 20202020 20202020 20202020                     
   81874:	10108820 10101010 10101010 10101010      ...............
   81884:	04040410 04040404 10040404 10101010     ................
   81894:	41411010 41414141 01010101 01010101     ..AAAAAA........
   818a4:	01010101 01010101 01010101 10101010     ................
   818b4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   818c4:	02020202 02020202 02020202 10101010     ................
   818d4:	00000020 00000000 00000000 00000000      ...............
	...

00081958 <_init>:
   81958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8195a:	bf00      	nop
   8195c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8195e:	bc08      	pop	{r3}
   81960:	469e      	mov	lr, r3
   81962:	4770      	bx	lr

00081964 <__init_array_start>:
   81964:	0008172d 	.word	0x0008172d

00081968 <__frame_dummy_init_array_entry>:
   81968:	00080119                                ....

0008196c <_fini>:
   8196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8196e:	bf00      	nop
   81970:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81972:	bc08      	pop	{r3}
   81974:	469e      	mov	lr, r3
   81976:	4770      	bx	lr

00081978 <__fini_array_start>:
   81978:	000800f5 	.word	0x000800f5
