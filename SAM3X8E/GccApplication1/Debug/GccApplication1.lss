
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bf0  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00081bf0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  20000438  00082028  00010438  2**2
                  ALLOC
  3 .stack        00000404  2000049c  0008208c  00010438  2**0
                  ALLOC
  4 .heap         00000200  200008a0  00082490  00010438  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  7 .debug_info   00004468  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a1e  00000000  00000000  00014924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000009b0  00000000  00000000  00015342  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001d0  00000000  00000000  00015cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00015ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011a8d  00000000  00000000  00016012  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003c82  00000000  00000000  00027a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000523ec  00000000  00000000  0002b721  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000730  00000000  00000000  0007db10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200008a0 	.word	0x200008a0
   80004:	00080151 	.word	0x00080151
   80008:	000801d9 	.word	0x000801d9
   8000c:	000801d9 	.word	0x000801d9
   80010:	000801d9 	.word	0x000801d9
   80014:	000801d9 	.word	0x000801d9
   80018:	000801d9 	.word	0x000801d9
	...
   8002c:	000801d9 	.word	0x000801d9
   80030:	000801d9 	.word	0x000801d9
   80034:	00000000 	.word	0x00000000
   80038:	000801d9 	.word	0x000801d9
   8003c:	000801d9 	.word	0x000801d9
   80040:	000801d9 	.word	0x000801d9
   80044:	000801d9 	.word	0x000801d9
   80048:	000801d9 	.word	0x000801d9
   8004c:	000801d9 	.word	0x000801d9
   80050:	000801d9 	.word	0x000801d9
   80054:	000801d9 	.word	0x000801d9
   80058:	000801d9 	.word	0x000801d9
   8005c:	000801d9 	.word	0x000801d9
   80060:	00080ba5 	.word	0x00080ba5
   80064:	000801d9 	.word	0x000801d9
   80068:	00000000 	.word	0x00000000
   8006c:	000801d9 	.word	0x000801d9
   80070:	000802b1 	.word	0x000802b1
   80074:	00080321 	.word	0x00080321
   80078:	000802e9 	.word	0x000802e9
	...
   80084:	000801d9 	.word	0x000801d9
   80088:	000801d9 	.word	0x000801d9
   8008c:	000801d9 	.word	0x000801d9
   80090:	000801d9 	.word	0x000801d9
   80094:	000801d9 	.word	0x000801d9
   80098:	000801d9 	.word	0x000801d9
   8009c:	000801d9 	.word	0x000801d9
   800a0:	000801d9 	.word	0x000801d9
   800a4:	00000000 	.word	0x00000000
   800a8:	000801d9 	.word	0x000801d9
   800ac:	00080ac5 	.word	0x00080ac5
   800b0:	000801d9 	.word	0x000801d9
   800b4:	000801d9 	.word	0x000801d9
   800b8:	000801d9 	.word	0x000801d9
   800bc:	000801d9 	.word	0x000801d9
   800c0:	000801d9 	.word	0x000801d9
   800c4:	000801d9 	.word	0x000801d9
   800c8:	000801d9 	.word	0x000801d9
   800cc:	000801d9 	.word	0x000801d9
   800d0:	000801d9 	.word	0x000801d9
   800d4:	000801d9 	.word	0x000801d9
   800d8:	000801d9 	.word	0x000801d9
   800dc:	000801d9 	.word	0x000801d9
   800e0:	000801d9 	.word	0x000801d9
   800e4:	000801d9 	.word	0x000801d9
   800e8:	000801d9 	.word	0x000801d9
   800ec:	000801d9 	.word	0x000801d9
   800f0:	000801d9 	.word	0x000801d9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000438 	.word	0x20000438
   80110:	00000000 	.word	0x00000000
   80114:	00081bf0 	.word	0x00081bf0

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00081bf0 	.word	0x00081bf0
   80144:	2000043c 	.word	0x2000043c
   80148:	00081bf0 	.word	0x00081bf0
   8014c:	00000000 	.word	0x00000000

00080150 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   80156:	4b17      	ldr	r3, [pc, #92]	; (801b4 <Reset_Handler+0x64>)
   80158:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   8015a:	4b17      	ldr	r3, [pc, #92]	; (801b8 <Reset_Handler+0x68>)
   8015c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   8015e:	687a      	ldr	r2, [r7, #4]
   80160:	683b      	ldr	r3, [r7, #0]
   80162:	429a      	cmp	r2, r3
   80164:	d00c      	beq.n	80180 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   80166:	e007      	b.n	80178 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   80168:	683b      	ldr	r3, [r7, #0]
   8016a:	1d1a      	adds	r2, r3, #4
   8016c:	603a      	str	r2, [r7, #0]
   8016e:	687a      	ldr	r2, [r7, #4]
   80170:	1d11      	adds	r1, r2, #4
   80172:	6079      	str	r1, [r7, #4]
   80174:	6812      	ldr	r2, [r2, #0]
   80176:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   80178:	683b      	ldr	r3, [r7, #0]
   8017a:	4a10      	ldr	r2, [pc, #64]	; (801bc <Reset_Handler+0x6c>)
   8017c:	4293      	cmp	r3, r2
   8017e:	d3f3      	bcc.n	80168 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80180:	4b0f      	ldr	r3, [pc, #60]	; (801c0 <Reset_Handler+0x70>)
   80182:	603b      	str	r3, [r7, #0]
   80184:	e004      	b.n	80190 <Reset_Handler+0x40>
                *pDest++ = 0;
   80186:	683b      	ldr	r3, [r7, #0]
   80188:	1d1a      	adds	r2, r3, #4
   8018a:	603a      	str	r2, [r7, #0]
   8018c:	2200      	movs	r2, #0
   8018e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80190:	683b      	ldr	r3, [r7, #0]
   80192:	4a0c      	ldr	r2, [pc, #48]	; (801c4 <Reset_Handler+0x74>)
   80194:	4293      	cmp	r3, r2
   80196:	d3f6      	bcc.n	80186 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   80198:	4b0b      	ldr	r3, [pc, #44]	; (801c8 <Reset_Handler+0x78>)
   8019a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8019c:	4a0b      	ldr	r2, [pc, #44]	; (801cc <Reset_Handler+0x7c>)
   8019e:	687b      	ldr	r3, [r7, #4]
   801a0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   801a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   801a8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   801aa:	4b09      	ldr	r3, [pc, #36]	; (801d0 <Reset_Handler+0x80>)
   801ac:	4798      	blx	r3

        /* Branch to main function */
        main();
   801ae:	4b09      	ldr	r3, [pc, #36]	; (801d4 <Reset_Handler+0x84>)
   801b0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   801b2:	e7fe      	b.n	801b2 <Reset_Handler+0x62>
   801b4:	00081bf0 	.word	0x00081bf0
   801b8:	20000000 	.word	0x20000000
   801bc:	20000438 	.word	0x20000438
   801c0:	20000438 	.word	0x20000438
   801c4:	2000049c 	.word	0x2000049c
   801c8:	00080000 	.word	0x00080000
   801cc:	e000ed00 	.word	0xe000ed00
   801d0:	00081665 	.word	0x00081665
   801d4:	00080381 	.word	0x00080381

000801d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   801d8:	b480      	push	{r7}
   801da:	af00      	add	r7, sp, #0
        while (1) {
        }
   801dc:	e7fe      	b.n	801dc <Dummy_Handler+0x4>
   801de:	bf00      	nop

000801e0 <SystemInit>:
/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
   801e0:	b480      	push	{r7}
   801e2:	af00      	add	r7, sp, #0
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801e4:	4b2a      	ldr	r3, [pc, #168]	; (80290 <SystemInit+0xb0>)
   801e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801ea:	601a      	str	r2, [r3, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801ec:	4b29      	ldr	r3, [pc, #164]	; (80294 <SystemInit+0xb4>)
   801ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801f2:	601a      	str	r2, [r3, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801f4:	4b28      	ldr	r3, [pc, #160]	; (80298 <SystemInit+0xb8>)
   801f6:	6a1b      	ldr	r3, [r3, #32]
   801f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   801fc:	2b00      	cmp	r3, #0
   801fe:	d109      	bne.n	80214 <SystemInit+0x34>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80200:	4b25      	ldr	r3, [pc, #148]	; (80298 <SystemInit+0xb8>)
   80202:	4a26      	ldr	r2, [pc, #152]	; (8029c <SystemInit+0xbc>)
   80204:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80206:	bf00      	nop
   80208:	4b23      	ldr	r3, [pc, #140]	; (80298 <SystemInit+0xb8>)
   8020a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8020c:	f003 0301 	and.w	r3, r3, #1
   80210:	2b00      	cmp	r3, #0
   80212:	d0f9      	beq.n	80208 <SystemInit+0x28>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80214:	4b20      	ldr	r3, [pc, #128]	; (80298 <SystemInit+0xb8>)
   80216:	4a22      	ldr	r2, [pc, #136]	; (802a0 <SystemInit+0xc0>)
   80218:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8021a:	bf00      	nop
   8021c:	4b1e      	ldr	r3, [pc, #120]	; (80298 <SystemInit+0xb8>)
   8021e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   80224:	2b00      	cmp	r3, #0
   80226:	d0f9      	beq.n	8021c <SystemInit+0x3c>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80228:	4a1b      	ldr	r2, [pc, #108]	; (80298 <SystemInit+0xb8>)
   8022a:	4b1b      	ldr	r3, [pc, #108]	; (80298 <SystemInit+0xb8>)
   8022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8022e:	f023 0303 	bic.w	r3, r3, #3
   80232:	f043 0301 	orr.w	r3, r3, #1
   80236:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80238:	bf00      	nop
   8023a:	4b17      	ldr	r3, [pc, #92]	; (80298 <SystemInit+0xb8>)
   8023c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8023e:	f003 0308 	and.w	r3, r3, #8
   80242:	2b00      	cmp	r3, #0
   80244:	d0f9      	beq.n	8023a <SystemInit+0x5a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80246:	4b14      	ldr	r3, [pc, #80]	; (80298 <SystemInit+0xb8>)
   80248:	4a16      	ldr	r2, [pc, #88]	; (802a4 <SystemInit+0xc4>)
   8024a:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8024c:	bf00      	nop
   8024e:	4b12      	ldr	r3, [pc, #72]	; (80298 <SystemInit+0xb8>)
   80250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80252:	f003 0302 	and.w	r3, r3, #2
   80256:	2b00      	cmp	r3, #0
   80258:	d0f9      	beq.n	8024e <SystemInit+0x6e>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8025a:	4b0f      	ldr	r3, [pc, #60]	; (80298 <SystemInit+0xb8>)
   8025c:	2211      	movs	r2, #17
   8025e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80260:	bf00      	nop
   80262:	4b0d      	ldr	r3, [pc, #52]	; (80298 <SystemInit+0xb8>)
   80264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80266:	f003 0308 	and.w	r3, r3, #8
   8026a:	2b00      	cmp	r3, #0
   8026c:	d0f9      	beq.n	80262 <SystemInit+0x82>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8026e:	4b0a      	ldr	r3, [pc, #40]	; (80298 <SystemInit+0xb8>)
   80270:	2212      	movs	r2, #18
   80272:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80274:	bf00      	nop
   80276:	4b08      	ldr	r3, [pc, #32]	; (80298 <SystemInit+0xb8>)
   80278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8027a:	f003 0308 	and.w	r3, r3, #8
   8027e:	2b00      	cmp	r3, #0
   80280:	d0f9      	beq.n	80276 <SystemInit+0x96>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80282:	4b09      	ldr	r3, [pc, #36]	; (802a8 <SystemInit+0xc8>)
   80284:	4a09      	ldr	r2, [pc, #36]	; (802ac <SystemInit+0xcc>)
   80286:	601a      	str	r2, [r3, #0]
}
   80288:	46bd      	mov	sp, r7
   8028a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8028e:	4770      	bx	lr
   80290:	400e0a00 	.word	0x400e0a00
   80294:	400e0c00 	.word	0x400e0c00
   80298:	400e0600 	.word	0x400e0600
   8029c:	00370809 	.word	0x00370809
   802a0:	01370809 	.word	0x01370809
   802a4:	200d3f01 	.word	0x200d3f01
   802a8:	20000000 	.word	0x20000000
   802ac:	0501bd00 	.word	0x0501bd00

000802b0 <PIOB_Handler>:


// *************************************************************************************************************************************

void PIOB_Handler()
{
   802b0:	b480      	push	{r7}
   802b2:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTB we need to
	//  check if PB27 is the one triggering the interrupt.
	if((PIOB->PIO_ISR & PIO_PB27)==PIO_PB27){
   802b4:	4b09      	ldr	r3, [pc, #36]	; (802dc <PIOB_Handler+0x2c>)
   802b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   802bc:	2b00      	cmp	r3, #0
   802be:	d009      	beq.n	802d4 <PIOB_Handler+0x24>
		iEncoder_ST++;
   802c0:	4b07      	ldr	r3, [pc, #28]	; (802e0 <PIOB_Handler+0x30>)
   802c2:	681b      	ldr	r3, [r3, #0]
   802c4:	3301      	adds	r3, #1
   802c6:	4a06      	ldr	r2, [pc, #24]	; (802e0 <PIOB_Handler+0x30>)
   802c8:	6013      	str	r3, [r2, #0]
		iEncoder_ST_current++;
   802ca:	4b06      	ldr	r3, [pc, #24]	; (802e4 <PIOB_Handler+0x34>)
   802cc:	681b      	ldr	r3, [r3, #0]
   802ce:	3301      	adds	r3, #1
   802d0:	4a04      	ldr	r2, [pc, #16]	; (802e4 <PIOB_Handler+0x34>)
   802d2:	6013      	str	r3, [r2, #0]
	}
}
   802d4:	46bd      	mov	sp, r7
   802d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   802da:	4770      	bx	lr
   802dc:	400e1000 	.word	0x400e1000
   802e0:	2000045c 	.word	0x2000045c
   802e4:	20000464 	.word	0x20000464

000802e8 <PIOD_Handler>:

void PIOD_Handler()
{
   802e8:	b480      	push	{r7}
   802ea:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTD we need to
	//  check if PD8 is the one triggering the interrupt.
	if((PIOD->PIO_ISR & PIO_PD8)==PIO_PD8){
   802ec:	4b09      	ldr	r3, [pc, #36]	; (80314 <PIOD_Handler+0x2c>)
   802ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
   802f4:	2b00      	cmp	r3, #0
   802f6:	d009      	beq.n	8030c <PIOD_Handler+0x24>
		iEncoder_DR++;
   802f8:	4b07      	ldr	r3, [pc, #28]	; (80318 <PIOD_Handler+0x30>)
   802fa:	681b      	ldr	r3, [r3, #0]
   802fc:	3301      	adds	r3, #1
   802fe:	4a06      	ldr	r2, [pc, #24]	; (80318 <PIOD_Handler+0x30>)
   80300:	6013      	str	r3, [r2, #0]
		iEncoder_DR_current++;
   80302:	4b06      	ldr	r3, [pc, #24]	; (8031c <PIOD_Handler+0x34>)
   80304:	681b      	ldr	r3, [r3, #0]
   80306:	3301      	adds	r3, #1
   80308:	4a04      	ldr	r2, [pc, #16]	; (8031c <PIOD_Handler+0x34>)
   8030a:	6013      	str	r3, [r2, #0]
	}
}
   8030c:	46bd      	mov	sp, r7
   8030e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80312:	4770      	bx	lr
   80314:	400e1400 	.word	0x400e1400
   80318:	20000470 	.word	0x20000470
   8031c:	20000460 	.word	0x20000460

00080320 <PIOC_Handler>:

void PIOC_Handler()
{
   80320:	b480      	push	{r7}
   80322:	b083      	sub	sp, #12
   80324:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTC we need to
	//  check if PC25 is the one triggering the interrupt.
	uint32_t status = PIOC->PIO_ISR;
   80326:	4b13      	ldr	r3, [pc, #76]	; (80374 <PIOC_Handler+0x54>)
   80328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   8032a:	607b      	str	r3, [r7, #4]
	
	if((status & PIO_PC25)==PIO_PC25)
   8032c:	687b      	ldr	r3, [r7, #4]
   8032e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80332:	2b00      	cmp	r3, #0
   80334:	d00c      	beq.n	80350 <PIOC_Handler+0x30>
	{
		if(startStop_Camera)
   80336:	4b10      	ldr	r3, [pc, #64]	; (80378 <PIOC_Handler+0x58>)
   80338:	781b      	ldrb	r3, [r3, #0]
   8033a:	b2db      	uxtb	r3, r3
   8033c:	2b00      	cmp	r3, #0
   8033e:	d003      	beq.n	80348 <PIOC_Handler+0x28>
		{
			startStop_Camera = 0;
   80340:	4b0d      	ldr	r3, [pc, #52]	; (80378 <PIOC_Handler+0x58>)
   80342:	2200      	movs	r2, #0
   80344:	701a      	strb	r2, [r3, #0]
   80346:	e010      	b.n	8036a <PIOC_Handler+0x4a>
		}
		else
		{
			startStop_Camera = 1;
   80348:	4b0b      	ldr	r3, [pc, #44]	; (80378 <PIOC_Handler+0x58>)
   8034a:	2201      	movs	r2, #1
   8034c:	701a      	strb	r2, [r3, #0]
   8034e:	e00c      	b.n	8036a <PIOC_Handler+0x4a>
		}
	}
	else if((status & PIO_PC28)==PIO_PC28)
   80350:	687b      	ldr	r3, [r7, #4]
   80352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
   80356:	2b00      	cmp	r3, #0
   80358:	d007      	beq.n	8036a <PIOC_Handler+0x4a>
	{
		if(initializeMotors == 0)
   8035a:	4b08      	ldr	r3, [pc, #32]	; (8037c <PIOC_Handler+0x5c>)
   8035c:	781b      	ldrb	r3, [r3, #0]
   8035e:	b2db      	uxtb	r3, r3
   80360:	2b00      	cmp	r3, #0
   80362:	d102      	bne.n	8036a <PIOC_Handler+0x4a>
		{
			initializeMotors = 1;
   80364:	4b05      	ldr	r3, [pc, #20]	; (8037c <PIOC_Handler+0x5c>)
   80366:	2201      	movs	r2, #1
   80368:	701a      	strb	r2, [r3, #0]
		}
	}
}
   8036a:	370c      	adds	r7, #12
   8036c:	46bd      	mov	sp, r7
   8036e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80372:	4770      	bx	lr
   80374:	400e1200 	.word	0x400e1200
   80378:	20000475 	.word	0x20000475
   8037c:	20000474 	.word	0x20000474

00080380 <main>:
volatile uint8_t initializeMotors;

// *************************************************************************************************************************************

int main(void)
{
   80380:	b580      	push	{r7, lr}
   80382:	af00      	add	r7, sp, #0
    /* Initialize the SAM system */
    SystemInit();
   80384:	4b1e      	ldr	r3, [pc, #120]	; (80400 <main+0x80>)
   80386:	4798      	blx	r3
	/* Initialize pins */
	Pin_Configuration();
   80388:	4b1e      	ldr	r3, [pc, #120]	; (80404 <main+0x84>)
   8038a:	4798      	blx	r3
	/* Initialize PWM generator */
	InitPWMController_MCLK(); 
   8038c:	4b1e      	ldr	r3, [pc, #120]	; (80408 <main+0x88>)
   8038e:	4798      	blx	r3
	/* Initialize timers */
	Configure_Timers();
   80390:	4b1e      	ldr	r3, [pc, #120]	; (8040c <main+0x8c>)
   80392:	4798      	blx	r3
	/* Configre UART */
	configure_uart();
   80394:	4b1e      	ldr	r3, [pc, #120]	; (80410 <main+0x90>)
   80396:	4798      	blx	r3
	sendString("###ON \n", 7);
   80398:	481e      	ldr	r0, [pc, #120]	; (80414 <main+0x94>)
   8039a:	2107      	movs	r1, #7
   8039c:	4b1e      	ldr	r3, [pc, #120]	; (80418 <main+0x98>)
   8039e:	4798      	blx	r3

	/* Disable watchdog */
	WDT->WDT_MR |=  WDT_MR_WDDIS;
   803a0:	4a1e      	ldr	r2, [pc, #120]	; (8041c <main+0x9c>)
   803a2:	4b1e      	ldr	r3, [pc, #120]	; (8041c <main+0x9c>)
   803a4:	685b      	ldr	r3, [r3, #4]
   803a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   803aa:	6053      	str	r3, [r2, #4]

	//selfTest();
	
	// Set variables 
	initializeMotors = 0;
   803ac:	4b1c      	ldr	r3, [pc, #112]	; (80420 <main+0xa0>)
   803ae:	2200      	movs	r2, #0
   803b0:	701a      	strb	r2, [r3, #0]
	// ----- TASK_1
	#if defined(TASK_1)
		while (1)
		{	

			if(initializeMotors){
   803b2:	4b1b      	ldr	r3, [pc, #108]	; (80420 <main+0xa0>)
   803b4:	781b      	ldrb	r3, [r3, #0]
   803b6:	b2db      	uxtb	r3, r3
   803b8:	2b00      	cmp	r3, #0
   803ba:	d008      	beq.n	803ce <main+0x4e>
				sendString("###Initializing\n", 16);
   803bc:	4819      	ldr	r0, [pc, #100]	; (80424 <main+0xa4>)
   803be:	2110      	movs	r1, #16
   803c0:	4b15      	ldr	r3, [pc, #84]	; (80418 <main+0x98>)
   803c2:	4798      	blx	r3
				InitMotors();
   803c4:	4b18      	ldr	r3, [pc, #96]	; (80428 <main+0xa8>)
   803c6:	4798      	blx	r3
				initializeMotors = 0;
   803c8:	4b15      	ldr	r3, [pc, #84]	; (80420 <main+0xa0>)
   803ca:	2200      	movs	r2, #0
   803cc:	701a      	strb	r2, [r3, #0]
			}
			
			if(getNewSpeed()){
   803ce:	4b17      	ldr	r3, [pc, #92]	; (8042c <main+0xac>)
   803d0:	4798      	blx	r3
   803d2:	4603      	mov	r3, r0
   803d4:	2b00      	cmp	r3, #0
   803d6:	d011      	beq.n	803fc <main+0x7c>
				sendString("###New Speed\n", 14);
   803d8:	4815      	ldr	r0, [pc, #84]	; (80430 <main+0xb0>)
   803da:	210e      	movs	r1, #14
   803dc:	4b0e      	ldr	r3, [pc, #56]	; (80418 <main+0x98>)
   803de:	4798      	blx	r3
				newSpeed = 0;
   803e0:	4b14      	ldr	r3, [pc, #80]	; (80434 <main+0xb4>)
   803e2:	2200      	movs	r2, #0
   803e4:	701a      	strb	r2, [r3, #0]
				ControlledDrive(percentage_ST,percentage_DR);
   803e6:	4b14      	ldr	r3, [pc, #80]	; (80438 <main+0xb8>)
   803e8:	681a      	ldr	r2, [r3, #0]
   803ea:	4b14      	ldr	r3, [pc, #80]	; (8043c <main+0xbc>)
   803ec:	681b      	ldr	r3, [r3, #0]
   803ee:	4610      	mov	r0, r2
   803f0:	4619      	mov	r1, r3
   803f2:	4b13      	ldr	r3, [pc, #76]	; (80440 <main+0xc0>)
   803f4:	4798      	blx	r3
				flag12 = 0;
   803f6:	4b13      	ldr	r3, [pc, #76]	; (80444 <main+0xc4>)
   803f8:	2200      	movs	r2, #0
   803fa:	701a      	strb	r2, [r3, #0]
			}
		
			//ForwardDrive();
		}
   803fc:	e7d9      	b.n	803b2 <main+0x32>
   803fe:	bf00      	nop
   80400:	000801e1 	.word	0x000801e1
   80404:	00080479 	.word	0x00080479
   80408:	00080731 	.word	0x00080731
   8040c:	00080a69 	.word	0x00080a69
   80410:	00080dc9 	.word	0x00080dc9
   80414:	00081a44 	.word	0x00081a44
   80418:	00080c65 	.word	0x00080c65
   8041c:	400e1a50 	.word	0x400e1a50
   80420:	20000474 	.word	0x20000474
   80424:	00081a4c 	.word	0x00081a4c
   80428:	000808e9 	.word	0x000808e9
   8042c:	00080ca5 	.word	0x00080ca5
   80430:	00081a60 	.word	0x00081a60
   80434:	20000478 	.word	0x20000478
   80438:	20000498 	.word	0x20000498
   8043c:	20000490 	.word	0x20000490
   80440:	00080961 	.word	0x00080961
   80444:	20000454 	.word	0x20000454

00080448 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80448:	b480      	push	{r7}
   8044a:	b083      	sub	sp, #12
   8044c:	af00      	add	r7, sp, #0
   8044e:	4603      	mov	r3, r0
   80450:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80452:	4908      	ldr	r1, [pc, #32]	; (80474 <NVIC_EnableIRQ+0x2c>)
   80454:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80458:	095b      	lsrs	r3, r3, #5
   8045a:	79fa      	ldrb	r2, [r7, #7]
   8045c:	f002 021f 	and.w	r2, r2, #31
   80460:	2001      	movs	r0, #1
   80462:	fa00 f202 	lsl.w	r2, r0, r2
   80466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8046a:	370c      	adds	r7, #12
   8046c:	46bd      	mov	sp, r7
   8046e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80472:	4770      	bx	lr
   80474:	e000e100 	.word	0xe000e100

00080478 <Pin_Configuration>:
// ----- Defines
#define _BV(bit) (0x1u << bit)

// *************************************************************************************************************************************
void Pin_Configuration()
{
   80478:	b580      	push	{r7, lr}
   8047a:	af00      	add	r7, sp, #0
	// Enable clock for line A
		PMC->PMC_PCER0 |= _BV(ID_PIOA);
   8047c:	4aa4      	ldr	r2, [pc, #656]	; (80710 <Pin_Configuration+0x298>)
   8047e:	4ba4      	ldr	r3, [pc, #656]	; (80710 <Pin_Configuration+0x298>)
   80480:	691b      	ldr	r3, [r3, #16]
   80482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   80486:	6113      	str	r3, [r2, #16]
	// Enable clock for line C
		PMC->PMC_PCER0 |= _BV(ID_PIOC);
   80488:	4aa1      	ldr	r2, [pc, #644]	; (80710 <Pin_Configuration+0x298>)
   8048a:	4ba1      	ldr	r3, [pc, #644]	; (80710 <Pin_Configuration+0x298>)
   8048c:	691b      	ldr	r3, [r3, #16]
   8048e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80492:	6113      	str	r3, [r2, #16]
	// Enable clock for line B
		PMC->PMC_PCER0 |= _BV(ID_PIOB);
   80494:	4a9e      	ldr	r2, [pc, #632]	; (80710 <Pin_Configuration+0x298>)
   80496:	4b9e      	ldr	r3, [pc, #632]	; (80710 <Pin_Configuration+0x298>)
   80498:	691b      	ldr	r3, [r3, #16]
   8049a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   8049e:	6113      	str	r3, [r2, #16]
	// Enable clock for line D
		PMC->PMC_PCER0 |= _BV(ID_PIOD);
   804a0:	4a9b      	ldr	r2, [pc, #620]	; (80710 <Pin_Configuration+0x298>)
   804a2:	4b9b      	ldr	r3, [pc, #620]	; (80710 <Pin_Configuration+0x298>)
   804a4:	691b      	ldr	r3, [r3, #16]
   804a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   804aa:	6113      	str	r3, [r2, #16]

	// Set pin 13[B27] as input for encoder data - left[ST]
		PIOB -> PIO_PER |= PIO_PB27;
   804ac:	4a99      	ldr	r2, [pc, #612]	; (80714 <Pin_Configuration+0x29c>)
   804ae:	4b99      	ldr	r3, [pc, #612]	; (80714 <Pin_Configuration+0x29c>)
   804b0:	681b      	ldr	r3, [r3, #0]
   804b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   804b6:	6013      	str	r3, [r2, #0]
		PIOB -> PIO_ODR |= PIO_PB27;
   804b8:	4a96      	ldr	r2, [pc, #600]	; (80714 <Pin_Configuration+0x29c>)
   804ba:	4b96      	ldr	r3, [pc, #600]	; (80714 <Pin_Configuration+0x29c>)
   804bc:	695b      	ldr	r3, [r3, #20]
   804be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   804c2:	6153      	str	r3, [r2, #20]
		PIOB -> PIO_PUDR |= PIO_PB27;
   804c4:	4a93      	ldr	r2, [pc, #588]	; (80714 <Pin_Configuration+0x29c>)
   804c6:	4b93      	ldr	r3, [pc, #588]	; (80714 <Pin_Configuration+0x29c>)
   804c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   804ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   804ce:	6613      	str	r3, [r2, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOB->PIO_AIMER |= PIO_PB27;
   804d0:	4a90      	ldr	r2, [pc, #576]	; (80714 <Pin_Configuration+0x29c>)
   804d2:	4b90      	ldr	r3, [pc, #576]	; (80714 <Pin_Configuration+0x29c>)
   804d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   804d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   804dc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		//Edge Select Register
		PIOB->PIO_ESR |= PIO_PB27;
   804e0:	4a8c      	ldr	r2, [pc, #560]	; (80714 <Pin_Configuration+0x29c>)
   804e2:	4b8c      	ldr	r3, [pc, #560]	; (80714 <Pin_Configuration+0x29c>)
   804e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   804e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   804ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		//Rising Edge/Low Level Select Register
		PIOB->PIO_REHLSR |= PIO_PB27;
   804f0:	4a88      	ldr	r2, [pc, #544]	; (80714 <Pin_Configuration+0x29c>)
   804f2:	4b88      	ldr	r3, [pc, #544]	; (80714 <Pin_Configuration+0x29c>)
   804f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   804f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   804fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		//Finally enable interrupts on PORTB.PB27
		PIOB->PIO_IER |= PIO_PB27;
   80500:	4a84      	ldr	r2, [pc, #528]	; (80714 <Pin_Configuration+0x29c>)
   80502:	4b84      	ldr	r3, [pc, #528]	; (80714 <Pin_Configuration+0x29c>)
   80504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   80506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   8050a:	6413      	str	r3, [r2, #64]	; 0x40
		NVIC_EnableIRQ(PIOB_IRQn);
   8050c:	200c      	movs	r0, #12
   8050e:	4b82      	ldr	r3, [pc, #520]	; (80718 <Pin_Configuration+0x2a0>)
   80510:	4798      	blx	r3
	
	// Set pin 12[D8] as input for encoder data - right[DR]
		PIOD -> PIO_PER |= PIO_PD8;
   80512:	4a82      	ldr	r2, [pc, #520]	; (8071c <Pin_Configuration+0x2a4>)
   80514:	4b81      	ldr	r3, [pc, #516]	; (8071c <Pin_Configuration+0x2a4>)
   80516:	681b      	ldr	r3, [r3, #0]
   80518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8051c:	6013      	str	r3, [r2, #0]
		PIOD -> PIO_ODR |= PIO_PD8;
   8051e:	4a7f      	ldr	r2, [pc, #508]	; (8071c <Pin_Configuration+0x2a4>)
   80520:	4b7e      	ldr	r3, [pc, #504]	; (8071c <Pin_Configuration+0x2a4>)
   80522:	695b      	ldr	r3, [r3, #20]
   80524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80528:	6153      	str	r3, [r2, #20]
		PIOD -> PIO_PUDR |= PIO_PD8;
   8052a:	4a7c      	ldr	r2, [pc, #496]	; (8071c <Pin_Configuration+0x2a4>)
   8052c:	4b7b      	ldr	r3, [pc, #492]	; (8071c <Pin_Configuration+0x2a4>)
   8052e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   80530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80534:	6613      	str	r3, [r2, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOD -> PIO_AIMER |= PIO_PD8;
   80536:	4a79      	ldr	r2, [pc, #484]	; (8071c <Pin_Configuration+0x2a4>)
   80538:	4b78      	ldr	r3, [pc, #480]	; (8071c <Pin_Configuration+0x2a4>)
   8053a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   8053e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80542:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		//Edge Select Register
		PIOD -> PIO_ESR |= PIO_PD8;
   80546:	4a75      	ldr	r2, [pc, #468]	; (8071c <Pin_Configuration+0x2a4>)
   80548:	4b74      	ldr	r3, [pc, #464]	; (8071c <Pin_Configuration+0x2a4>)
   8054a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   8054e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80552:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		//Rising Edge/Low Level Select Register
		PIOD -> PIO_REHLSR |= PIO_PD8;
   80556:	4a71      	ldr	r2, [pc, #452]	; (8071c <Pin_Configuration+0x2a4>)
   80558:	4b70      	ldr	r3, [pc, #448]	; (8071c <Pin_Configuration+0x2a4>)
   8055a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   8055e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80562:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		//Finally enable interrupts on PORTD.PD8
		PIOD -> PIO_IER |= PIO_PD8;
   80566:	4a6d      	ldr	r2, [pc, #436]	; (8071c <Pin_Configuration+0x2a4>)
   80568:	4b6c      	ldr	r3, [pc, #432]	; (8071c <Pin_Configuration+0x2a4>)
   8056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8056c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80570:	6413      	str	r3, [r2, #64]	; 0x40
		NVIC_EnableIRQ(PIOD_IRQn);
   80572:	200e      	movs	r0, #14
   80574:	4b68      	ldr	r3, [pc, #416]	; (80718 <Pin_Configuration+0x2a0>)
   80576:	4798      	blx	r3
		
	// Set pin 11[D7] as output for Buzzer - PCB2 pin U
		PIOD -> PIO_PER |= PIO_PD7; // PIO_PER = PIO enable register
   80578:	4a68      	ldr	r2, [pc, #416]	; (8071c <Pin_Configuration+0x2a4>)
   8057a:	4b68      	ldr	r3, [pc, #416]	; (8071c <Pin_Configuration+0x2a4>)
   8057c:	681b      	ldr	r3, [r3, #0]
   8057e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80582:	6013      	str	r3, [r2, #0]
		PIOD -> PIO_OER |= PIO_PD7; // PIO_OER = Output Enable Register
   80584:	4a65      	ldr	r2, [pc, #404]	; (8071c <Pin_Configuration+0x2a4>)
   80586:	4b65      	ldr	r3, [pc, #404]	; (8071c <Pin_Configuration+0x2a4>)
   80588:	691b      	ldr	r3, [r3, #16]
   8058a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8058e:	6113      	str	r3, [r2, #16]
		PIOD -> PIO_PUDR |= PIO_PD7; // Disable pull-up on pin D7
   80590:	4a62      	ldr	r2, [pc, #392]	; (8071c <Pin_Configuration+0x2a4>)
   80592:	4b62      	ldr	r3, [pc, #392]	; (8071c <Pin_Configuration+0x2a4>)
   80594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   80596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8059a:	6613      	str	r3, [r2, #96]	; 0x60
	
	// Set pin 9[C21] as PWM output for motors - left[ST]
		PIOC->PIO_PDR |= PIO_PC22; // PIO_PDR = PIO Disable register
   8059c:	4a60      	ldr	r2, [pc, #384]	; (80720 <Pin_Configuration+0x2a8>)
   8059e:	4b60      	ldr	r3, [pc, #384]	; (80720 <Pin_Configuration+0x2a8>)
   805a0:	685b      	ldr	r3, [r3, #4]
   805a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   805a6:	6053      	str	r3, [r2, #4]
		PIOC->PIO_ABSR |= PIO_PC22; // PIO_ABSR = Peripheral AB Select Register
   805a8:	4a5d      	ldr	r2, [pc, #372]	; (80720 <Pin_Configuration+0x2a8>)
   805aa:	4b5d      	ldr	r3, [pc, #372]	; (80720 <Pin_Configuration+0x2a8>)
   805ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   805ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   805b2:	6713      	str	r3, [r2, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC22; // Enable output on pin C22
   805b4:	4a5a      	ldr	r2, [pc, #360]	; (80720 <Pin_Configuration+0x2a8>)
   805b6:	4b5a      	ldr	r3, [pc, #360]	; (80720 <Pin_Configuration+0x2a8>)
   805b8:	691b      	ldr	r3, [r3, #16]
   805ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   805be:	6113      	str	r3, [r2, #16]
		PIOC->PIO_PUDR |= PIO_PC22; // Disable pull-up on pin C22
   805c0:	4a57      	ldr	r2, [pc, #348]	; (80720 <Pin_Configuration+0x2a8>)
   805c2:	4b57      	ldr	r3, [pc, #348]	; (80720 <Pin_Configuration+0x2a8>)
   805c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   805c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   805ca:	6613      	str	r3, [r2, #96]	; 0x60
	
	// Set pin 8[C22] as PWM output for motors - right[DR]
		PIOC->PIO_PDR |= PIO_PC21; // Disable PIO Control on PC21 and set up for Peripheral B
   805cc:	4a54      	ldr	r2, [pc, #336]	; (80720 <Pin_Configuration+0x2a8>)
   805ce:	4b54      	ldr	r3, [pc, #336]	; (80720 <Pin_Configuration+0x2a8>)
   805d0:	685b      	ldr	r3, [r3, #4]
   805d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   805d6:	6053      	str	r3, [r2, #4]
		PIOC->PIO_ABSR |= PIO_PC21;
   805d8:	4a51      	ldr	r2, [pc, #324]	; (80720 <Pin_Configuration+0x2a8>)
   805da:	4b51      	ldr	r3, [pc, #324]	; (80720 <Pin_Configuration+0x2a8>)
   805dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   805de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   805e2:	6713      	str	r3, [r2, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC21; // Enable output on pin C21
   805e4:	4a4e      	ldr	r2, [pc, #312]	; (80720 <Pin_Configuration+0x2a8>)
   805e6:	4b4e      	ldr	r3, [pc, #312]	; (80720 <Pin_Configuration+0x2a8>)
   805e8:	691b      	ldr	r3, [r3, #16]
   805ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   805ee:	6113      	str	r3, [r2, #16]
		PIOC->PIO_PUDR |= PIO_PC21; // Enable pull-up on pin C21
   805f0:	4a4b      	ldr	r2, [pc, #300]	; (80720 <Pin_Configuration+0x2a8>)
   805f2:	4b4b      	ldr	r3, [pc, #300]	; (80720 <Pin_Configuration+0x2a8>)
   805f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   805f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   805fa:	6613      	str	r3, [r2, #96]	; 0x60
	
	// Set pin 7[C23] as output for LED - PCB2 pinS
		PIOC -> PIO_PER |= PIO_PC23;
   805fc:	4a48      	ldr	r2, [pc, #288]	; (80720 <Pin_Configuration+0x2a8>)
   805fe:	4b48      	ldr	r3, [pc, #288]	; (80720 <Pin_Configuration+0x2a8>)
   80600:	681b      	ldr	r3, [r3, #0]
   80602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80606:	6013      	str	r3, [r2, #0]
		PIOC -> PIO_OER |= PIO_PC23;
   80608:	4a45      	ldr	r2, [pc, #276]	; (80720 <Pin_Configuration+0x2a8>)
   8060a:	4b45      	ldr	r3, [pc, #276]	; (80720 <Pin_Configuration+0x2a8>)
   8060c:	691b      	ldr	r3, [r3, #16]
   8060e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80612:	6113      	str	r3, [r2, #16]
		PIOC -> PIO_PUDR |= PIO_PC23;
   80614:	4a42      	ldr	r2, [pc, #264]	; (80720 <Pin_Configuration+0x2a8>)
   80616:	4b42      	ldr	r3, [pc, #264]	; (80720 <Pin_Configuration+0x2a8>)
   80618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   8061a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8061e:	6613      	str	r3, [r2, #96]	; 0x60
		
	// Set pin 6[C24] as output for PUMP - PCB2 pinH
		PIOC -> PIO_PER |= PIO_PC24;
   80620:	4a3f      	ldr	r2, [pc, #252]	; (80720 <Pin_Configuration+0x2a8>)
   80622:	4b3f      	ldr	r3, [pc, #252]	; (80720 <Pin_Configuration+0x2a8>)
   80624:	681b      	ldr	r3, [r3, #0]
   80626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8062a:	6013      	str	r3, [r2, #0]
		PIOC -> PIO_OER |= PIO_PC24;
   8062c:	4a3c      	ldr	r2, [pc, #240]	; (80720 <Pin_Configuration+0x2a8>)
   8062e:	4b3c      	ldr	r3, [pc, #240]	; (80720 <Pin_Configuration+0x2a8>)
   80630:	691b      	ldr	r3, [r3, #16]
   80632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   80636:	6113      	str	r3, [r2, #16]
		PIOC -> PIO_PUDR |= PIO_PC24;
   80638:	4a39      	ldr	r2, [pc, #228]	; (80720 <Pin_Configuration+0x2a8>)
   8063a:	4b39      	ldr	r3, [pc, #228]	; (80720 <Pin_Configuration+0x2a8>)
   8063c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   8063e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   80642:	6613      	str	r3, [r2, #96]	; 0x60
		
	// Set pin 5[C25] as input for start/stop from camera
		PIOC -> PIO_PER |= PIO_PC25;
   80644:	4a36      	ldr	r2, [pc, #216]	; (80720 <Pin_Configuration+0x2a8>)
   80646:	4b36      	ldr	r3, [pc, #216]	; (80720 <Pin_Configuration+0x2a8>)
   80648:	681b      	ldr	r3, [r3, #0]
   8064a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   8064e:	6013      	str	r3, [r2, #0]
		PIOC -> PIO_ODR |= PIO_PC25;
   80650:	4a33      	ldr	r2, [pc, #204]	; (80720 <Pin_Configuration+0x2a8>)
   80652:	4b33      	ldr	r3, [pc, #204]	; (80720 <Pin_Configuration+0x2a8>)
   80654:	695b      	ldr	r3, [r3, #20]
   80656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   8065a:	6153      	str	r3, [r2, #20]
		PIOC -> PIO_PUDR |= PIO_PC25;
   8065c:	4a30      	ldr	r2, [pc, #192]	; (80720 <Pin_Configuration+0x2a8>)
   8065e:	4b30      	ldr	r3, [pc, #192]	; (80720 <Pin_Configuration+0x2a8>)
   80660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   80662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80666:	6613      	str	r3, [r2, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOC->PIO_AIMER |= PIO_PC25;
   80668:	4a2d      	ldr	r2, [pc, #180]	; (80720 <Pin_Configuration+0x2a8>)
   8066a:	4b2d      	ldr	r3, [pc, #180]	; (80720 <Pin_Configuration+0x2a8>)
   8066c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   80670:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80674:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		//Edge Select Register
		PIOC->PIO_ESR |= PIO_PC25;
   80678:	4a29      	ldr	r2, [pc, #164]	; (80720 <Pin_Configuration+0x2a8>)
   8067a:	4b29      	ldr	r3, [pc, #164]	; (80720 <Pin_Configuration+0x2a8>)
   8067c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   80680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80684:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		//Rising Edge/Low Level Select Register
		PIOC->PIO_REHLSR |= PIO_PC25;
   80688:	4a25      	ldr	r2, [pc, #148]	; (80720 <Pin_Configuration+0x2a8>)
   8068a:	4b25      	ldr	r3, [pc, #148]	; (80720 <Pin_Configuration+0x2a8>)
   8068c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   80690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80694:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		//Finally enable interrupts on PORTB.PB27
		PIOC->PIO_IER |= PIO_PC25;
   80698:	4a21      	ldr	r2, [pc, #132]	; (80720 <Pin_Configuration+0x2a8>)
   8069a:	4b21      	ldr	r3, [pc, #132]	; (80720 <Pin_Configuration+0x2a8>)
   8069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8069e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   806a2:	6413      	str	r3, [r2, #64]	; 0x40
		NVIC_EnableIRQ(PIOC_IRQn);
   806a4:	200d      	movs	r0, #13
   806a6:	4b1c      	ldr	r3, [pc, #112]	; (80718 <Pin_Configuration+0x2a0>)
   806a8:	4798      	blx	r3
		
	// Set pin 3[C28] as input for motor init
		PIOC -> PIO_PER |= PIO_PC28;
   806aa:	4a1d      	ldr	r2, [pc, #116]	; (80720 <Pin_Configuration+0x2a8>)
   806ac:	4b1c      	ldr	r3, [pc, #112]	; (80720 <Pin_Configuration+0x2a8>)
   806ae:	681b      	ldr	r3, [r3, #0]
   806b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   806b4:	6013      	str	r3, [r2, #0]
		PIOC -> PIO_ODR |= PIO_PC28;
   806b6:	4a1a      	ldr	r2, [pc, #104]	; (80720 <Pin_Configuration+0x2a8>)
   806b8:	4b19      	ldr	r3, [pc, #100]	; (80720 <Pin_Configuration+0x2a8>)
   806ba:	695b      	ldr	r3, [r3, #20]
   806bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   806c0:	6153      	str	r3, [r2, #20]
		PIOC -> PIO_PUDR |= PIO_PC28;
   806c2:	4a17      	ldr	r2, [pc, #92]	; (80720 <Pin_Configuration+0x2a8>)
   806c4:	4b16      	ldr	r3, [pc, #88]	; (80720 <Pin_Configuration+0x2a8>)
   806c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   806c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   806cc:	6613      	str	r3, [r2, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOC->PIO_AIMER |= PIO_PC28;
   806ce:	4a14      	ldr	r2, [pc, #80]	; (80720 <Pin_Configuration+0x2a8>)
   806d0:	4b13      	ldr	r3, [pc, #76]	; (80720 <Pin_Configuration+0x2a8>)
   806d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   806d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   806da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		//Edge Select Register
		PIOC->PIO_ESR |= PIO_PC28;
   806de:	4a10      	ldr	r2, [pc, #64]	; (80720 <Pin_Configuration+0x2a8>)
   806e0:	4b0f      	ldr	r3, [pc, #60]	; (80720 <Pin_Configuration+0x2a8>)
   806e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   806e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   806ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		//Rising Edge/Low Level Select Register
		PIOC->PIO_REHLSR |= PIO_PC28;
   806ee:	4a0c      	ldr	r2, [pc, #48]	; (80720 <Pin_Configuration+0x2a8>)
   806f0:	4b0b      	ldr	r3, [pc, #44]	; (80720 <Pin_Configuration+0x2a8>)
   806f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   806f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   806fa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		//Finally enable interrupts on PORTC.PC28
		PIOC->PIO_IER |= PIO_PC28;
   806fe:	4a08      	ldr	r2, [pc, #32]	; (80720 <Pin_Configuration+0x2a8>)
   80700:	4b07      	ldr	r3, [pc, #28]	; (80720 <Pin_Configuration+0x2a8>)
   80702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   80704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   80708:	6413      	str	r3, [r2, #64]	; 0x40
		NVIC_EnableIRQ(PIOC_IRQn);
   8070a:	200d      	movs	r0, #13
   8070c:	e00a      	b.n	80724 <Pin_Configuration+0x2ac>
   8070e:	bf00      	nop
   80710:	400e0600 	.word	0x400e0600
   80714:	400e1000 	.word	0x400e1000
   80718:	00080449 	.word	0x00080449
   8071c:	400e1400 	.word	0x400e1400
   80720:	400e1200 	.word	0x400e1200
   80724:	4b01      	ldr	r3, [pc, #4]	; (8072c <Pin_Configuration+0x2b4>)
   80726:	4798      	blx	r3
			NVIC_SetPriority(PIOC_IRQn,1);
		// ----- TASK_4 Interrupt priority
		#elif defined(TASK_4)
	
		#endif
}
   80728:	bd80      	pop	{r7, pc}
   8072a:	bf00      	nop
   8072c:	00080449 	.word	0x00080449

00080730 <InitPWMController_MCLK>:
void signum(int x);

// *************************************************************************************************************************************

void InitPWMController_MCLK()
{
   80730:	b580      	push	{r7, lr}
   80732:	af00      	add	r7, sp, #0
	//Enable the PWM clock (36) 
	PMC->PMC_PCER1 |= _BV((ID_PWM - 32)); // PMC_PCER1 = Peripheral Clock Enable Register 1
   80734:	4a14      	ldr	r2, [pc, #80]	; (80788 <InitPWMController_MCLK+0x58>)
   80736:	4b14      	ldr	r3, [pc, #80]	; (80788 <InitPWMController_MCLK+0x58>)
   80738:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   8073c:	f043 0310 	orr.w	r3, r3, #16
   80740:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	//Channel Prescaler - Use ClockA as configured in PWM_CLK
	//Preliminary frequency = 84000000 / 1024 = 82031 Hz
	PWM->PWM_CH_NUM[CHAN_ST].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   80744:	4b11      	ldr	r3, [pc, #68]	; (8078c <InitPWMController_MCLK+0x5c>)
   80746:	220a      	movs	r2, #10
   80748:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[CHAN_DR].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   8074c:	4b0f      	ldr	r3, [pc, #60]	; (8078c <InitPWMController_MCLK+0x5c>)
   8074e:	220a      	movs	r2, #10
   80750:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	//Final frequency = 82031 / 1600 = 51 Hz
	SetPeriod(CHAN_ST, 1640);
   80754:	2004      	movs	r0, #4
   80756:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   8075a:	4b0d      	ldr	r3, [pc, #52]	; (80790 <InitPWMController_MCLK+0x60>)
   8075c:	4798      	blx	r3
	//Duty cycle = (200 / 400) * 100 = 50%
	SetDuty(CHAN_ST, 100);
   8075e:	2004      	movs	r0, #4
   80760:	2164      	movs	r1, #100	; 0x64
   80762:	4b0c      	ldr	r3, [pc, #48]	; (80794 <InitPWMController_MCLK+0x64>)
   80764:	4798      	blx	r3
	
	//Final frequency = 82031 / 1600 = 51Hz
	SetPeriod(CHAN_DR, 1640);
   80766:	2005      	movs	r0, #5
   80768:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   8076c:	4b08      	ldr	r3, [pc, #32]	; (80790 <InitPWMController_MCLK+0x60>)
   8076e:	4798      	blx	r3
	//Duty cycle = (x / 800) * 100 = y%
	SetDuty(CHAN_DR, 100);
   80770:	2005      	movs	r0, #5
   80772:	2164      	movs	r1, #100	; 0x64
   80774:	4b07      	ldr	r3, [pc, #28]	; (80794 <InitPWMController_MCLK+0x64>)
   80776:	4798      	blx	r3
	
	PWM->PWM_ENA = _BV(CHAN_DR); // PWM_ENA = PWM Enable Register
   80778:	4b04      	ldr	r3, [pc, #16]	; (8078c <InitPWMController_MCLK+0x5c>)
   8077a:	2220      	movs	r2, #32
   8077c:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA = _BV(CHAN_ST); // PWM_ENA = PWM Enable Register
   8077e:	4b03      	ldr	r3, [pc, #12]	; (8078c <InitPWMController_MCLK+0x5c>)
   80780:	2210      	movs	r2, #16
   80782:	605a      	str	r2, [r3, #4]
}
   80784:	bd80      	pop	{r7, pc}
   80786:	bf00      	nop
   80788:	400e0600 	.word	0x400e0600
   8078c:	40094000 	.word	0x40094000
   80790:	00080799 	.word	0x00080799
   80794:	000807e5 	.word	0x000807e5

00080798 <SetPeriod>:

static void SetPeriod(uint32_t chan, int period)
{
   80798:	b480      	push	{r7}
   8079a:	b083      	sub	sp, #12
   8079c:	af00      	add	r7, sp, #0
   8079e:	6078      	str	r0, [r7, #4]
   807a0:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   807a2:	4b0f      	ldr	r3, [pc, #60]	; (807e0 <SetPeriod+0x48>)
   807a4:	68da      	ldr	r2, [r3, #12]
   807a6:	687b      	ldr	r3, [r7, #4]
   807a8:	2101      	movs	r1, #1
   807aa:	fa01 f303 	lsl.w	r3, r1, r3
   807ae:	4013      	ands	r3, r2
   807b0:	2b00      	cmp	r3, #0
   807b2:	d108      	bne.n	807c6 <SetPeriod+0x2e>
		PWM->PWM_CH_NUM[chan].PWM_CPRD = period; // PWM_CPRD = PWM Channel Period Register
   807b4:	490a      	ldr	r1, [pc, #40]	; (807e0 <SetPeriod+0x48>)
   807b6:	683a      	ldr	r2, [r7, #0]
   807b8:	687b      	ldr	r3, [r7, #4]
   807ba:	015b      	lsls	r3, r3, #5
   807bc:	440b      	add	r3, r1
   807be:	f503 7302 	add.w	r3, r3, #520	; 0x208
   807c2:	605a      	str	r2, [r3, #4]
   807c4:	e007      	b.n	807d6 <SetPeriod+0x3e>
	else
		PWM->PWM_CH_NUM[chan].PWM_CPRDUPD = period; // PWM_CPRDUPD = PWM Channel Period Update Register
   807c6:	4906      	ldr	r1, [pc, #24]	; (807e0 <SetPeriod+0x48>)
   807c8:	683a      	ldr	r2, [r7, #0]
   807ca:	687b      	ldr	r3, [r7, #4]
   807cc:	015b      	lsls	r3, r3, #5
   807ce:	440b      	add	r3, r1
   807d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   807d4:	601a      	str	r2, [r3, #0]
}
   807d6:	370c      	adds	r7, #12
   807d8:	46bd      	mov	sp, r7
   807da:	f85d 7b04 	ldr.w	r7, [sp], #4
   807de:	4770      	bx	lr
   807e0:	40094000 	.word	0x40094000

000807e4 <SetDuty>:

static void SetDuty(uint32_t chan, int duty)
{
   807e4:	b480      	push	{r7}
   807e6:	b083      	sub	sp, #12
   807e8:	af00      	add	r7, sp, #0
   807ea:	6078      	str	r0, [r7, #4]
   807ec:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   807ee:	4b0f      	ldr	r3, [pc, #60]	; (8082c <SetDuty+0x48>)
   807f0:	68da      	ldr	r2, [r3, #12]
   807f2:	687b      	ldr	r3, [r7, #4]
   807f4:	2101      	movs	r1, #1
   807f6:	fa01 f303 	lsl.w	r3, r1, r3
   807fa:	4013      	ands	r3, r2
   807fc:	2b00      	cmp	r3, #0
   807fe:	d107      	bne.n	80810 <SetDuty+0x2c>
		PWM->PWM_CH_NUM[chan].PWM_CDTY = duty;
   80800:	490a      	ldr	r1, [pc, #40]	; (8082c <SetDuty+0x48>)
   80802:	683a      	ldr	r2, [r7, #0]
   80804:	687b      	ldr	r3, [r7, #4]
   80806:	3310      	adds	r3, #16
   80808:	015b      	lsls	r3, r3, #5
   8080a:	440b      	add	r3, r1
   8080c:	605a      	str	r2, [r3, #4]
   8080e:	e007      	b.n	80820 <SetDuty+0x3c>
	else
		PWM->PWM_CH_NUM[chan].PWM_CDTYUPD = duty;
   80810:	4906      	ldr	r1, [pc, #24]	; (8082c <SetDuty+0x48>)
   80812:	683a      	ldr	r2, [r7, #0]
   80814:	687b      	ldr	r3, [r7, #4]
   80816:	015b      	lsls	r3, r3, #5
   80818:	440b      	add	r3, r1
   8081a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8081e:	601a      	str	r2, [r3, #0]
}
   80820:	370c      	adds	r7, #12
   80822:	46bd      	mov	sp, r7
   80824:	f85d 7b04 	ldr.w	r7, [sp], #4
   80828:	4770      	bx	lr
   8082a:	bf00      	nop
   8082c:	40094000 	.word	0x40094000

00080830 <WriteMotors>:

void WriteMotors(int percent_ST, int percent_DR)
{
   80830:	b590      	push	{r4, r7, lr}
   80832:	b083      	sub	sp, #12
   80834:	af00      	add	r7, sp, #0
   80836:	6078      	str	r0, [r7, #4]
   80838:	6039      	str	r1, [r7, #0]
	SetDuty(CHAN_ST,123+(percent_ST/2.43)); // PWM motor stanga
   8083a:	4b25      	ldr	r3, [pc, #148]	; (808d0 <WriteMotors+0xa0>)
   8083c:	6878      	ldr	r0, [r7, #4]
   8083e:	4798      	blx	r3
   80840:	4602      	mov	r2, r0
   80842:	460b      	mov	r3, r1
   80844:	4c23      	ldr	r4, [pc, #140]	; (808d4 <WriteMotors+0xa4>)
   80846:	4610      	mov	r0, r2
   80848:	4619      	mov	r1, r3
   8084a:	a31d      	add	r3, pc, #116	; (adr r3, 808c0 <WriteMotors+0x90>)
   8084c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80850:	47a0      	blx	r4
   80852:	4602      	mov	r2, r0
   80854:	460b      	mov	r3, r1
   80856:	4c20      	ldr	r4, [pc, #128]	; (808d8 <WriteMotors+0xa8>)
   80858:	4610      	mov	r0, r2
   8085a:	4619      	mov	r1, r3
   8085c:	a31a      	add	r3, pc, #104	; (adr r3, 808c8 <WriteMotors+0x98>)
   8085e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80862:	47a0      	blx	r4
   80864:	4602      	mov	r2, r0
   80866:	460b      	mov	r3, r1
   80868:	4610      	mov	r0, r2
   8086a:	4619      	mov	r1, r3
   8086c:	4b1b      	ldr	r3, [pc, #108]	; (808dc <WriteMotors+0xac>)
   8086e:	4798      	blx	r3
   80870:	4603      	mov	r3, r0
   80872:	2004      	movs	r0, #4
   80874:	4619      	mov	r1, r3
   80876:	4b1a      	ldr	r3, [pc, #104]	; (808e0 <WriteMotors+0xb0>)
   80878:	4798      	blx	r3
	SetDuty(CHAN_DR,123-(percent_DR/2.43)); // PWM motor dreapta
   8087a:	4b15      	ldr	r3, [pc, #84]	; (808d0 <WriteMotors+0xa0>)
   8087c:	6838      	ldr	r0, [r7, #0]
   8087e:	4798      	blx	r3
   80880:	4602      	mov	r2, r0
   80882:	460b      	mov	r3, r1
   80884:	4c13      	ldr	r4, [pc, #76]	; (808d4 <WriteMotors+0xa4>)
   80886:	4610      	mov	r0, r2
   80888:	4619      	mov	r1, r3
   8088a:	a30d      	add	r3, pc, #52	; (adr r3, 808c0 <WriteMotors+0x90>)
   8088c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80890:	47a0      	blx	r4
   80892:	4602      	mov	r2, r0
   80894:	460b      	mov	r3, r1
   80896:	4c13      	ldr	r4, [pc, #76]	; (808e4 <WriteMotors+0xb4>)
   80898:	a10b      	add	r1, pc, #44	; (adr r1, 808c8 <WriteMotors+0x98>)
   8089a:	e9d1 0100 	ldrd	r0, r1, [r1]
   8089e:	47a0      	blx	r4
   808a0:	4602      	mov	r2, r0
   808a2:	460b      	mov	r3, r1
   808a4:	4610      	mov	r0, r2
   808a6:	4619      	mov	r1, r3
   808a8:	4b0c      	ldr	r3, [pc, #48]	; (808dc <WriteMotors+0xac>)
   808aa:	4798      	blx	r3
   808ac:	4603      	mov	r3, r0
   808ae:	2005      	movs	r0, #5
   808b0:	4619      	mov	r1, r3
   808b2:	4b0b      	ldr	r3, [pc, #44]	; (808e0 <WriteMotors+0xb0>)
   808b4:	4798      	blx	r3
}
   808b6:	370c      	adds	r7, #12
   808b8:	46bd      	mov	sp, r7
   808ba:	bd90      	pop	{r4, r7, pc}
   808bc:	f3af 8000 	nop.w
   808c0:	d70a3d71 	.word	0xd70a3d71
   808c4:	400370a3 	.word	0x400370a3
   808c8:	00000000 	.word	0x00000000
   808cc:	405ec000 	.word	0x405ec000
   808d0:	00081125 	.word	0x00081125
   808d4:	00081445 	.word	0x00081445
   808d8:	00080e8d 	.word	0x00080e8d
   808dc:	00081615 	.word	0x00081615
   808e0:	000807e5 	.word	0x000807e5
   808e4:	00080e89 	.word	0x00080e89

000808e8 <InitMotors>:

void InitMotors()
{
   808e8:	b580      	push	{r7, lr}
   808ea:	af00      	add	r7, sp, #0
	WriteMotors(0,0);
   808ec:	2000      	movs	r0, #0
   808ee:	2100      	movs	r1, #0
   808f0:	4b18      	ldr	r3, [pc, #96]	; (80954 <InitMotors+0x6c>)
   808f2:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23; 
   808f4:	4b18      	ldr	r3, [pc, #96]	; (80958 <InitMotors+0x70>)
   808f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   808fa:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   808fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80900:	4b16      	ldr	r3, [pc, #88]	; (8095c <InitMotors+0x74>)
   80902:	4798      	blx	r3
	
	WriteMotors(100,100);//Stop Motors; Percent_RIGHT|Percent_LEFT
   80904:	2064      	movs	r0, #100	; 0x64
   80906:	2164      	movs	r1, #100	; 0x64
   80908:	4b12      	ldr	r3, [pc, #72]	; (80954 <InitMotors+0x6c>)
   8090a:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   8090c:	4b12      	ldr	r3, [pc, #72]	; (80958 <InitMotors+0x70>)
   8090e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80912:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(1000);
   80914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80918:	4b10      	ldr	r3, [pc, #64]	; (8095c <InitMotors+0x74>)
   8091a:	4798      	blx	r3
	
	WriteMotors(-100,-100);
   8091c:	f06f 0063 	mvn.w	r0, #99	; 0x63
   80920:	f06f 0163 	mvn.w	r1, #99	; 0x63
   80924:	4b0b      	ldr	r3, [pc, #44]	; (80954 <InitMotors+0x6c>)
   80926:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23;
   80928:	4b0b      	ldr	r3, [pc, #44]	; (80958 <InitMotors+0x70>)
   8092a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8092e:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   80930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80934:	4b09      	ldr	r3, [pc, #36]	; (8095c <InitMotors+0x74>)
   80936:	4798      	blx	r3
	
	WriteMotors(0,0);//Stop Motors; Percent_RIGHT|Percent_LEFT
   80938:	2000      	movs	r0, #0
   8093a:	2100      	movs	r1, #0
   8093c:	4b05      	ldr	r3, [pc, #20]	; (80954 <InitMotors+0x6c>)
   8093e:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   80940:	4b05      	ldr	r3, [pc, #20]	; (80958 <InitMotors+0x70>)
   80942:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80946:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(3000);
   80948:	f640 30b8 	movw	r0, #3000	; 0xbb8
   8094c:	4b03      	ldr	r3, [pc, #12]	; (8095c <InitMotors+0x74>)
   8094e:	4798      	blx	r3
}  
   80950:	bd80      	pop	{r7, pc}
   80952:	bf00      	nop
   80954:	00080831 	.word	0x00080831
   80958:	400e1200 	.word	0x400e1200
   8095c:	00080ae9 	.word	0x00080ae9

00080960 <ControlledDrive>:
	WriteMotors(iSpeed_ST,iSpeed_DR);
}

// 255 impulsuri ~ 60 cm 
// 
void ControlledDrive(uint32_t percent_ST, uint32_t percent_DR){
   80960:	b580      	push	{r7, lr}
   80962:	b084      	sub	sp, #16
   80964:	af00      	add	r7, sp, #0
   80966:	6078      	str	r0, [r7, #4]
   80968:	6039      	str	r1, [r7, #0]
	if(sign_ST==1){
   8096a:	4b2b      	ldr	r3, [pc, #172]	; (80a18 <ControlledDrive+0xb8>)
   8096c:	781b      	ldrb	r3, [r3, #0]
   8096e:	b2db      	uxtb	r3, r3
   80970:	2b01      	cmp	r3, #1
   80972:	d104      	bne.n	8097e <ControlledDrive+0x1e>
		iSpeed_ST=-70;
   80974:	4b29      	ldr	r3, [pc, #164]	; (80a1c <ControlledDrive+0xbc>)
   80976:	f06f 0245 	mvn.w	r2, #69	; 0x45
   8097a:	601a      	str	r2, [r3, #0]
   8097c:	e002      	b.n	80984 <ControlledDrive+0x24>
	}else{
		iSpeed_ST=BASE_SPEED;
   8097e:	4b27      	ldr	r3, [pc, #156]	; (80a1c <ControlledDrive+0xbc>)
   80980:	2246      	movs	r2, #70	; 0x46
   80982:	601a      	str	r2, [r3, #0]
	}
	
	if(sign_DR==1){
   80984:	4b26      	ldr	r3, [pc, #152]	; (80a20 <ControlledDrive+0xc0>)
   80986:	781b      	ldrb	r3, [r3, #0]
   80988:	b2db      	uxtb	r3, r3
   8098a:	2b01      	cmp	r3, #1
   8098c:	d104      	bne.n	80998 <ControlledDrive+0x38>
		iSpeed_DR=-70;
   8098e:	4b25      	ldr	r3, [pc, #148]	; (80a24 <ControlledDrive+0xc4>)
   80990:	f06f 0245 	mvn.w	r2, #69	; 0x45
   80994:	601a      	str	r2, [r3, #0]
   80996:	e002      	b.n	8099e <ControlledDrive+0x3e>
	}else{
		iSpeed_DR=BASE_SPEED;
   80998:	4b22      	ldr	r3, [pc, #136]	; (80a24 <ControlledDrive+0xc4>)
   8099a:	2246      	movs	r2, #70	; 0x46
   8099c:	601a      	str	r2, [r3, #0]
	}
	
	uint8_t st = 0;
   8099e:	2300      	movs	r3, #0
   809a0:	73fb      	strb	r3, [r7, #15]
	uint8_t dr = 0;
   809a2:	2300      	movs	r3, #0
   809a4:	73bb      	strb	r3, [r7, #14]
	
	iEncoder_ST_current = 0;
   809a6:	4b20      	ldr	r3, [pc, #128]	; (80a28 <ControlledDrive+0xc8>)
   809a8:	2200      	movs	r2, #0
   809aa:	601a      	str	r2, [r3, #0]
	iEncoder_DR_current = 0;
   809ac:	4b1f      	ldr	r3, [pc, #124]	; (80a2c <ControlledDrive+0xcc>)
   809ae:	2200      	movs	r2, #0
   809b0:	601a      	str	r2, [r3, #0]
	
	//iSpeed_ST=-70;
	//iSpeed_DR=-70;
	int timeout = 0;
   809b2:	2300      	movs	r3, #0
   809b4:	60bb      	str	r3, [r7, #8]
	while(!(st && dr) && (timeout < 100000)){
   809b6:	e01e      	b.n	809f6 <ControlledDrive+0x96>
		if(iEncoder_DR_current >= percent_DR){
   809b8:	4b1c      	ldr	r3, [pc, #112]	; (80a2c <ControlledDrive+0xcc>)
   809ba:	681a      	ldr	r2, [r3, #0]
   809bc:	683b      	ldr	r3, [r7, #0]
   809be:	429a      	cmp	r2, r3
   809c0:	d304      	bcc.n	809cc <ControlledDrive+0x6c>
			iSpeed_DR = 0;
   809c2:	4b18      	ldr	r3, [pc, #96]	; (80a24 <ControlledDrive+0xc4>)
   809c4:	2200      	movs	r2, #0
   809c6:	601a      	str	r2, [r3, #0]
			st=1;
   809c8:	2301      	movs	r3, #1
   809ca:	73fb      	strb	r3, [r7, #15]
		}
		if(iEncoder_ST_current >= percent_ST){
   809cc:	4b16      	ldr	r3, [pc, #88]	; (80a28 <ControlledDrive+0xc8>)
   809ce:	681a      	ldr	r2, [r3, #0]
   809d0:	687b      	ldr	r3, [r7, #4]
   809d2:	429a      	cmp	r2, r3
   809d4:	d304      	bcc.n	809e0 <ControlledDrive+0x80>
			iSpeed_ST = 0;
   809d6:	4b11      	ldr	r3, [pc, #68]	; (80a1c <ControlledDrive+0xbc>)
   809d8:	2200      	movs	r2, #0
   809da:	601a      	str	r2, [r3, #0]
			dr=1;
   809dc:	2301      	movs	r3, #1
   809de:	73bb      	strb	r3, [r7, #14]
		}
		WriteMotors(iSpeed_ST,iSpeed_DR);
   809e0:	4b0e      	ldr	r3, [pc, #56]	; (80a1c <ControlledDrive+0xbc>)
   809e2:	681a      	ldr	r2, [r3, #0]
   809e4:	4b0f      	ldr	r3, [pc, #60]	; (80a24 <ControlledDrive+0xc4>)
   809e6:	681b      	ldr	r3, [r3, #0]
   809e8:	4610      	mov	r0, r2
   809ea:	4619      	mov	r1, r3
   809ec:	4b10      	ldr	r3, [pc, #64]	; (80a30 <ControlledDrive+0xd0>)
   809ee:	4798      	blx	r3
		timeout++;
   809f0:	68bb      	ldr	r3, [r7, #8]
   809f2:	3301      	adds	r3, #1
   809f4:	60bb      	str	r3, [r7, #8]
	iEncoder_DR_current = 0;
	
	//iSpeed_ST=-70;
	//iSpeed_DR=-70;
	int timeout = 0;
	while(!(st && dr) && (timeout < 100000)){
   809f6:	7bfb      	ldrb	r3, [r7, #15]
   809f8:	2b00      	cmp	r3, #0
   809fa:	d002      	beq.n	80a02 <ControlledDrive+0xa2>
   809fc:	7bbb      	ldrb	r3, [r7, #14]
   809fe:	2b00      	cmp	r3, #0
   80a00:	d103      	bne.n	80a0a <ControlledDrive+0xaa>
   80a02:	68bb      	ldr	r3, [r7, #8]
   80a04:	4a0b      	ldr	r2, [pc, #44]	; (80a34 <ControlledDrive+0xd4>)
   80a06:	4293      	cmp	r3, r2
   80a08:	ddd6      	ble.n	809b8 <ControlledDrive+0x58>
			dr=1;
		}
		WriteMotors(iSpeed_ST,iSpeed_DR);
		timeout++;
	}
	WriteMotors(0,0);
   80a0a:	2000      	movs	r0, #0
   80a0c:	2100      	movs	r1, #0
   80a0e:	4b08      	ldr	r3, [pc, #32]	; (80a30 <ControlledDrive+0xd0>)
   80a10:	4798      	blx	r3
	
}
   80a12:	3710      	adds	r7, #16
   80a14:	46bd      	mov	sp, r7
   80a16:	bd80      	pop	{r7, pc}
   80a18:	20000495 	.word	0x20000495
   80a1c:	2000046c 	.word	0x2000046c
   80a20:	20000494 	.word	0x20000494
   80a24:	20000468 	.word	0x20000468
   80a28:	20000464 	.word	0x20000464
   80a2c:	20000460 	.word	0x20000460
   80a30:	00080831 	.word	0x00080831
   80a34:	0001869f 	.word	0x0001869f

00080a38 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80a38:	b480      	push	{r7}
   80a3a:	b083      	sub	sp, #12
   80a3c:	af00      	add	r7, sp, #0
   80a3e:	4603      	mov	r3, r0
   80a40:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80a42:	4908      	ldr	r1, [pc, #32]	; (80a64 <NVIC_EnableIRQ+0x2c>)
   80a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80a48:	095b      	lsrs	r3, r3, #5
   80a4a:	79fa      	ldrb	r2, [r7, #7]
   80a4c:	f002 021f 	and.w	r2, r2, #31
   80a50:	2001      	movs	r0, #1
   80a52:	fa00 f202 	lsl.w	r2, r0, r2
   80a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80a5a:	370c      	adds	r7, #12
   80a5c:	46bd      	mov	sp, r7
   80a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a62:	4770      	bx	lr
   80a64:	e000e100 	.word	0xe000e100

00080a68 <Configure_Timers>:
void Configure_TC0(void);
void delay_ms(uint32_t iPrescription);

// *************************************************************************************************************************************

void Configure_Timers(){
   80a68:	b580      	push	{r7, lr}
   80a6a:	af00      	add	r7, sp, #0
	Configure_TC0();
   80a6c:	4b01      	ldr	r3, [pc, #4]	; (80a74 <Configure_Timers+0xc>)
   80a6e:	4798      	blx	r3
}
   80a70:	bd80      	pop	{r7, pc}
   80a72:	bf00      	nop
   80a74:	00080a79 	.word	0x00080a79

00080a78 <Configure_TC0>:

void Configure_TC0()
{
   80a78:	b580      	push	{r7, lr}
   80a7a:	af00      	add	r7, sp, #0
	// Enable TC0 in PMC power management controller - ID 27
	PMC->PMC_PCER0 |= 1 << ID_TC0;
   80a7c:	4a0e      	ldr	r2, [pc, #56]	; (80ab8 <Configure_TC0+0x40>)
   80a7e:	4b0e      	ldr	r3, [pc, #56]	; (80ab8 <Configure_TC0+0x40>)
   80a80:	691b      	ldr	r3, [r3, #16]
   80a82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80a86:	6113      	str	r3, [r2, #16]
	
	// Disable the clock for TC0
	TC0->TC_CHANNEL->TC_CCR = TC_CCR_CLKDIS;
   80a88:	4b0c      	ldr	r3, [pc, #48]	; (80abc <Configure_TC0+0x44>)
   80a8a:	2202      	movs	r2, #2
   80a8c:	601a      	str	r2, [r3, #0]
	
	// Disable interrupts
	TC0->TC_CHANNEL->TC_IDR = 0xFFFFFFFF;
   80a8e:	4b0b      	ldr	r3, [pc, #44]	; (80abc <Configure_TC0+0x44>)
   80a90:	f04f 32ff 	mov.w	r2, #4294967295
   80a94:	629a      	str	r2, [r3, #40]	; 0x28
	
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80a96:	4b09      	ldr	r3, [pc, #36]	; (80abc <Configure_TC0+0x44>)
   80a98:	6a1b      	ldr	r3, [r3, #32]
	
	// Set Mode
	TC0->TC_CHANNEL->TC_CMR = TC_CMR_CPCTRG | TC_CMR_TCCLKS_TIMER_CLOCK5;
   80a9a:	4b08      	ldr	r3, [pc, #32]	; (80abc <Configure_TC0+0x44>)
   80a9c:	f244 0204 	movw	r2, #16388	; 0x4004
   80aa0:	605a      	str	r2, [r3, #4]
	
	// Set compare value register TC_CR
	TC0->TC_CHANNEL[0].TC_RC = 10000;
   80aa2:	4b06      	ldr	r3, [pc, #24]	; (80abc <Configure_TC0+0x44>)
   80aa4:	f242 7210 	movw	r2, #10000	; 0x2710
   80aa8:	61da      	str	r2, [r3, #28]
	
	// Configure and enable interrupt on RC compare
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
   80aaa:	201b      	movs	r0, #27
   80aac:	4b04      	ldr	r3, [pc, #16]	; (80ac0 <Configure_TC0+0x48>)
   80aae:	4798      	blx	r3
	TC0->TC_CHANNEL->TC_IER = TC_IER_CPCS;
   80ab0:	4b02      	ldr	r3, [pc, #8]	; (80abc <Configure_TC0+0x44>)
   80ab2:	2210      	movs	r2, #16
   80ab4:	625a      	str	r2, [r3, #36]	; 0x24
	
	// Enable interrupts
	//TC0->TC_CHANNEL->TC_IER = 0xFFFFFFFF;
}
   80ab6:	bd80      	pop	{r7, pc}
   80ab8:	400e0600 	.word	0x400e0600
   80abc:	40080000 	.word	0x40080000
   80ac0:	00080a39 	.word	0x00080a39

00080ac4 <TC0_Handler>:

void TC0_Handler(void)
{
   80ac4:	b480      	push	{r7}
   80ac6:	af00      	add	r7, sp, #0
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80ac8:	4b05      	ldr	r3, [pc, #20]	; (80ae0 <TC0_Handler+0x1c>)
   80aca:	6a1b      	ldr	r3, [r3, #32]
	
	// Disable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;
   80acc:	4b04      	ldr	r3, [pc, #16]	; (80ae0 <TC0_Handler+0x1c>)
   80ace:	2202      	movs	r2, #2
   80ad0:	601a      	str	r2, [r3, #0]
	
	iDelay = 1;
   80ad2:	4b04      	ldr	r3, [pc, #16]	; (80ae4 <TC0_Handler+0x20>)
   80ad4:	2201      	movs	r2, #1
   80ad6:	701a      	strb	r2, [r3, #0]
}
   80ad8:	46bd      	mov	sp, r7
   80ada:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ade:	4770      	bx	lr
   80ae0:	40080000 	.word	0x40080000
   80ae4:	20000455 	.word	0x20000455

00080ae8 <delay_ms>:

void delay_ms(uint32_t iPrescription)
{
   80ae8:	b480      	push	{r7}
   80aea:	b083      	sub	sp, #12
   80aec:	af00      	add	r7, sp, #0
   80aee:	6078      	str	r0, [r7, #4]
	// Set compare value for TC0
	TC0->TC_CHANNEL[0].TC_RC = iPrescription*29;
   80af0:	490b      	ldr	r1, [pc, #44]	; (80b20 <delay_ms+0x38>)
   80af2:	687a      	ldr	r2, [r7, #4]
   80af4:	4613      	mov	r3, r2
   80af6:	00db      	lsls	r3, r3, #3
   80af8:	1a9b      	subs	r3, r3, r2
   80afa:	009b      	lsls	r3, r3, #2
   80afc:	4413      	add	r3, r2
   80afe:	61cb      	str	r3, [r1, #28]
	
	// Reset and enable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN|TC_CCR_SWTRG;
   80b00:	4b07      	ldr	r3, [pc, #28]	; (80b20 <delay_ms+0x38>)
   80b02:	2205      	movs	r2, #5
   80b04:	601a      	str	r2, [r3, #0]
	
	while(!iDelay);
   80b06:	bf00      	nop
   80b08:	4b06      	ldr	r3, [pc, #24]	; (80b24 <delay_ms+0x3c>)
   80b0a:	781b      	ldrb	r3, [r3, #0]
   80b0c:	2b00      	cmp	r3, #0
   80b0e:	d0fb      	beq.n	80b08 <delay_ms+0x20>
	
	iDelay = 0;
   80b10:	4b04      	ldr	r3, [pc, #16]	; (80b24 <delay_ms+0x3c>)
   80b12:	2200      	movs	r2, #0
   80b14:	701a      	strb	r2, [r3, #0]
   80b16:	370c      	adds	r7, #12
   80b18:	46bd      	mov	sp, r7
   80b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b1e:	4770      	bx	lr
   80b20:	40080000 	.word	0x40080000
   80b24:	20000455 	.word	0x20000455

00080b28 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80b28:	b480      	push	{r7}
   80b2a:	b083      	sub	sp, #12
   80b2c:	af00      	add	r7, sp, #0
   80b2e:	4603      	mov	r3, r0
   80b30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80b32:	4908      	ldr	r1, [pc, #32]	; (80b54 <NVIC_EnableIRQ+0x2c>)
   80b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80b38:	095b      	lsrs	r3, r3, #5
   80b3a:	79fa      	ldrb	r2, [r7, #7]
   80b3c:	f002 021f 	and.w	r2, r2, #31
   80b40:	2001      	movs	r0, #1
   80b42:	fa00 f202 	lsl.w	r2, r0, r2
   80b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80b4a:	370c      	adds	r7, #12
   80b4c:	46bd      	mov	sp, r7
   80b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b52:	4770      	bx	lr
   80b54:	e000e100 	.word	0xe000e100

00080b58 <uart_putchar>:
	}
	return 1;
}

inline int uart_putchar(const uint8_t c)
{
   80b58:	b480      	push	{r7}
   80b5a:	b085      	sub	sp, #20
   80b5c:	af00      	add	r7, sp, #0
   80b5e:	4603      	mov	r3, r0
   80b60:	71fb      	strb	r3, [r7, #7]
	// Check if the transmitter is ready
	for(int j = 0; j < 100000; j++)
   80b62:	2300      	movs	r3, #0
   80b64:	60fb      	str	r3, [r7, #12]
   80b66:	e00d      	b.n	80b84 <uart_putchar+0x2c>
	{
		if(UART->UART_SR & UART_SR_TXRDY)
   80b68:	4b0c      	ldr	r3, [pc, #48]	; (80b9c <uart_putchar+0x44>)
   80b6a:	695b      	ldr	r3, [r3, #20]
   80b6c:	f003 0302 	and.w	r3, r3, #2
   80b70:	2b00      	cmp	r3, #0
   80b72:	d004      	beq.n	80b7e <uart_putchar+0x26>
		{
			UART->UART_THR = c;
   80b74:	4a09      	ldr	r2, [pc, #36]	; (80b9c <uart_putchar+0x44>)
   80b76:	79fb      	ldrb	r3, [r7, #7]
   80b78:	61d3      	str	r3, [r2, #28]
			return 0;
   80b7a:	2300      	movs	r3, #0
   80b7c:	e007      	b.n	80b8e <uart_putchar+0x36>
}

inline int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	for(int j = 0; j < 100000; j++)
   80b7e:	68fb      	ldr	r3, [r7, #12]
   80b80:	3301      	adds	r3, #1
   80b82:	60fb      	str	r3, [r7, #12]
   80b84:	68fb      	ldr	r3, [r7, #12]
   80b86:	4a06      	ldr	r2, [pc, #24]	; (80ba0 <uart_putchar+0x48>)
   80b88:	4293      	cmp	r3, r2
   80b8a:	dded      	ble.n	80b68 <uart_putchar+0x10>
			UART->UART_THR = c;
			return 0;
		}
	}

	return 1;
   80b8c:	2301      	movs	r3, #1
}
   80b8e:	4618      	mov	r0, r3
   80b90:	3714      	adds	r7, #20
   80b92:	46bd      	mov	sp, r7
   80b94:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b98:	4770      	bx	lr
   80b9a:	bf00      	nop
   80b9c:	400e0800 	.word	0x400e0800
   80ba0:	0001869f 	.word	0x0001869f

00080ba4 <UART_Handler>:

void UART_Handler(void)
{
   80ba4:	b580      	push	{r7, lr}
   80ba6:	b082      	sub	sp, #8
   80ba8:	af00      	add	r7, sp, #0
   if(UART->UART_IMR & UART_IMR_RXRDY)
   80baa:	4b25      	ldr	r3, [pc, #148]	; (80c40 <UART_Handler+0x9c>)
   80bac:	691b      	ldr	r3, [r3, #16]
   80bae:	f003 0301 	and.w	r3, r3, #1
   80bb2:	2b00      	cmp	r3, #0
   80bb4:	d040      	beq.n	80c38 <UART_Handler+0x94>
   {
		static int i = 0;
		uint8_t c = UART->UART_RHR;
   80bb6:	4b22      	ldr	r3, [pc, #136]	; (80c40 <UART_Handler+0x9c>)
   80bb8:	699b      	ldr	r3, [r3, #24]
   80bba:	71fb      	strb	r3, [r7, #7]
		UART->UART_THR = c; // echo back
   80bbc:	4a20      	ldr	r2, [pc, #128]	; (80c40 <UART_Handler+0x9c>)
   80bbe:	79fb      	ldrb	r3, [r7, #7]
   80bc0:	61d3      	str	r3, [r2, #28]

		if(i > sizeof(buffer)-1)
   80bc2:	4b20      	ldr	r3, [pc, #128]	; (80c44 <UART_Handler+0xa0>)
   80bc4:	681b      	ldr	r3, [r3, #0]
   80bc6:	2b13      	cmp	r3, #19
   80bc8:	d90c      	bls.n	80be4 <UART_Handler+0x40>
		{
			sendString("####Too much data received\n", 27);
   80bca:	481f      	ldr	r0, [pc, #124]	; (80c48 <UART_Handler+0xa4>)
   80bcc:	211b      	movs	r1, #27
   80bce:	4b1f      	ldr	r3, [pc, #124]	; (80c4c <UART_Handler+0xa8>)
   80bd0:	4798      	blx	r3
			memset(buffer, 0, sizeof(buffer));
   80bd2:	481f      	ldr	r0, [pc, #124]	; (80c50 <UART_Handler+0xac>)
   80bd4:	2100      	movs	r1, #0
   80bd6:	2214      	movs	r2, #20
   80bd8:	4b1e      	ldr	r3, [pc, #120]	; (80c54 <UART_Handler+0xb0>)
   80bda:	4798      	blx	r3
			i = 0;
   80bdc:	4b19      	ldr	r3, [pc, #100]	; (80c44 <UART_Handler+0xa0>)
   80bde:	2200      	movs	r2, #0
   80be0:	601a      	str	r2, [r3, #0]
			return;
   80be2:	e029      	b.n	80c38 <UART_Handler+0x94>
		}
	
		buffer[i] = c;
   80be4:	4b17      	ldr	r3, [pc, #92]	; (80c44 <UART_Handler+0xa0>)
   80be6:	681b      	ldr	r3, [r3, #0]
   80be8:	4919      	ldr	r1, [pc, #100]	; (80c50 <UART_Handler+0xac>)
   80bea:	79fa      	ldrb	r2, [r7, #7]
   80bec:	54ca      	strb	r2, [r1, r3]
		if(buffer[i] == '\n')
   80bee:	4b15      	ldr	r3, [pc, #84]	; (80c44 <UART_Handler+0xa0>)
   80bf0:	681b      	ldr	r3, [r3, #0]
   80bf2:	4a17      	ldr	r2, [pc, #92]	; (80c50 <UART_Handler+0xac>)
   80bf4:	5cd3      	ldrb	r3, [r2, r3]
   80bf6:	2b0a      	cmp	r3, #10
   80bf8:	d119      	bne.n	80c2e <UART_Handler+0x8a>
		{
			sendString("#### Parsing Strings: ", 22);
   80bfa:	4817      	ldr	r0, [pc, #92]	; (80c58 <UART_Handler+0xb4>)
   80bfc:	2116      	movs	r1, #22
   80bfe:	4b13      	ldr	r3, [pc, #76]	; (80c4c <UART_Handler+0xa8>)
   80c00:	4798      	blx	r3
			sendString(buffer, i); // make an echo of the whole buffer untill now
   80c02:	4b10      	ldr	r3, [pc, #64]	; (80c44 <UART_Handler+0xa0>)
   80c04:	681b      	ldr	r3, [r3, #0]
   80c06:	b29b      	uxth	r3, r3
   80c08:	4811      	ldr	r0, [pc, #68]	; (80c50 <UART_Handler+0xac>)
   80c0a:	4619      	mov	r1, r3
   80c0c:	4b0f      	ldr	r3, [pc, #60]	; (80c4c <UART_Handler+0xa8>)
   80c0e:	4798      	blx	r3
			uart_putchar('\n');
   80c10:	200a      	movs	r0, #10
   80c12:	4b12      	ldr	r3, [pc, #72]	; (80c5c <UART_Handler+0xb8>)
   80c14:	4798      	blx	r3
			parseSpeed(buffer);
   80c16:	480e      	ldr	r0, [pc, #56]	; (80c50 <UART_Handler+0xac>)
   80c18:	4b11      	ldr	r3, [pc, #68]	; (80c60 <UART_Handler+0xbc>)
   80c1a:	4798      	blx	r3
			memset(buffer, 0, sizeof(buffer));
   80c1c:	480c      	ldr	r0, [pc, #48]	; (80c50 <UART_Handler+0xac>)
   80c1e:	2100      	movs	r1, #0
   80c20:	2214      	movs	r2, #20
   80c22:	4b0c      	ldr	r3, [pc, #48]	; (80c54 <UART_Handler+0xb0>)
   80c24:	4798      	blx	r3
			i = 0;
   80c26:	4b07      	ldr	r3, [pc, #28]	; (80c44 <UART_Handler+0xa0>)
   80c28:	2200      	movs	r2, #0
   80c2a:	601a      	str	r2, [r3, #0]
			return;
   80c2c:	e004      	b.n	80c38 <UART_Handler+0x94>
		}

		i++;
   80c2e:	4b05      	ldr	r3, [pc, #20]	; (80c44 <UART_Handler+0xa0>)
   80c30:	681b      	ldr	r3, [r3, #0]
   80c32:	3301      	adds	r3, #1
   80c34:	4a03      	ldr	r2, [pc, #12]	; (80c44 <UART_Handler+0xa0>)
   80c36:	6013      	str	r3, [r2, #0]
	}
}
   80c38:	3708      	adds	r7, #8
   80c3a:	46bd      	mov	sp, r7
   80c3c:	bd80      	pop	{r7, pc}
   80c3e:	bf00      	nop
   80c40:	400e0800 	.word	0x400e0800
   80c44:	20000458 	.word	0x20000458
   80c48:	00081a70 	.word	0x00081a70
   80c4c:	00080c65 	.word	0x00080c65
   80c50:	2000047c 	.word	0x2000047c
   80c54:	000816b5 	.word	0x000816b5
   80c58:	00081a8c 	.word	0x00081a8c
   80c5c:	00080b59 	.word	0x00080b59
   80c60:	00080cc9 	.word	0x00080cc9

00080c64 <sendString>:

void sendString(const char* c, uint16_t length){
   80c64:	b580      	push	{r7, lr}
   80c66:	b084      	sub	sp, #16
   80c68:	af00      	add	r7, sp, #0
   80c6a:	6078      	str	r0, [r7, #4]
   80c6c:	460b      	mov	r3, r1
   80c6e:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<length;i++){
   80c70:	2300      	movs	r3, #0
   80c72:	60fb      	str	r3, [r7, #12]
   80c74:	e00d      	b.n	80c92 <sendString+0x2e>
		while(uart_putchar(*(c+i)));
   80c76:	bf00      	nop
   80c78:	68fb      	ldr	r3, [r7, #12]
   80c7a:	687a      	ldr	r2, [r7, #4]
   80c7c:	4413      	add	r3, r2
   80c7e:	781b      	ldrb	r3, [r3, #0]
   80c80:	4618      	mov	r0, r3
   80c82:	4b07      	ldr	r3, [pc, #28]	; (80ca0 <sendString+0x3c>)
   80c84:	4798      	blx	r3
   80c86:	4603      	mov	r3, r0
   80c88:	2b00      	cmp	r3, #0
   80c8a:	d1f5      	bne.n	80c78 <sendString+0x14>
		i++;
	}
}

void sendString(const char* c, uint16_t length){
	for(int i = 0;i<length;i++){
   80c8c:	68fb      	ldr	r3, [r7, #12]
   80c8e:	3301      	adds	r3, #1
   80c90:	60fb      	str	r3, [r7, #12]
   80c92:	887a      	ldrh	r2, [r7, #2]
   80c94:	68fb      	ldr	r3, [r7, #12]
   80c96:	429a      	cmp	r2, r3
   80c98:	dced      	bgt.n	80c76 <sendString+0x12>
		while(uart_putchar(*(c+i)));
	}
}
   80c9a:	3710      	adds	r7, #16
   80c9c:	46bd      	mov	sp, r7
   80c9e:	bd80      	pop	{r7, pc}
   80ca0:	00080b59 	.word	0x00080b59

00080ca4 <getNewSpeed>:
		i--;
	}
}

uint8_t getNewSpeed()
{
   80ca4:	b480      	push	{r7}
   80ca6:	af00      	add	r7, sp, #0
	if(flag12)
   80ca8:	4b06      	ldr	r3, [pc, #24]	; (80cc4 <getNewSpeed+0x20>)
   80caa:	781b      	ldrb	r3, [r3, #0]
   80cac:	b2db      	uxtb	r3, r3
   80cae:	2b00      	cmp	r3, #0
   80cb0:	d001      	beq.n	80cb6 <getNewSpeed+0x12>
	{
		//sendString("Set:\n", 5);
		return 1;
   80cb2:	2301      	movs	r3, #1
   80cb4:	e000      	b.n	80cb8 <getNewSpeed+0x14>
	}
	else
	{
		//sendString("UnSet:\n", 7);
		return 0;
   80cb6:	2300      	movs	r3, #0
	}
}
   80cb8:	4618      	mov	r0, r3
   80cba:	46bd      	mov	sp, r7
   80cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cc0:	4770      	bx	lr
   80cc2:	bf00      	nop
   80cc4:	20000454 	.word	0x20000454

00080cc8 <parseSpeed>:

void parseSpeed(char* buffer)
{
   80cc8:	b580      	push	{r7, lr}
   80cca:	b086      	sub	sp, #24
   80ccc:	af00      	add	r7, sp, #0
   80cce:	6078      	str	r0, [r7, #4]
	sign_ST = 0;
   80cd0:	4b30      	ldr	r3, [pc, #192]	; (80d94 <parseSpeed+0xcc>)
   80cd2:	2200      	movs	r2, #0
   80cd4:	701a      	strb	r2, [r3, #0]
	sign_DR = 0;
   80cd6:	4b30      	ldr	r3, [pc, #192]	; (80d98 <parseSpeed+0xd0>)
   80cd8:	2200      	movs	r2, #0
   80cda:	701a      	strb	r2, [r3, #0]
	
	char* token1;
	token1 = strtok(buffer, "#");
   80cdc:	6878      	ldr	r0, [r7, #4]
   80cde:	492f      	ldr	r1, [pc, #188]	; (80d9c <parseSpeed+0xd4>)
   80ce0:	4b2f      	ldr	r3, [pc, #188]	; (80da0 <parseSpeed+0xd8>)
   80ce2:	4798      	blx	r3
   80ce4:	6178      	str	r0, [r7, #20]
	
	if(token1 != NULL)
   80ce6:	697b      	ldr	r3, [r7, #20]
   80ce8:	2b00      	cmp	r3, #0
   80cea:	d04f      	beq.n	80d8c <parseSpeed+0xc4>
	{
		char* token2;
		token2 = strtok(NULL, "#");
   80cec:	2000      	movs	r0, #0
   80cee:	492b      	ldr	r1, [pc, #172]	; (80d9c <parseSpeed+0xd4>)
   80cf0:	4b2b      	ldr	r3, [pc, #172]	; (80da0 <parseSpeed+0xd8>)
   80cf2:	4798      	blx	r3
   80cf4:	6138      	str	r0, [r7, #16]
		
		if(token2 != NULL)
   80cf6:	693b      	ldr	r3, [r7, #16]
   80cf8:	2b00      	cmp	r3, #0
   80cfa:	d047      	beq.n	80d8c <parseSpeed+0xc4>
		{
			char *end;
			percentage_ST = strtol((token1+1), &end, 10);
   80cfc:	697b      	ldr	r3, [r7, #20]
   80cfe:	1c5a      	adds	r2, r3, #1
   80d00:	f107 030c 	add.w	r3, r7, #12
   80d04:	4610      	mov	r0, r2
   80d06:	4619      	mov	r1, r3
   80d08:	220a      	movs	r2, #10
   80d0a:	4b26      	ldr	r3, [pc, #152]	; (80da4 <parseSpeed+0xdc>)
   80d0c:	4798      	blx	r3
   80d0e:	4603      	mov	r3, r0
   80d10:	461a      	mov	r2, r3
   80d12:	4b25      	ldr	r3, [pc, #148]	; (80da8 <parseSpeed+0xe0>)
   80d14:	601a      	str	r2, [r3, #0]
			percentage_DR = strtol((token2+1), &end, 10);
   80d16:	693b      	ldr	r3, [r7, #16]
   80d18:	1c5a      	adds	r2, r3, #1
   80d1a:	f107 030c 	add.w	r3, r7, #12
   80d1e:	4610      	mov	r0, r2
   80d20:	4619      	mov	r1, r3
   80d22:	220a      	movs	r2, #10
   80d24:	4b1f      	ldr	r3, [pc, #124]	; (80da4 <parseSpeed+0xdc>)
   80d26:	4798      	blx	r3
   80d28:	4603      	mov	r3, r0
   80d2a:	461a      	mov	r2, r3
   80d2c:	4b1f      	ldr	r3, [pc, #124]	; (80dac <parseSpeed+0xe4>)
   80d2e:	601a      	str	r2, [r3, #0]
			
			sendString("Speed ST: ", 10);
   80d30:	481f      	ldr	r0, [pc, #124]	; (80db0 <parseSpeed+0xe8>)
   80d32:	210a      	movs	r1, #10
   80d34:	4b1f      	ldr	r3, [pc, #124]	; (80db4 <parseSpeed+0xec>)
   80d36:	4798      	blx	r3
			sendString(token1, strlen(token1));
   80d38:	6978      	ldr	r0, [r7, #20]
   80d3a:	4b1f      	ldr	r3, [pc, #124]	; (80db8 <parseSpeed+0xf0>)
   80d3c:	4798      	blx	r3
   80d3e:	4603      	mov	r3, r0
   80d40:	b29b      	uxth	r3, r3
   80d42:	6978      	ldr	r0, [r7, #20]
   80d44:	4619      	mov	r1, r3
   80d46:	4b1b      	ldr	r3, [pc, #108]	; (80db4 <parseSpeed+0xec>)
   80d48:	4798      	blx	r3

			if (token1[0] == 0x2d) {
   80d4a:	697b      	ldr	r3, [r7, #20]
   80d4c:	781b      	ldrb	r3, [r3, #0]
   80d4e:	2b2d      	cmp	r3, #45	; 0x2d
   80d50:	d102      	bne.n	80d58 <parseSpeed+0x90>
				// minus
				sign_ST = 1;
   80d52:	4b10      	ldr	r3, [pc, #64]	; (80d94 <parseSpeed+0xcc>)
   80d54:	2201      	movs	r2, #1
   80d56:	701a      	strb	r2, [r3, #0]
			}
			
			sendString(" Speed DR: ", 11);
   80d58:	4818      	ldr	r0, [pc, #96]	; (80dbc <parseSpeed+0xf4>)
   80d5a:	210b      	movs	r1, #11
   80d5c:	4b15      	ldr	r3, [pc, #84]	; (80db4 <parseSpeed+0xec>)
   80d5e:	4798      	blx	r3
			sendString(token2, strlen(token2));
   80d60:	6938      	ldr	r0, [r7, #16]
   80d62:	4b15      	ldr	r3, [pc, #84]	; (80db8 <parseSpeed+0xf0>)
   80d64:	4798      	blx	r3
   80d66:	4603      	mov	r3, r0
   80d68:	b29b      	uxth	r3, r3
   80d6a:	6938      	ldr	r0, [r7, #16]
   80d6c:	4619      	mov	r1, r3
   80d6e:	4b11      	ldr	r3, [pc, #68]	; (80db4 <parseSpeed+0xec>)
   80d70:	4798      	blx	r3
			
			if (token2[0] == 0x2d) {
   80d72:	693b      	ldr	r3, [r7, #16]
   80d74:	781b      	ldrb	r3, [r3, #0]
   80d76:	2b2d      	cmp	r3, #45	; 0x2d
   80d78:	d102      	bne.n	80d80 <parseSpeed+0xb8>
				 // minus
				 sign_DR = 1;
   80d7a:	4b07      	ldr	r3, [pc, #28]	; (80d98 <parseSpeed+0xd0>)
   80d7c:	2201      	movs	r2, #1
   80d7e:	701a      	strb	r2, [r3, #0]
			}
			
			newSpeed = 1;
   80d80:	4b0f      	ldr	r3, [pc, #60]	; (80dc0 <parseSpeed+0xf8>)
   80d82:	2201      	movs	r2, #1
   80d84:	701a      	strb	r2, [r3, #0]
			flag12=1;
   80d86:	4b0f      	ldr	r3, [pc, #60]	; (80dc4 <parseSpeed+0xfc>)
   80d88:	2201      	movs	r2, #1
   80d8a:	701a      	strb	r2, [r3, #0]
		}
	}
}
   80d8c:	3718      	adds	r7, #24
   80d8e:	46bd      	mov	sp, r7
   80d90:	bd80      	pop	{r7, pc}
   80d92:	bf00      	nop
   80d94:	20000495 	.word	0x20000495
   80d98:	20000494 	.word	0x20000494
   80d9c:	00081aa4 	.word	0x00081aa4
   80da0:	000817ad 	.word	0x000817ad
   80da4:	0008193d 	.word	0x0008193d
   80da8:	20000498 	.word	0x20000498
   80dac:	20000490 	.word	0x20000490
   80db0:	00081aa8 	.word	0x00081aa8
   80db4:	00080c65 	.word	0x00080c65
   80db8:	00081751 	.word	0x00081751
   80dbc:	00081ab4 	.word	0x00081ab4
   80dc0:	20000478 	.word	0x20000478
   80dc4:	20000454 	.word	0x20000454

00080dc8 <configure_uart>:

void configure_uart(void)
{
   80dc8:	b580      	push	{r7, lr}
   80dca:	b082      	sub	sp, #8
   80dcc:	af00      	add	r7, sp, #0
	uint32_t ul_sr;
	
	// ==> Pin configuration
	// Disable interrupts on Rx and Tx
	PIOA->PIO_IDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80dce:	4a28      	ldr	r2, [pc, #160]	; (80e70 <configure_uart+0xa8>)
   80dd0:	4b27      	ldr	r3, [pc, #156]	; (80e70 <configure_uart+0xa8>)
   80dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   80dd4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   80dd8:	6453      	str	r3, [r2, #68]	; 0x44
	
	// Disable the PIO of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80dda:	4a25      	ldr	r2, [pc, #148]	; (80e70 <configure_uart+0xa8>)
   80ddc:	4b24      	ldr	r3, [pc, #144]	; (80e70 <configure_uart+0xa8>)
   80dde:	685b      	ldr	r3, [r3, #4]
   80de0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   80de4:	6053      	str	r3, [r2, #4]
	
	// Read current peripheral AB select register and set the Rx and Tx pins to 0 (Peripheral A function)
	ul_sr = PIOA->PIO_ABSR;
   80de6:	4b22      	ldr	r3, [pc, #136]	; (80e70 <configure_uart+0xa8>)
   80de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80dea:	607b      	str	r3, [r7, #4]
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80dec:	4920      	ldr	r1, [pc, #128]	; (80e70 <configure_uart+0xa8>)
   80dee:	4b20      	ldr	r3, [pc, #128]	; (80e70 <configure_uart+0xa8>)
   80df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80df2:	687b      	ldr	r3, [r7, #4]
   80df4:	4013      	ands	r3, r2
   80df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   80dfa:	670b      	str	r3, [r1, #112]	; 0x70
	
	// Enable the pull up on the Rx and Tx pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80dfc:	4b1c      	ldr	r3, [pc, #112]	; (80e70 <configure_uart+0xa8>)
   80dfe:	f44f 7240 	mov.w	r2, #768	; 0x300
   80e02:	665a      	str	r2, [r3, #100]	; 0x64
	
	// ==> Actual uart configuration
	// Enable the peripheral uart controller
	PMC->PMC_PCER0 |= 1 << ID_UART;
   80e04:	4a1b      	ldr	r2, [pc, #108]	; (80e74 <configure_uart+0xac>)
   80e06:	4b1b      	ldr	r3, [pc, #108]	; (80e74 <configure_uart+0xac>)
   80e08:	691b      	ldr	r3, [r3, #16]
   80e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80e0e:	6113      	str	r3, [r2, #16]
	
	// Reset and disable receiver & transmitter
	UART->UART_CR |= UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80e10:	4a19      	ldr	r2, [pc, #100]	; (80e78 <configure_uart+0xb0>)
   80e12:	4b19      	ldr	r3, [pc, #100]	; (80e78 <configure_uart+0xb0>)
   80e14:	681b      	ldr	r3, [r3, #0]
   80e16:	f043 03ac 	orr.w	r3, r3, #172	; 0xac
   80e1a:	6013      	str	r3, [r2, #0]
	
	// Set the baudrate to 115200
	UART->UART_BRGR |= 45; // 84000000 / 16 * x = BaudRate (write x into UART_BRGR)
   80e1c:	4a16      	ldr	r2, [pc, #88]	; (80e78 <configure_uart+0xb0>)
   80e1e:	4b16      	ldr	r3, [pc, #88]	; (80e78 <configure_uart+0xb0>)
   80e20:	6a1b      	ldr	r3, [r3, #32]
   80e22:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
   80e26:	6213      	str	r3, [r2, #32]
	
	// No Parity
	UART->UART_MR |= UART_MR_PAR_NO;
   80e28:	4a13      	ldr	r2, [pc, #76]	; (80e78 <configure_uart+0xb0>)
   80e2a:	4b13      	ldr	r3, [pc, #76]	; (80e78 <configure_uart+0xb0>)
   80e2c:	685b      	ldr	r3, [r3, #4]
   80e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   80e32:	6053      	str	r3, [r2, #4]
	
	// Disable PDC channel requests
	UART->UART_PTCR |= UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80e34:	4a10      	ldr	r2, [pc, #64]	; (80e78 <configure_uart+0xb0>)
   80e36:	4b10      	ldr	r3, [pc, #64]	; (80e78 <configure_uart+0xb0>)
   80e38:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   80e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80e40:	f043 0302 	orr.w	r3, r3, #2
   80e44:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	
	// Disable / Enable interrupts on end of receive
	UART->UART_IDR = 0xFFFFFFFF;
   80e48:	4b0b      	ldr	r3, [pc, #44]	; (80e78 <configure_uart+0xb0>)
   80e4a:	f04f 32ff 	mov.w	r2, #4294967295
   80e4e:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ((IRQn_Type) ID_UART);
   80e50:	2008      	movs	r0, #8
   80e52:	4b0a      	ldr	r3, [pc, #40]	; (80e7c <configure_uart+0xb4>)
   80e54:	4798      	blx	r3
	UART->UART_IER = UART_IER_RXRDY;
   80e56:	4b08      	ldr	r3, [pc, #32]	; (80e78 <configure_uart+0xb0>)
   80e58:	2201      	movs	r2, #1
   80e5a:	609a      	str	r2, [r3, #8]
	
	// Enable receiver and trasmitter
	UART->UART_CR |= UART_CR_RXEN | UART_CR_TXEN;
   80e5c:	4a06      	ldr	r2, [pc, #24]	; (80e78 <configure_uart+0xb0>)
   80e5e:	4b06      	ldr	r3, [pc, #24]	; (80e78 <configure_uart+0xb0>)
   80e60:	681b      	ldr	r3, [r3, #0]
   80e62:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   80e66:	6013      	str	r3, [r2, #0]
	
}
   80e68:	3708      	adds	r7, #8
   80e6a:	46bd      	mov	sp, r7
   80e6c:	bd80      	pop	{r7, pc}
   80e6e:	bf00      	nop
   80e70:	400e0e00 	.word	0x400e0e00
   80e74:	400e0600 	.word	0x400e0600
   80e78:	400e0800 	.word	0x400e0800
   80e7c:	00080b29 	.word	0x00080b29

00080e80 <__aeabi_drsub>:
   80e80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80e84:	e002      	b.n	80e8c <__adddf3>
   80e86:	bf00      	nop

00080e88 <__aeabi_dsub>:
   80e88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080e8c <__adddf3>:
   80e8c:	b530      	push	{r4, r5, lr}
   80e8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80e92:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80e96:	ea94 0f05 	teq	r4, r5
   80e9a:	bf08      	it	eq
   80e9c:	ea90 0f02 	teqeq	r0, r2
   80ea0:	bf1f      	itttt	ne
   80ea2:	ea54 0c00 	orrsne.w	ip, r4, r0
   80ea6:	ea55 0c02 	orrsne.w	ip, r5, r2
   80eaa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80eae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80eb2:	f000 80e2 	beq.w	8107a <__adddf3+0x1ee>
   80eb6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80eba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80ebe:	bfb8      	it	lt
   80ec0:	426d      	neglt	r5, r5
   80ec2:	dd0c      	ble.n	80ede <__adddf3+0x52>
   80ec4:	442c      	add	r4, r5
   80ec6:	ea80 0202 	eor.w	r2, r0, r2
   80eca:	ea81 0303 	eor.w	r3, r1, r3
   80ece:	ea82 0000 	eor.w	r0, r2, r0
   80ed2:	ea83 0101 	eor.w	r1, r3, r1
   80ed6:	ea80 0202 	eor.w	r2, r0, r2
   80eda:	ea81 0303 	eor.w	r3, r1, r3
   80ede:	2d36      	cmp	r5, #54	; 0x36
   80ee0:	bf88      	it	hi
   80ee2:	bd30      	pophi	{r4, r5, pc}
   80ee4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80ee8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80eec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80ef0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80ef4:	d002      	beq.n	80efc <__adddf3+0x70>
   80ef6:	4240      	negs	r0, r0
   80ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80efc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80f00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80f04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80f08:	d002      	beq.n	80f10 <__adddf3+0x84>
   80f0a:	4252      	negs	r2, r2
   80f0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80f10:	ea94 0f05 	teq	r4, r5
   80f14:	f000 80a7 	beq.w	81066 <__adddf3+0x1da>
   80f18:	f1a4 0401 	sub.w	r4, r4, #1
   80f1c:	f1d5 0e20 	rsbs	lr, r5, #32
   80f20:	db0d      	blt.n	80f3e <__adddf3+0xb2>
   80f22:	fa02 fc0e 	lsl.w	ip, r2, lr
   80f26:	fa22 f205 	lsr.w	r2, r2, r5
   80f2a:	1880      	adds	r0, r0, r2
   80f2c:	f141 0100 	adc.w	r1, r1, #0
   80f30:	fa03 f20e 	lsl.w	r2, r3, lr
   80f34:	1880      	adds	r0, r0, r2
   80f36:	fa43 f305 	asr.w	r3, r3, r5
   80f3a:	4159      	adcs	r1, r3
   80f3c:	e00e      	b.n	80f5c <__adddf3+0xd0>
   80f3e:	f1a5 0520 	sub.w	r5, r5, #32
   80f42:	f10e 0e20 	add.w	lr, lr, #32
   80f46:	2a01      	cmp	r2, #1
   80f48:	fa03 fc0e 	lsl.w	ip, r3, lr
   80f4c:	bf28      	it	cs
   80f4e:	f04c 0c02 	orrcs.w	ip, ip, #2
   80f52:	fa43 f305 	asr.w	r3, r3, r5
   80f56:	18c0      	adds	r0, r0, r3
   80f58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f60:	d507      	bpl.n	80f72 <__adddf3+0xe6>
   80f62:	f04f 0e00 	mov.w	lr, #0
   80f66:	f1dc 0c00 	rsbs	ip, ip, #0
   80f6a:	eb7e 0000 	sbcs.w	r0, lr, r0
   80f6e:	eb6e 0101 	sbc.w	r1, lr, r1
   80f72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80f76:	d31b      	bcc.n	80fb0 <__adddf3+0x124>
   80f78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80f7c:	d30c      	bcc.n	80f98 <__adddf3+0x10c>
   80f7e:	0849      	lsrs	r1, r1, #1
   80f80:	ea5f 0030 	movs.w	r0, r0, rrx
   80f84:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f88:	f104 0401 	add.w	r4, r4, #1
   80f8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80f90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80f94:	f080 809a 	bcs.w	810cc <__adddf3+0x240>
   80f98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f9c:	bf08      	it	eq
   80f9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80fa2:	f150 0000 	adcs.w	r0, r0, #0
   80fa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80faa:	ea41 0105 	orr.w	r1, r1, r5
   80fae:	bd30      	pop	{r4, r5, pc}
   80fb0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80fb4:	4140      	adcs	r0, r0
   80fb6:	eb41 0101 	adc.w	r1, r1, r1
   80fba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80fbe:	f1a4 0401 	sub.w	r4, r4, #1
   80fc2:	d1e9      	bne.n	80f98 <__adddf3+0x10c>
   80fc4:	f091 0f00 	teq	r1, #0
   80fc8:	bf04      	itt	eq
   80fca:	4601      	moveq	r1, r0
   80fcc:	2000      	moveq	r0, #0
   80fce:	fab1 f381 	clz	r3, r1
   80fd2:	bf08      	it	eq
   80fd4:	3320      	addeq	r3, #32
   80fd6:	f1a3 030b 	sub.w	r3, r3, #11
   80fda:	f1b3 0220 	subs.w	r2, r3, #32
   80fde:	da0c      	bge.n	80ffa <__adddf3+0x16e>
   80fe0:	320c      	adds	r2, #12
   80fe2:	dd08      	ble.n	80ff6 <__adddf3+0x16a>
   80fe4:	f102 0c14 	add.w	ip, r2, #20
   80fe8:	f1c2 020c 	rsb	r2, r2, #12
   80fec:	fa01 f00c 	lsl.w	r0, r1, ip
   80ff0:	fa21 f102 	lsr.w	r1, r1, r2
   80ff4:	e00c      	b.n	81010 <__adddf3+0x184>
   80ff6:	f102 0214 	add.w	r2, r2, #20
   80ffa:	bfd8      	it	le
   80ffc:	f1c2 0c20 	rsble	ip, r2, #32
   81000:	fa01 f102 	lsl.w	r1, r1, r2
   81004:	fa20 fc0c 	lsr.w	ip, r0, ip
   81008:	bfdc      	itt	le
   8100a:	ea41 010c 	orrle.w	r1, r1, ip
   8100e:	4090      	lslle	r0, r2
   81010:	1ae4      	subs	r4, r4, r3
   81012:	bfa2      	ittt	ge
   81014:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81018:	4329      	orrge	r1, r5
   8101a:	bd30      	popge	{r4, r5, pc}
   8101c:	ea6f 0404 	mvn.w	r4, r4
   81020:	3c1f      	subs	r4, #31
   81022:	da1c      	bge.n	8105e <__adddf3+0x1d2>
   81024:	340c      	adds	r4, #12
   81026:	dc0e      	bgt.n	81046 <__adddf3+0x1ba>
   81028:	f104 0414 	add.w	r4, r4, #20
   8102c:	f1c4 0220 	rsb	r2, r4, #32
   81030:	fa20 f004 	lsr.w	r0, r0, r4
   81034:	fa01 f302 	lsl.w	r3, r1, r2
   81038:	ea40 0003 	orr.w	r0, r0, r3
   8103c:	fa21 f304 	lsr.w	r3, r1, r4
   81040:	ea45 0103 	orr.w	r1, r5, r3
   81044:	bd30      	pop	{r4, r5, pc}
   81046:	f1c4 040c 	rsb	r4, r4, #12
   8104a:	f1c4 0220 	rsb	r2, r4, #32
   8104e:	fa20 f002 	lsr.w	r0, r0, r2
   81052:	fa01 f304 	lsl.w	r3, r1, r4
   81056:	ea40 0003 	orr.w	r0, r0, r3
   8105a:	4629      	mov	r1, r5
   8105c:	bd30      	pop	{r4, r5, pc}
   8105e:	fa21 f004 	lsr.w	r0, r1, r4
   81062:	4629      	mov	r1, r5
   81064:	bd30      	pop	{r4, r5, pc}
   81066:	f094 0f00 	teq	r4, #0
   8106a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8106e:	bf06      	itte	eq
   81070:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81074:	3401      	addeq	r4, #1
   81076:	3d01      	subne	r5, #1
   81078:	e74e      	b.n	80f18 <__adddf3+0x8c>
   8107a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8107e:	bf18      	it	ne
   81080:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81084:	d029      	beq.n	810da <__adddf3+0x24e>
   81086:	ea94 0f05 	teq	r4, r5
   8108a:	bf08      	it	eq
   8108c:	ea90 0f02 	teqeq	r0, r2
   81090:	d005      	beq.n	8109e <__adddf3+0x212>
   81092:	ea54 0c00 	orrs.w	ip, r4, r0
   81096:	bf04      	itt	eq
   81098:	4619      	moveq	r1, r3
   8109a:	4610      	moveq	r0, r2
   8109c:	bd30      	pop	{r4, r5, pc}
   8109e:	ea91 0f03 	teq	r1, r3
   810a2:	bf1e      	ittt	ne
   810a4:	2100      	movne	r1, #0
   810a6:	2000      	movne	r0, #0
   810a8:	bd30      	popne	{r4, r5, pc}
   810aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   810ae:	d105      	bne.n	810bc <__adddf3+0x230>
   810b0:	0040      	lsls	r0, r0, #1
   810b2:	4149      	adcs	r1, r1
   810b4:	bf28      	it	cs
   810b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   810ba:	bd30      	pop	{r4, r5, pc}
   810bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   810c0:	bf3c      	itt	cc
   810c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   810c6:	bd30      	popcc	{r4, r5, pc}
   810c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   810cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   810d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   810d4:	f04f 0000 	mov.w	r0, #0
   810d8:	bd30      	pop	{r4, r5, pc}
   810da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   810de:	bf1a      	itte	ne
   810e0:	4619      	movne	r1, r3
   810e2:	4610      	movne	r0, r2
   810e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   810e8:	bf1c      	itt	ne
   810ea:	460b      	movne	r3, r1
   810ec:	4602      	movne	r2, r0
   810ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   810f2:	bf06      	itte	eq
   810f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   810f8:	ea91 0f03 	teqeq	r1, r3
   810fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81100:	bd30      	pop	{r4, r5, pc}
   81102:	bf00      	nop

00081104 <__aeabi_ui2d>:
   81104:	f090 0f00 	teq	r0, #0
   81108:	bf04      	itt	eq
   8110a:	2100      	moveq	r1, #0
   8110c:	4770      	bxeq	lr
   8110e:	b530      	push	{r4, r5, lr}
   81110:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81114:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81118:	f04f 0500 	mov.w	r5, #0
   8111c:	f04f 0100 	mov.w	r1, #0
   81120:	e750      	b.n	80fc4 <__adddf3+0x138>
   81122:	bf00      	nop

00081124 <__aeabi_i2d>:
   81124:	f090 0f00 	teq	r0, #0
   81128:	bf04      	itt	eq
   8112a:	2100      	moveq	r1, #0
   8112c:	4770      	bxeq	lr
   8112e:	b530      	push	{r4, r5, lr}
   81130:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81134:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81138:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8113c:	bf48      	it	mi
   8113e:	4240      	negmi	r0, r0
   81140:	f04f 0100 	mov.w	r1, #0
   81144:	e73e      	b.n	80fc4 <__adddf3+0x138>
   81146:	bf00      	nop

00081148 <__aeabi_f2d>:
   81148:	0042      	lsls	r2, r0, #1
   8114a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8114e:	ea4f 0131 	mov.w	r1, r1, rrx
   81152:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81156:	bf1f      	itttt	ne
   81158:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8115c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81160:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81164:	4770      	bxne	lr
   81166:	f092 0f00 	teq	r2, #0
   8116a:	bf14      	ite	ne
   8116c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81170:	4770      	bxeq	lr
   81172:	b530      	push	{r4, r5, lr}
   81174:	f44f 7460 	mov.w	r4, #896	; 0x380
   81178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8117c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81180:	e720      	b.n	80fc4 <__adddf3+0x138>
   81182:	bf00      	nop

00081184 <__aeabi_ul2d>:
   81184:	ea50 0201 	orrs.w	r2, r0, r1
   81188:	bf08      	it	eq
   8118a:	4770      	bxeq	lr
   8118c:	b530      	push	{r4, r5, lr}
   8118e:	f04f 0500 	mov.w	r5, #0
   81192:	e00a      	b.n	811aa <__aeabi_l2d+0x16>

00081194 <__aeabi_l2d>:
   81194:	ea50 0201 	orrs.w	r2, r0, r1
   81198:	bf08      	it	eq
   8119a:	4770      	bxeq	lr
   8119c:	b530      	push	{r4, r5, lr}
   8119e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   811a2:	d502      	bpl.n	811aa <__aeabi_l2d+0x16>
   811a4:	4240      	negs	r0, r0
   811a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   811aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   811b6:	f43f aedc 	beq.w	80f72 <__adddf3+0xe6>
   811ba:	f04f 0203 	mov.w	r2, #3
   811be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   811c2:	bf18      	it	ne
   811c4:	3203      	addne	r2, #3
   811c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   811ca:	bf18      	it	ne
   811cc:	3203      	addne	r2, #3
   811ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   811d2:	f1c2 0320 	rsb	r3, r2, #32
   811d6:	fa00 fc03 	lsl.w	ip, r0, r3
   811da:	fa20 f002 	lsr.w	r0, r0, r2
   811de:	fa01 fe03 	lsl.w	lr, r1, r3
   811e2:	ea40 000e 	orr.w	r0, r0, lr
   811e6:	fa21 f102 	lsr.w	r1, r1, r2
   811ea:	4414      	add	r4, r2
   811ec:	e6c1      	b.n	80f72 <__adddf3+0xe6>
   811ee:	bf00      	nop

000811f0 <__aeabi_dmul>:
   811f0:	b570      	push	{r4, r5, r6, lr}
   811f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   811f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   811fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   811fe:	bf1d      	ittte	ne
   81200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81204:	ea94 0f0c 	teqne	r4, ip
   81208:	ea95 0f0c 	teqne	r5, ip
   8120c:	f000 f8de 	bleq	813cc <__aeabi_dmul+0x1dc>
   81210:	442c      	add	r4, r5
   81212:	ea81 0603 	eor.w	r6, r1, r3
   81216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8121a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8121e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81222:	bf18      	it	ne
   81224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8122c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81230:	d038      	beq.n	812a4 <__aeabi_dmul+0xb4>
   81232:	fba0 ce02 	umull	ip, lr, r0, r2
   81236:	f04f 0500 	mov.w	r5, #0
   8123a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8123e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81242:	fbe0 e503 	umlal	lr, r5, r0, r3
   81246:	f04f 0600 	mov.w	r6, #0
   8124a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8124e:	f09c 0f00 	teq	ip, #0
   81252:	bf18      	it	ne
   81254:	f04e 0e01 	orrne.w	lr, lr, #1
   81258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8125c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81264:	d204      	bcs.n	81270 <__aeabi_dmul+0x80>
   81266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8126a:	416d      	adcs	r5, r5
   8126c:	eb46 0606 	adc.w	r6, r6, r6
   81270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8127c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81288:	bf88      	it	hi
   8128a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8128e:	d81e      	bhi.n	812ce <__aeabi_dmul+0xde>
   81290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81294:	bf08      	it	eq
   81296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8129a:	f150 0000 	adcs.w	r0, r0, #0
   8129e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   812a2:	bd70      	pop	{r4, r5, r6, pc}
   812a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   812a8:	ea46 0101 	orr.w	r1, r6, r1
   812ac:	ea40 0002 	orr.w	r0, r0, r2
   812b0:	ea81 0103 	eor.w	r1, r1, r3
   812b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   812b8:	bfc2      	ittt	gt
   812ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   812be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   812c2:	bd70      	popgt	{r4, r5, r6, pc}
   812c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   812c8:	f04f 0e00 	mov.w	lr, #0
   812cc:	3c01      	subs	r4, #1
   812ce:	f300 80ab 	bgt.w	81428 <__aeabi_dmul+0x238>
   812d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   812d6:	bfde      	ittt	le
   812d8:	2000      	movle	r0, #0
   812da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   812de:	bd70      	pople	{r4, r5, r6, pc}
   812e0:	f1c4 0400 	rsb	r4, r4, #0
   812e4:	3c20      	subs	r4, #32
   812e6:	da35      	bge.n	81354 <__aeabi_dmul+0x164>
   812e8:	340c      	adds	r4, #12
   812ea:	dc1b      	bgt.n	81324 <__aeabi_dmul+0x134>
   812ec:	f104 0414 	add.w	r4, r4, #20
   812f0:	f1c4 0520 	rsb	r5, r4, #32
   812f4:	fa00 f305 	lsl.w	r3, r0, r5
   812f8:	fa20 f004 	lsr.w	r0, r0, r4
   812fc:	fa01 f205 	lsl.w	r2, r1, r5
   81300:	ea40 0002 	orr.w	r0, r0, r2
   81304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8130c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81310:	fa21 f604 	lsr.w	r6, r1, r4
   81314:	eb42 0106 	adc.w	r1, r2, r6
   81318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8131c:	bf08      	it	eq
   8131e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81322:	bd70      	pop	{r4, r5, r6, pc}
   81324:	f1c4 040c 	rsb	r4, r4, #12
   81328:	f1c4 0520 	rsb	r5, r4, #32
   8132c:	fa00 f304 	lsl.w	r3, r0, r4
   81330:	fa20 f005 	lsr.w	r0, r0, r5
   81334:	fa01 f204 	lsl.w	r2, r1, r4
   81338:	ea40 0002 	orr.w	r0, r0, r2
   8133c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81344:	f141 0100 	adc.w	r1, r1, #0
   81348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8134c:	bf08      	it	eq
   8134e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81352:	bd70      	pop	{r4, r5, r6, pc}
   81354:	f1c4 0520 	rsb	r5, r4, #32
   81358:	fa00 f205 	lsl.w	r2, r0, r5
   8135c:	ea4e 0e02 	orr.w	lr, lr, r2
   81360:	fa20 f304 	lsr.w	r3, r0, r4
   81364:	fa01 f205 	lsl.w	r2, r1, r5
   81368:	ea43 0302 	orr.w	r3, r3, r2
   8136c:	fa21 f004 	lsr.w	r0, r1, r4
   81370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81374:	fa21 f204 	lsr.w	r2, r1, r4
   81378:	ea20 0002 	bic.w	r0, r0, r2
   8137c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81384:	bf08      	it	eq
   81386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8138a:	bd70      	pop	{r4, r5, r6, pc}
   8138c:	f094 0f00 	teq	r4, #0
   81390:	d10f      	bne.n	813b2 <__aeabi_dmul+0x1c2>
   81392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81396:	0040      	lsls	r0, r0, #1
   81398:	eb41 0101 	adc.w	r1, r1, r1
   8139c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813a0:	bf08      	it	eq
   813a2:	3c01      	subeq	r4, #1
   813a4:	d0f7      	beq.n	81396 <__aeabi_dmul+0x1a6>
   813a6:	ea41 0106 	orr.w	r1, r1, r6
   813aa:	f095 0f00 	teq	r5, #0
   813ae:	bf18      	it	ne
   813b0:	4770      	bxne	lr
   813b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   813b6:	0052      	lsls	r2, r2, #1
   813b8:	eb43 0303 	adc.w	r3, r3, r3
   813bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   813c0:	bf08      	it	eq
   813c2:	3d01      	subeq	r5, #1
   813c4:	d0f7      	beq.n	813b6 <__aeabi_dmul+0x1c6>
   813c6:	ea43 0306 	orr.w	r3, r3, r6
   813ca:	4770      	bx	lr
   813cc:	ea94 0f0c 	teq	r4, ip
   813d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   813d4:	bf18      	it	ne
   813d6:	ea95 0f0c 	teqne	r5, ip
   813da:	d00c      	beq.n	813f6 <__aeabi_dmul+0x206>
   813dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813e0:	bf18      	it	ne
   813e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   813e6:	d1d1      	bne.n	8138c <__aeabi_dmul+0x19c>
   813e8:	ea81 0103 	eor.w	r1, r1, r3
   813ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813f0:	f04f 0000 	mov.w	r0, #0
   813f4:	bd70      	pop	{r4, r5, r6, pc}
   813f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813fa:	bf06      	itte	eq
   813fc:	4610      	moveq	r0, r2
   813fe:	4619      	moveq	r1, r3
   81400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81404:	d019      	beq.n	8143a <__aeabi_dmul+0x24a>
   81406:	ea94 0f0c 	teq	r4, ip
   8140a:	d102      	bne.n	81412 <__aeabi_dmul+0x222>
   8140c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81410:	d113      	bne.n	8143a <__aeabi_dmul+0x24a>
   81412:	ea95 0f0c 	teq	r5, ip
   81416:	d105      	bne.n	81424 <__aeabi_dmul+0x234>
   81418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8141c:	bf1c      	itt	ne
   8141e:	4610      	movne	r0, r2
   81420:	4619      	movne	r1, r3
   81422:	d10a      	bne.n	8143a <__aeabi_dmul+0x24a>
   81424:	ea81 0103 	eor.w	r1, r1, r3
   81428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8142c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81434:	f04f 0000 	mov.w	r0, #0
   81438:	bd70      	pop	{r4, r5, r6, pc}
   8143a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8143e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81442:	bd70      	pop	{r4, r5, r6, pc}

00081444 <__aeabi_ddiv>:
   81444:	b570      	push	{r4, r5, r6, lr}
   81446:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8144a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8144e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81452:	bf1d      	ittte	ne
   81454:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81458:	ea94 0f0c 	teqne	r4, ip
   8145c:	ea95 0f0c 	teqne	r5, ip
   81460:	f000 f8a7 	bleq	815b2 <__aeabi_ddiv+0x16e>
   81464:	eba4 0405 	sub.w	r4, r4, r5
   81468:	ea81 0e03 	eor.w	lr, r1, r3
   8146c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81470:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81474:	f000 8088 	beq.w	81588 <__aeabi_ddiv+0x144>
   81478:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8147c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81480:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81484:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81488:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8148c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81490:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81494:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81498:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8149c:	429d      	cmp	r5, r3
   8149e:	bf08      	it	eq
   814a0:	4296      	cmpeq	r6, r2
   814a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   814a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   814aa:	d202      	bcs.n	814b2 <__aeabi_ddiv+0x6e>
   814ac:	085b      	lsrs	r3, r3, #1
   814ae:	ea4f 0232 	mov.w	r2, r2, rrx
   814b2:	1ab6      	subs	r6, r6, r2
   814b4:	eb65 0503 	sbc.w	r5, r5, r3
   814b8:	085b      	lsrs	r3, r3, #1
   814ba:	ea4f 0232 	mov.w	r2, r2, rrx
   814be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   814c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   814c6:	ebb6 0e02 	subs.w	lr, r6, r2
   814ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   814ce:	bf22      	ittt	cs
   814d0:	1ab6      	subcs	r6, r6, r2
   814d2:	4675      	movcs	r5, lr
   814d4:	ea40 000c 	orrcs.w	r0, r0, ip
   814d8:	085b      	lsrs	r3, r3, #1
   814da:	ea4f 0232 	mov.w	r2, r2, rrx
   814de:	ebb6 0e02 	subs.w	lr, r6, r2
   814e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   814e6:	bf22      	ittt	cs
   814e8:	1ab6      	subcs	r6, r6, r2
   814ea:	4675      	movcs	r5, lr
   814ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   814f0:	085b      	lsrs	r3, r3, #1
   814f2:	ea4f 0232 	mov.w	r2, r2, rrx
   814f6:	ebb6 0e02 	subs.w	lr, r6, r2
   814fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   814fe:	bf22      	ittt	cs
   81500:	1ab6      	subcs	r6, r6, r2
   81502:	4675      	movcs	r5, lr
   81504:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81508:	085b      	lsrs	r3, r3, #1
   8150a:	ea4f 0232 	mov.w	r2, r2, rrx
   8150e:	ebb6 0e02 	subs.w	lr, r6, r2
   81512:	eb75 0e03 	sbcs.w	lr, r5, r3
   81516:	bf22      	ittt	cs
   81518:	1ab6      	subcs	r6, r6, r2
   8151a:	4675      	movcs	r5, lr
   8151c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81520:	ea55 0e06 	orrs.w	lr, r5, r6
   81524:	d018      	beq.n	81558 <__aeabi_ddiv+0x114>
   81526:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8152a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8152e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81532:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81536:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8153a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8153e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81542:	d1c0      	bne.n	814c6 <__aeabi_ddiv+0x82>
   81544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81548:	d10b      	bne.n	81562 <__aeabi_ddiv+0x11e>
   8154a:	ea41 0100 	orr.w	r1, r1, r0
   8154e:	f04f 0000 	mov.w	r0, #0
   81552:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81556:	e7b6      	b.n	814c6 <__aeabi_ddiv+0x82>
   81558:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8155c:	bf04      	itt	eq
   8155e:	4301      	orreq	r1, r0
   81560:	2000      	moveq	r0, #0
   81562:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81566:	bf88      	it	hi
   81568:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8156c:	f63f aeaf 	bhi.w	812ce <__aeabi_dmul+0xde>
   81570:	ebb5 0c03 	subs.w	ip, r5, r3
   81574:	bf04      	itt	eq
   81576:	ebb6 0c02 	subseq.w	ip, r6, r2
   8157a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8157e:	f150 0000 	adcs.w	r0, r0, #0
   81582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81586:	bd70      	pop	{r4, r5, r6, pc}
   81588:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8158c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81590:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81594:	bfc2      	ittt	gt
   81596:	ebd4 050c 	rsbsgt	r5, r4, ip
   8159a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8159e:	bd70      	popgt	{r4, r5, r6, pc}
   815a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815a4:	f04f 0e00 	mov.w	lr, #0
   815a8:	3c01      	subs	r4, #1
   815aa:	e690      	b.n	812ce <__aeabi_dmul+0xde>
   815ac:	ea45 0e06 	orr.w	lr, r5, r6
   815b0:	e68d      	b.n	812ce <__aeabi_dmul+0xde>
   815b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   815b6:	ea94 0f0c 	teq	r4, ip
   815ba:	bf08      	it	eq
   815bc:	ea95 0f0c 	teqeq	r5, ip
   815c0:	f43f af3b 	beq.w	8143a <__aeabi_dmul+0x24a>
   815c4:	ea94 0f0c 	teq	r4, ip
   815c8:	d10a      	bne.n	815e0 <__aeabi_ddiv+0x19c>
   815ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   815ce:	f47f af34 	bne.w	8143a <__aeabi_dmul+0x24a>
   815d2:	ea95 0f0c 	teq	r5, ip
   815d6:	f47f af25 	bne.w	81424 <__aeabi_dmul+0x234>
   815da:	4610      	mov	r0, r2
   815dc:	4619      	mov	r1, r3
   815de:	e72c      	b.n	8143a <__aeabi_dmul+0x24a>
   815e0:	ea95 0f0c 	teq	r5, ip
   815e4:	d106      	bne.n	815f4 <__aeabi_ddiv+0x1b0>
   815e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   815ea:	f43f aefd 	beq.w	813e8 <__aeabi_dmul+0x1f8>
   815ee:	4610      	mov	r0, r2
   815f0:	4619      	mov	r1, r3
   815f2:	e722      	b.n	8143a <__aeabi_dmul+0x24a>
   815f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815f8:	bf18      	it	ne
   815fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815fe:	f47f aec5 	bne.w	8138c <__aeabi_dmul+0x19c>
   81602:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81606:	f47f af0d 	bne.w	81424 <__aeabi_dmul+0x234>
   8160a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8160e:	f47f aeeb 	bne.w	813e8 <__aeabi_dmul+0x1f8>
   81612:	e712      	b.n	8143a <__aeabi_dmul+0x24a>

00081614 <__aeabi_d2iz>:
   81614:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81618:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8161c:	d215      	bcs.n	8164a <__aeabi_d2iz+0x36>
   8161e:	d511      	bpl.n	81644 <__aeabi_d2iz+0x30>
   81620:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81624:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81628:	d912      	bls.n	81650 <__aeabi_d2iz+0x3c>
   8162a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8162e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81632:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81636:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8163a:	fa23 f002 	lsr.w	r0, r3, r2
   8163e:	bf18      	it	ne
   81640:	4240      	negne	r0, r0
   81642:	4770      	bx	lr
   81644:	f04f 0000 	mov.w	r0, #0
   81648:	4770      	bx	lr
   8164a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8164e:	d105      	bne.n	8165c <__aeabi_d2iz+0x48>
   81650:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81654:	bf08      	it	eq
   81656:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8165a:	4770      	bx	lr
   8165c:	f04f 0000 	mov.w	r0, #0
   81660:	4770      	bx	lr
   81662:	bf00      	nop

00081664 <__libc_init_array>:
   81664:	b570      	push	{r4, r5, r6, lr}
   81666:	4e0f      	ldr	r6, [pc, #60]	; (816a4 <__libc_init_array+0x40>)
   81668:	4d0f      	ldr	r5, [pc, #60]	; (816a8 <__libc_init_array+0x44>)
   8166a:	1b76      	subs	r6, r6, r5
   8166c:	10b6      	asrs	r6, r6, #2
   8166e:	bf18      	it	ne
   81670:	2400      	movne	r4, #0
   81672:	d005      	beq.n	81680 <__libc_init_array+0x1c>
   81674:	3401      	adds	r4, #1
   81676:	f855 3b04 	ldr.w	r3, [r5], #4
   8167a:	4798      	blx	r3
   8167c:	42a6      	cmp	r6, r4
   8167e:	d1f9      	bne.n	81674 <__libc_init_array+0x10>
   81680:	4e0a      	ldr	r6, [pc, #40]	; (816ac <__libc_init_array+0x48>)
   81682:	4d0b      	ldr	r5, [pc, #44]	; (816b0 <__libc_init_array+0x4c>)
   81684:	f000 faa2 	bl	81bcc <_init>
   81688:	1b76      	subs	r6, r6, r5
   8168a:	10b6      	asrs	r6, r6, #2
   8168c:	bf18      	it	ne
   8168e:	2400      	movne	r4, #0
   81690:	d006      	beq.n	816a0 <__libc_init_array+0x3c>
   81692:	3401      	adds	r4, #1
   81694:	f855 3b04 	ldr.w	r3, [r5], #4
   81698:	4798      	blx	r3
   8169a:	42a6      	cmp	r6, r4
   8169c:	d1f9      	bne.n	81692 <__libc_init_array+0x2e>
   8169e:	bd70      	pop	{r4, r5, r6, pc}
   816a0:	bd70      	pop	{r4, r5, r6, pc}
   816a2:	bf00      	nop
   816a4:	00081bd8 	.word	0x00081bd8
   816a8:	00081bd8 	.word	0x00081bd8
   816ac:	00081be0 	.word	0x00081be0
   816b0:	00081bd8 	.word	0x00081bd8

000816b4 <memset>:
   816b4:	b470      	push	{r4, r5, r6}
   816b6:	0784      	lsls	r4, r0, #30
   816b8:	d046      	beq.n	81748 <memset+0x94>
   816ba:	1e54      	subs	r4, r2, #1
   816bc:	2a00      	cmp	r2, #0
   816be:	d041      	beq.n	81744 <memset+0x90>
   816c0:	b2cd      	uxtb	r5, r1
   816c2:	4603      	mov	r3, r0
   816c4:	e002      	b.n	816cc <memset+0x18>
   816c6:	1e62      	subs	r2, r4, #1
   816c8:	b3e4      	cbz	r4, 81744 <memset+0x90>
   816ca:	4614      	mov	r4, r2
   816cc:	f803 5b01 	strb.w	r5, [r3], #1
   816d0:	079a      	lsls	r2, r3, #30
   816d2:	d1f8      	bne.n	816c6 <memset+0x12>
   816d4:	2c03      	cmp	r4, #3
   816d6:	d92e      	bls.n	81736 <memset+0x82>
   816d8:	b2cd      	uxtb	r5, r1
   816da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   816de:	2c0f      	cmp	r4, #15
   816e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   816e4:	d919      	bls.n	8171a <memset+0x66>
   816e6:	4626      	mov	r6, r4
   816e8:	f103 0210 	add.w	r2, r3, #16
   816ec:	3e10      	subs	r6, #16
   816ee:	2e0f      	cmp	r6, #15
   816f0:	f842 5c10 	str.w	r5, [r2, #-16]
   816f4:	f842 5c0c 	str.w	r5, [r2, #-12]
   816f8:	f842 5c08 	str.w	r5, [r2, #-8]
   816fc:	f842 5c04 	str.w	r5, [r2, #-4]
   81700:	f102 0210 	add.w	r2, r2, #16
   81704:	d8f2      	bhi.n	816ec <memset+0x38>
   81706:	f1a4 0210 	sub.w	r2, r4, #16
   8170a:	f022 020f 	bic.w	r2, r2, #15
   8170e:	f004 040f 	and.w	r4, r4, #15
   81712:	3210      	adds	r2, #16
   81714:	2c03      	cmp	r4, #3
   81716:	4413      	add	r3, r2
   81718:	d90d      	bls.n	81736 <memset+0x82>
   8171a:	461e      	mov	r6, r3
   8171c:	4622      	mov	r2, r4
   8171e:	3a04      	subs	r2, #4
   81720:	2a03      	cmp	r2, #3
   81722:	f846 5b04 	str.w	r5, [r6], #4
   81726:	d8fa      	bhi.n	8171e <memset+0x6a>
   81728:	1f22      	subs	r2, r4, #4
   8172a:	f022 0203 	bic.w	r2, r2, #3
   8172e:	3204      	adds	r2, #4
   81730:	4413      	add	r3, r2
   81732:	f004 0403 	and.w	r4, r4, #3
   81736:	b12c      	cbz	r4, 81744 <memset+0x90>
   81738:	b2c9      	uxtb	r1, r1
   8173a:	441c      	add	r4, r3
   8173c:	f803 1b01 	strb.w	r1, [r3], #1
   81740:	42a3      	cmp	r3, r4
   81742:	d1fb      	bne.n	8173c <memset+0x88>
   81744:	bc70      	pop	{r4, r5, r6}
   81746:	4770      	bx	lr
   81748:	4614      	mov	r4, r2
   8174a:	4603      	mov	r3, r0
   8174c:	e7c2      	b.n	816d4 <memset+0x20>
   8174e:	bf00      	nop

00081750 <strlen>:
   81750:	f020 0103 	bic.w	r1, r0, #3
   81754:	f010 0003 	ands.w	r0, r0, #3
   81758:	f1c0 0000 	rsb	r0, r0, #0
   8175c:	f851 3b04 	ldr.w	r3, [r1], #4
   81760:	f100 0c04 	add.w	ip, r0, #4
   81764:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81768:	f06f 0200 	mvn.w	r2, #0
   8176c:	bf1c      	itt	ne
   8176e:	fa22 f20c 	lsrne.w	r2, r2, ip
   81772:	4313      	orrne	r3, r2
   81774:	f04f 0c01 	mov.w	ip, #1
   81778:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8177c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81780:	eba3 020c 	sub.w	r2, r3, ip
   81784:	ea22 0203 	bic.w	r2, r2, r3
   81788:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8178c:	bf04      	itt	eq
   8178e:	f851 3b04 	ldreq.w	r3, [r1], #4
   81792:	3004      	addeq	r0, #4
   81794:	d0f4      	beq.n	81780 <strlen+0x30>
   81796:	f1c2 0100 	rsb	r1, r2, #0
   8179a:	ea02 0201 	and.w	r2, r2, r1
   8179e:	fab2 f282 	clz	r2, r2
   817a2:	f1c2 021f 	rsb	r2, r2, #31
   817a6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   817aa:	4770      	bx	lr

000817ac <strtok>:
   817ac:	4a02      	ldr	r2, [pc, #8]	; (817b8 <strtok+0xc>)
   817ae:	2301      	movs	r3, #1
   817b0:	6812      	ldr	r2, [r2, #0]
   817b2:	325c      	adds	r2, #92	; 0x5c
   817b4:	f000 b802 	b.w	817bc <__strtok_r>
   817b8:	20000430 	.word	0x20000430

000817bc <__strtok_r>:
   817bc:	b4f0      	push	{r4, r5, r6, r7}
   817be:	b320      	cbz	r0, 8180a <__strtok_r+0x4e>
   817c0:	4607      	mov	r7, r0
   817c2:	460d      	mov	r5, r1
   817c4:	f817 6b01 	ldrb.w	r6, [r7], #1
   817c8:	e001      	b.n	817ce <__strtok_r+0x12>
   817ca:	42a6      	cmp	r6, r4
   817cc:	d016      	beq.n	817fc <__strtok_r+0x40>
   817ce:	f815 4b01 	ldrb.w	r4, [r5], #1
   817d2:	2c00      	cmp	r4, #0
   817d4:	d1f9      	bne.n	817ca <__strtok_r+0xe>
   817d6:	b1ee      	cbz	r6, 81814 <__strtok_r+0x58>
   817d8:	463e      	mov	r6, r7
   817da:	460c      	mov	r4, r1
   817dc:	f816 5b01 	ldrb.w	r5, [r6], #1
   817e0:	e000      	b.n	817e4 <__strtok_r+0x28>
   817e2:	b173      	cbz	r3, 81802 <__strtok_r+0x46>
   817e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   817e8:	42ab      	cmp	r3, r5
   817ea:	d1fa      	bne.n	817e2 <__strtok_r+0x26>
   817ec:	b15d      	cbz	r5, 81806 <__strtok_r+0x4a>
   817ee:	2300      	movs	r3, #0
   817f0:	703b      	strb	r3, [r7, #0]
   817f2:	6016      	str	r6, [r2, #0]
   817f4:	4606      	mov	r6, r0
   817f6:	4630      	mov	r0, r6
   817f8:	bcf0      	pop	{r4, r5, r6, r7}
   817fa:	4770      	bx	lr
   817fc:	b163      	cbz	r3, 81818 <__strtok_r+0x5c>
   817fe:	4638      	mov	r0, r7
   81800:	e7de      	b.n	817c0 <__strtok_r+0x4>
   81802:	4637      	mov	r7, r6
   81804:	e7e8      	b.n	817d8 <__strtok_r+0x1c>
   81806:	462e      	mov	r6, r5
   81808:	e7f3      	b.n	817f2 <__strtok_r+0x36>
   8180a:	6810      	ldr	r0, [r2, #0]
   8180c:	2800      	cmp	r0, #0
   8180e:	d1d7      	bne.n	817c0 <__strtok_r+0x4>
   81810:	4606      	mov	r6, r0
   81812:	e7f0      	b.n	817f6 <__strtok_r+0x3a>
   81814:	6016      	str	r6, [r2, #0]
   81816:	e7ee      	b.n	817f6 <__strtok_r+0x3a>
   81818:	6017      	str	r7, [r2, #0]
   8181a:	4606      	mov	r6, r0
   8181c:	7003      	strb	r3, [r0, #0]
   8181e:	e7ea      	b.n	817f6 <__strtok_r+0x3a>

00081820 <_strtol_r>:
   81820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81824:	4c44      	ldr	r4, [pc, #272]	; (81938 <_strtol_r+0x118>)
   81826:	4683      	mov	fp, r0
   81828:	460e      	mov	r6, r1
   8182a:	f8d4 e000 	ldr.w	lr, [r4]
   8182e:	e000      	b.n	81832 <_strtol_r+0x12>
   81830:	4626      	mov	r6, r4
   81832:	4634      	mov	r4, r6
   81834:	f814 5b01 	ldrb.w	r5, [r4], #1
   81838:	eb0e 0005 	add.w	r0, lr, r5
   8183c:	7840      	ldrb	r0, [r0, #1]
   8183e:	f000 0008 	and.w	r0, r0, #8
   81842:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   81846:	2800      	cmp	r0, #0
   81848:	d1f2      	bne.n	81830 <_strtol_r+0x10>
   8184a:	2d2d      	cmp	r5, #45	; 0x2d
   8184c:	d04b      	beq.n	818e6 <_strtol_r+0xc6>
   8184e:	2d2b      	cmp	r5, #43	; 0x2b
   81850:	bf04      	itt	eq
   81852:	7875      	ldrbeq	r5, [r6, #1]
   81854:	1cb4      	addeq	r4, r6, #2
   81856:	b11b      	cbz	r3, 81860 <_strtol_r+0x40>
   81858:	2b10      	cmp	r3, #16
   8185a:	d060      	beq.n	8191e <_strtol_r+0xfe>
   8185c:	469a      	mov	sl, r3
   8185e:	e003      	b.n	81868 <_strtol_r+0x48>
   81860:	2d30      	cmp	r5, #48	; 0x30
   81862:	d054      	beq.n	8190e <_strtol_r+0xee>
   81864:	230a      	movs	r3, #10
   81866:	469a      	mov	sl, r3
   81868:	f1b8 0f00 	cmp.w	r8, #0
   8186c:	bf14      	ite	ne
   8186e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   81872:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81876:	fbb0 f9fa 	udiv	r9, r0, sl
   8187a:	2700      	movs	r7, #0
   8187c:	46bc      	mov	ip, r7
   8187e:	fb0a 0019 	mls	r0, sl, r9, r0
   81882:	e00c      	b.n	8189e <_strtol_r+0x7e>
   81884:	3d30      	subs	r5, #48	; 0x30
   81886:	42ab      	cmp	r3, r5
   81888:	dd19      	ble.n	818be <_strtol_r+0x9e>
   8188a:	1c7e      	adds	r6, r7, #1
   8188c:	d005      	beq.n	8189a <_strtol_r+0x7a>
   8188e:	45cc      	cmp	ip, r9
   81890:	d824      	bhi.n	818dc <_strtol_r+0xbc>
   81892:	d021      	beq.n	818d8 <_strtol_r+0xb8>
   81894:	fb0a 5c0c 	mla	ip, sl, ip, r5
   81898:	2701      	movs	r7, #1
   8189a:	f814 5b01 	ldrb.w	r5, [r4], #1
   8189e:	eb0e 0605 	add.w	r6, lr, r5
   818a2:	7876      	ldrb	r6, [r6, #1]
   818a4:	f016 0f04 	tst.w	r6, #4
   818a8:	d1ec      	bne.n	81884 <_strtol_r+0x64>
   818aa:	f016 0603 	ands.w	r6, r6, #3
   818ae:	d006      	beq.n	818be <_strtol_r+0x9e>
   818b0:	2e01      	cmp	r6, #1
   818b2:	bf0c      	ite	eq
   818b4:	2637      	moveq	r6, #55	; 0x37
   818b6:	2657      	movne	r6, #87	; 0x57
   818b8:	1bad      	subs	r5, r5, r6
   818ba:	42ab      	cmp	r3, r5
   818bc:	dce5      	bgt.n	8188a <_strtol_r+0x6a>
   818be:	1c7b      	adds	r3, r7, #1
   818c0:	d016      	beq.n	818f0 <_strtol_r+0xd0>
   818c2:	f1c8 0000 	rsb	r0, r8, #0
   818c6:	ea8c 0000 	eor.w	r0, ip, r0
   818ca:	4440      	add	r0, r8
   818cc:	b14a      	cbz	r2, 818e2 <_strtol_r+0xc2>
   818ce:	b107      	cbz	r7, 818d2 <_strtol_r+0xb2>
   818d0:	1e61      	subs	r1, r4, #1
   818d2:	6011      	str	r1, [r2, #0]
   818d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818d8:	4285      	cmp	r5, r0
   818da:	dddb      	ble.n	81894 <_strtol_r+0x74>
   818dc:	f04f 37ff 	mov.w	r7, #4294967295
   818e0:	e7db      	b.n	8189a <_strtol_r+0x7a>
   818e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818e6:	1cb4      	adds	r4, r6, #2
   818e8:	7875      	ldrb	r5, [r6, #1]
   818ea:	f04f 0801 	mov.w	r8, #1
   818ee:	e7b2      	b.n	81856 <_strtol_r+0x36>
   818f0:	f1b8 0f00 	cmp.w	r8, #0
   818f4:	f04f 0322 	mov.w	r3, #34	; 0x22
   818f8:	bf14      	ite	ne
   818fa:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   818fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81902:	f8cb 3000 	str.w	r3, [fp]
   81906:	2a00      	cmp	r2, #0
   81908:	d1e2      	bne.n	818d0 <_strtol_r+0xb0>
   8190a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8190e:	7823      	ldrb	r3, [r4, #0]
   81910:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   81914:	2b58      	cmp	r3, #88	; 0x58
   81916:	d009      	beq.n	8192c <_strtol_r+0x10c>
   81918:	2308      	movs	r3, #8
   8191a:	469a      	mov	sl, r3
   8191c:	e7a4      	b.n	81868 <_strtol_r+0x48>
   8191e:	2d30      	cmp	r5, #48	; 0x30
   81920:	d19c      	bne.n	8185c <_strtol_r+0x3c>
   81922:	7820      	ldrb	r0, [r4, #0]
   81924:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   81928:	2858      	cmp	r0, #88	; 0x58
   8192a:	d197      	bne.n	8185c <_strtol_r+0x3c>
   8192c:	f04f 0a10 	mov.w	sl, #16
   81930:	7865      	ldrb	r5, [r4, #1]
   81932:	4653      	mov	r3, sl
   81934:	3402      	adds	r4, #2
   81936:	e797      	b.n	81868 <_strtol_r+0x48>
   81938:	20000434 	.word	0x20000434

0008193c <strtol>:
   8193c:	b430      	push	{r4, r5}
   8193e:	460d      	mov	r5, r1
   81940:	4c03      	ldr	r4, [pc, #12]	; (81950 <strtol+0x14>)
   81942:	4613      	mov	r3, r2
   81944:	4601      	mov	r1, r0
   81946:	462a      	mov	r2, r5
   81948:	6820      	ldr	r0, [r4, #0]
   8194a:	bc30      	pop	{r4, r5}
   8194c:	f7ff bf68 	b.w	81820 <_strtol_r>
   81950:	20000430 	.word	0x20000430

00081954 <register_fini>:
   81954:	4b02      	ldr	r3, [pc, #8]	; (81960 <register_fini+0xc>)
   81956:	b113      	cbz	r3, 8195e <register_fini+0xa>
   81958:	4802      	ldr	r0, [pc, #8]	; (81964 <register_fini+0x10>)
   8195a:	f000 b805 	b.w	81968 <atexit>
   8195e:	4770      	bx	lr
   81960:	00000000 	.word	0x00000000
   81964:	00081975 	.word	0x00081975

00081968 <atexit>:
   81968:	4601      	mov	r1, r0
   8196a:	2000      	movs	r0, #0
   8196c:	4602      	mov	r2, r0
   8196e:	4603      	mov	r3, r0
   81970:	f000 b816 	b.w	819a0 <__register_exitproc>

00081974 <__libc_fini_array>:
   81974:	b538      	push	{r3, r4, r5, lr}
   81976:	4b08      	ldr	r3, [pc, #32]	; (81998 <__libc_fini_array+0x24>)
   81978:	4d08      	ldr	r5, [pc, #32]	; (8199c <__libc_fini_array+0x28>)
   8197a:	1aed      	subs	r5, r5, r3
   8197c:	10ac      	asrs	r4, r5, #2
   8197e:	bf18      	it	ne
   81980:	18ed      	addne	r5, r5, r3
   81982:	d005      	beq.n	81990 <__libc_fini_array+0x1c>
   81984:	3c01      	subs	r4, #1
   81986:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8198a:	4798      	blx	r3
   8198c:	2c00      	cmp	r4, #0
   8198e:	d1f9      	bne.n	81984 <__libc_fini_array+0x10>
   81990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81994:	f000 b924 	b.w	81be0 <_fini>
   81998:	00081bec 	.word	0x00081bec
   8199c:	00081bf0 	.word	0x00081bf0

000819a0 <__register_exitproc>:
   819a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   819a4:	4c25      	ldr	r4, [pc, #148]	; (81a3c <__register_exitproc+0x9c>)
   819a6:	4606      	mov	r6, r0
   819a8:	6825      	ldr	r5, [r4, #0]
   819aa:	4688      	mov	r8, r1
   819ac:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   819b0:	4692      	mov	sl, r2
   819b2:	4699      	mov	r9, r3
   819b4:	b3c4      	cbz	r4, 81a28 <__register_exitproc+0x88>
   819b6:	6860      	ldr	r0, [r4, #4]
   819b8:	281f      	cmp	r0, #31
   819ba:	dc17      	bgt.n	819ec <__register_exitproc+0x4c>
   819bc:	1c41      	adds	r1, r0, #1
   819be:	b176      	cbz	r6, 819de <__register_exitproc+0x3e>
   819c0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   819c4:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   819c8:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   819cc:	2201      	movs	r2, #1
   819ce:	4082      	lsls	r2, r0
   819d0:	4315      	orrs	r5, r2
   819d2:	2e02      	cmp	r6, #2
   819d4:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   819d8:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   819dc:	d01e      	beq.n	81a1c <__register_exitproc+0x7c>
   819de:	1c83      	adds	r3, r0, #2
   819e0:	6061      	str	r1, [r4, #4]
   819e2:	2000      	movs	r0, #0
   819e4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   819e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   819ec:	4b14      	ldr	r3, [pc, #80]	; (81a40 <__register_exitproc+0xa0>)
   819ee:	b303      	cbz	r3, 81a32 <__register_exitproc+0x92>
   819f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   819f4:	f3af 8000 	nop.w
   819f8:	4604      	mov	r4, r0
   819fa:	b1d0      	cbz	r0, 81a32 <__register_exitproc+0x92>
   819fc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   81a00:	2700      	movs	r7, #0
   81a02:	e884 0088 	stmia.w	r4, {r3, r7}
   81a06:	4638      	mov	r0, r7
   81a08:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   81a0c:	2101      	movs	r1, #1
   81a0e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   81a12:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   81a16:	2e00      	cmp	r6, #0
   81a18:	d0e1      	beq.n	819de <__register_exitproc+0x3e>
   81a1a:	e7d1      	b.n	819c0 <__register_exitproc+0x20>
   81a1c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81a20:	431a      	orrs	r2, r3
   81a22:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   81a26:	e7da      	b.n	819de <__register_exitproc+0x3e>
   81a28:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   81a2c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   81a30:	e7c1      	b.n	819b6 <__register_exitproc+0x16>
   81a32:	f04f 30ff 	mov.w	r0, #4294967295
   81a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81a3a:	bf00      	nop
   81a3c:	00081ac4 	.word	0x00081ac4
   81a40:	00000000 	.word	0x00000000
   81a44:	4f232323 	.word	0x4f232323
   81a48:	000a204e 	.word	0x000a204e
   81a4c:	49232323 	.word	0x49232323
   81a50:	6974696e 	.word	0x6974696e
   81a54:	7a696c61 	.word	0x7a696c61
   81a58:	0a676e69 	.word	0x0a676e69
   81a5c:	00000000 	.word	0x00000000
   81a60:	4e232323 	.word	0x4e232323
   81a64:	53207765 	.word	0x53207765
   81a68:	64656570 	.word	0x64656570
   81a6c:	0000000a 	.word	0x0000000a
   81a70:	23232323 	.word	0x23232323
   81a74:	206f6f54 	.word	0x206f6f54
   81a78:	6863756d 	.word	0x6863756d
   81a7c:	74616420 	.word	0x74616420
   81a80:	65722061 	.word	0x65722061
   81a84:	76696563 	.word	0x76696563
   81a88:	000a6465 	.word	0x000a6465
   81a8c:	23232323 	.word	0x23232323
   81a90:	72615020 	.word	0x72615020
   81a94:	676e6973 	.word	0x676e6973
   81a98:	72745320 	.word	0x72745320
   81a9c:	73676e69 	.word	0x73676e69
   81aa0:	0000203a 	.word	0x0000203a
   81aa4:	00000023 	.word	0x00000023
   81aa8:	65657053 	.word	0x65657053
   81aac:	54532064 	.word	0x54532064
   81ab0:	0000203a 	.word	0x0000203a
   81ab4:	65705320 	.word	0x65705320
   81ab8:	44206465 	.word	0x44206465
   81abc:	00203a52 	.word	0x00203a52
   81ac0:	00000043 	.word	0x00000043

00081ac4 <_global_impure_ptr>:
   81ac4:	20000008                                ... 

00081ac8 <_ctype_>:
   81ac8:	20202000 20202020 28282020 20282828     .         ((((( 
   81ad8:	20202020 20202020 20202020 20202020                     
   81ae8:	10108820 10101010 10101010 10101010      ...............
   81af8:	04040410 04040404 10040404 10101010     ................
   81b08:	41411010 41414141 01010101 01010101     ..AAAAAA........
   81b18:	01010101 01010101 01010101 10101010     ................
   81b28:	42421010 42424242 02020202 02020202     ..BBBBBB........
   81b38:	02020202 02020202 02020202 10101010     ................
   81b48:	00000020 00000000 00000000 00000000      ...............
	...

00081bcc <_init>:
   81bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81bce:	bf00      	nop
   81bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81bd2:	bc08      	pop	{r3}
   81bd4:	469e      	mov	lr, r3
   81bd6:	4770      	bx	lr

00081bd8 <__init_array_start>:
   81bd8:	00081955 	.word	0x00081955

00081bdc <__frame_dummy_init_array_entry>:
   81bdc:	00080119                                ....

00081be0 <_fini>:
   81be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81be2:	bf00      	nop
   81be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81be6:	bc08      	pop	{r3}
   81be8:	469e      	mov	lr, r3
   81bea:	4770      	bx	lr

00081bec <__fini_array_start>:
   81bec:	000800f5 	.word	0x000800f5
