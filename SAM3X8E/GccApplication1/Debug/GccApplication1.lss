
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001adc  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00081adc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20000438  00081f14  00010438  2**2
                  ALLOC
  3 .stack        00000400  20000490  00081f6c  00010438  2**0
                  ALLOC
  4 .heap         00000200  20000890  0008236c  00010438  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  7 .debug_info   000043a3  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009f5  00000000  00000000  0001485f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000690  00000000  00000000  00015254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001c8  00000000  00000000  000158e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00015aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011f10  00000000  00000000  00015bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000457c  00000000  00000000  00027b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055346  00000000  00000000  0002c080  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000634  00000000  00000000  000813c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20000890 	.word	0x20000890
   80004:	00080149 	.word	0x00080149
   80008:	000801d1 	.word	0x000801d1
   8000c:	000801d1 	.word	0x000801d1
   80010:	000801d1 	.word	0x000801d1
   80014:	000801d1 	.word	0x000801d1
   80018:	000801d1 	.word	0x000801d1
	...
   8002c:	000801d1 	.word	0x000801d1
   80030:	000801d1 	.word	0x000801d1
   80034:	00000000 	.word	0x00000000
   80038:	000801d1 	.word	0x000801d1
   8003c:	000801d1 	.word	0x000801d1
   80040:	000801d1 	.word	0x000801d1
   80044:	000801d1 	.word	0x000801d1
   80048:	000801d1 	.word	0x000801d1
   8004c:	000801d1 	.word	0x000801d1
   80050:	000801d1 	.word	0x000801d1
   80054:	000801d1 	.word	0x000801d1
   80058:	000801d1 	.word	0x000801d1
   8005c:	000801d1 	.word	0x000801d1
   80060:	00080a29 	.word	0x00080a29
   80064:	000801d1 	.word	0x000801d1
   80068:	00000000 	.word	0x00000000
   8006c:	000801d1 	.word	0x000801d1
   80070:	000802a9 	.word	0x000802a9
   80074:	000801d1 	.word	0x000801d1
   80078:	000802e1 	.word	0x000802e1
	...
   80084:	000801d1 	.word	0x000801d1
   80088:	000801d1 	.word	0x000801d1
   8008c:	000801d1 	.word	0x000801d1
   80090:	000801d1 	.word	0x000801d1
   80094:	000801d1 	.word	0x000801d1
   80098:	000801d1 	.word	0x000801d1
   8009c:	000801d1 	.word	0x000801d1
   800a0:	000801d1 	.word	0x000801d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000801d1 	.word	0x000801d1
   800ac:	0008092d 	.word	0x0008092d
   800b0:	000801d1 	.word	0x000801d1
   800b4:	000801d1 	.word	0x000801d1
   800b8:	000801d1 	.word	0x000801d1
   800bc:	000801d1 	.word	0x000801d1
   800c0:	000801d1 	.word	0x000801d1
   800c4:	000801d1 	.word	0x000801d1
   800c8:	000801d1 	.word	0x000801d1
   800cc:	000801d1 	.word	0x000801d1
   800d0:	000801d1 	.word	0x000801d1
   800d4:	000801d1 	.word	0x000801d1
   800d8:	000801d1 	.word	0x000801d1
   800dc:	000801d1 	.word	0x000801d1
   800e0:	000801d1 	.word	0x000801d1
   800e4:	000801d1 	.word	0x000801d1
   800e8:	000801d1 	.word	0x000801d1
   800ec:	000801d1 	.word	0x000801d1
   800f0:	000801d1 	.word	0x000801d1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000438 	.word	0x20000438
   80110:	00000000 	.word	0x00000000
   80114:	00081adc 	.word	0x00081adc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00081adc 	.word	0x00081adc
   8013c:	2000043c 	.word	0x2000043c
   80140:	00081adc 	.word	0x00081adc
   80144:	00000000 	.word	0x00000000

00080148 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   8014e:	4b17      	ldr	r3, [pc, #92]	; (801ac <Reset_Handler+0x64>)
   80150:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   80152:	4b17      	ldr	r3, [pc, #92]	; (801b0 <Reset_Handler+0x68>)
   80154:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   80156:	687a      	ldr	r2, [r7, #4]
   80158:	683b      	ldr	r3, [r7, #0]
   8015a:	429a      	cmp	r2, r3
   8015c:	d00c      	beq.n	80178 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   8015e:	e007      	b.n	80170 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   80160:	683b      	ldr	r3, [r7, #0]
   80162:	1d1a      	adds	r2, r3, #4
   80164:	603a      	str	r2, [r7, #0]
   80166:	687a      	ldr	r2, [r7, #4]
   80168:	1d11      	adds	r1, r2, #4
   8016a:	6079      	str	r1, [r7, #4]
   8016c:	6812      	ldr	r2, [r2, #0]
   8016e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   80170:	683a      	ldr	r2, [r7, #0]
   80172:	4b10      	ldr	r3, [pc, #64]	; (801b4 <Reset_Handler+0x6c>)
   80174:	429a      	cmp	r2, r3
   80176:	d3f3      	bcc.n	80160 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80178:	4b0f      	ldr	r3, [pc, #60]	; (801b8 <Reset_Handler+0x70>)
   8017a:	603b      	str	r3, [r7, #0]
   8017c:	e004      	b.n	80188 <Reset_Handler+0x40>
                *pDest++ = 0;
   8017e:	683b      	ldr	r3, [r7, #0]
   80180:	1d1a      	adds	r2, r3, #4
   80182:	603a      	str	r2, [r7, #0]
   80184:	2200      	movs	r2, #0
   80186:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80188:	683a      	ldr	r2, [r7, #0]
   8018a:	4b0c      	ldr	r3, [pc, #48]	; (801bc <Reset_Handler+0x74>)
   8018c:	429a      	cmp	r2, r3
   8018e:	d3f6      	bcc.n	8017e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   80190:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x78>)
   80192:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80194:	4a0b      	ldr	r2, [pc, #44]	; (801c4 <Reset_Handler+0x7c>)
   80196:	687b      	ldr	r3, [r7, #4]
   80198:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8019c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   801a0:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   801a2:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x80>)
   801a4:	4798      	blx	r3

        /* Branch to main function */
        main();
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x84>)
   801a8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   801aa:	e7fe      	b.n	801aa <Reset_Handler+0x62>
   801ac:	00081adc 	.word	0x00081adc
   801b0:	20000000 	.word	0x20000000
   801b4:	20000438 	.word	0x20000438
   801b8:	20000438 	.word	0x20000438
   801bc:	20000490 	.word	0x20000490
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	000814c1 	.word	0x000814c1
   801cc:	00080319 	.word	0x00080319

000801d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   801d0:	b480      	push	{r7}
   801d2:	af00      	add	r7, sp, #0
        while (1) {
        }
   801d4:	e7fe      	b.n	801d4 <Dummy_Handler+0x4>
   801d6:	bf00      	nop

000801d8 <SystemInit>:
/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
   801d8:	b480      	push	{r7}
   801da:	af00      	add	r7, sp, #0
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801dc:	4b2a      	ldr	r3, [pc, #168]	; (80288 <SystemInit+0xb0>)
   801de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801e2:	601a      	str	r2, [r3, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801e4:	4b29      	ldr	r3, [pc, #164]	; (8028c <SystemInit+0xb4>)
   801e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   801ea:	601a      	str	r2, [r3, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801ec:	4b28      	ldr	r3, [pc, #160]	; (80290 <SystemInit+0xb8>)
   801ee:	6a1b      	ldr	r3, [r3, #32]
   801f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   801f4:	2b00      	cmp	r3, #0
   801f6:	d109      	bne.n	8020c <SystemInit+0x34>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801f8:	4b25      	ldr	r3, [pc, #148]	; (80290 <SystemInit+0xb8>)
   801fa:	4a26      	ldr	r2, [pc, #152]	; (80294 <SystemInit+0xbc>)
   801fc:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801fe:	bf00      	nop
   80200:	4b23      	ldr	r3, [pc, #140]	; (80290 <SystemInit+0xb8>)
   80202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80204:	f003 0301 	and.w	r3, r3, #1
   80208:	2b00      	cmp	r3, #0
   8020a:	d0f9      	beq.n	80200 <SystemInit+0x28>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8020c:	4b20      	ldr	r3, [pc, #128]	; (80290 <SystemInit+0xb8>)
   8020e:	4a22      	ldr	r2, [pc, #136]	; (80298 <SystemInit+0xc0>)
   80210:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80212:	bf00      	nop
   80214:	4b1e      	ldr	r3, [pc, #120]	; (80290 <SystemInit+0xb8>)
   80216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8021c:	2b00      	cmp	r3, #0
   8021e:	d0f9      	beq.n	80214 <SystemInit+0x3c>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80220:	4b1b      	ldr	r3, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80222:	4a1b      	ldr	r2, [pc, #108]	; (80290 <SystemInit+0xb8>)
   80224:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80226:	f022 0203 	bic.w	r2, r2, #3
   8022a:	f042 0201 	orr.w	r2, r2, #1
   8022e:	631a      	str	r2, [r3, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80230:	bf00      	nop
   80232:	4b17      	ldr	r3, [pc, #92]	; (80290 <SystemInit+0xb8>)
   80234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80236:	f003 0308 	and.w	r3, r3, #8
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f9      	beq.n	80232 <SystemInit+0x5a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8023e:	4b14      	ldr	r3, [pc, #80]	; (80290 <SystemInit+0xb8>)
   80240:	4a16      	ldr	r2, [pc, #88]	; (8029c <SystemInit+0xc4>)
   80242:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80244:	bf00      	nop
   80246:	4b12      	ldr	r3, [pc, #72]	; (80290 <SystemInit+0xb8>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f003 0302 	and.w	r3, r3, #2
   8024e:	2b00      	cmp	r3, #0
   80250:	d0f9      	beq.n	80246 <SystemInit+0x6e>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80252:	4b0f      	ldr	r3, [pc, #60]	; (80290 <SystemInit+0xb8>)
   80254:	2211      	movs	r2, #17
   80256:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80258:	bf00      	nop
   8025a:	4b0d      	ldr	r3, [pc, #52]	; (80290 <SystemInit+0xb8>)
   8025c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8025e:	f003 0308 	and.w	r3, r3, #8
   80262:	2b00      	cmp	r3, #0
   80264:	d0f9      	beq.n	8025a <SystemInit+0x82>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80266:	4b0a      	ldr	r3, [pc, #40]	; (80290 <SystemInit+0xb8>)
   80268:	2212      	movs	r2, #18
   8026a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8026c:	bf00      	nop
   8026e:	4b08      	ldr	r3, [pc, #32]	; (80290 <SystemInit+0xb8>)
   80270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80272:	f003 0308 	and.w	r3, r3, #8
   80276:	2b00      	cmp	r3, #0
   80278:	d0f9      	beq.n	8026e <SystemInit+0x96>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8027a:	4b09      	ldr	r3, [pc, #36]	; (802a0 <SystemInit+0xc8>)
   8027c:	4a09      	ldr	r2, [pc, #36]	; (802a4 <SystemInit+0xcc>)
   8027e:	601a      	str	r2, [r3, #0]
}
   80280:	46bd      	mov	sp, r7
   80282:	f85d 7b04 	ldr.w	r7, [sp], #4
   80286:	4770      	bx	lr
   80288:	400e0a00 	.word	0x400e0a00
   8028c:	400e0c00 	.word	0x400e0c00
   80290:	400e0600 	.word	0x400e0600
   80294:	00370809 	.word	0x00370809
   80298:	01370809 	.word	0x01370809
   8029c:	200d3f01 	.word	0x200d3f01
   802a0:	20000000 	.word	0x20000000
   802a4:	0501bd00 	.word	0x0501bd00

000802a8 <PIOB_Handler>:


// *************************************************************************************************************************************

void PIOB_Handler()
{
   802a8:	b480      	push	{r7}
   802aa:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTB we need to
	//  check if PB27 is the one triggering the interrupt.
	if((PIOB->PIO_ISR & PIO_PB27)==PIO_PB27){
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <PIOB_Handler+0x2c>)
   802ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   802b4:	2b00      	cmp	r3, #0
   802b6:	d009      	beq.n	802cc <PIOB_Handler+0x24>
		iEncoder_ST++;
   802b8:	4b07      	ldr	r3, [pc, #28]	; (802d8 <PIOB_Handler+0x30>)
   802ba:	681b      	ldr	r3, [r3, #0]
   802bc:	1c5a      	adds	r2, r3, #1
   802be:	4b06      	ldr	r3, [pc, #24]	; (802d8 <PIOB_Handler+0x30>)
   802c0:	601a      	str	r2, [r3, #0]
		iEncoder_ST_current++;
   802c2:	4b06      	ldr	r3, [pc, #24]	; (802dc <PIOB_Handler+0x34>)
   802c4:	681b      	ldr	r3, [r3, #0]
   802c6:	1c5a      	adds	r2, r3, #1
   802c8:	4b04      	ldr	r3, [pc, #16]	; (802dc <PIOB_Handler+0x34>)
   802ca:	601a      	str	r2, [r3, #0]
	}
}
   802cc:	46bd      	mov	sp, r7
   802ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   802d2:	4770      	bx	lr
   802d4:	400e1000 	.word	0x400e1000
   802d8:	2000045c 	.word	0x2000045c
   802dc:	20000464 	.word	0x20000464

000802e0 <PIOD_Handler>:

void PIOD_Handler()
{
   802e0:	b480      	push	{r7}
   802e2:	af00      	add	r7, sp, #0
	//Since the interrupt could be any pin on PORTD we need to
	//  check if PD8 is the one triggering the interrupt.
	if((PIOD->PIO_ISR & PIO_PD8)==PIO_PD8){
   802e4:	4b09      	ldr	r3, [pc, #36]	; (8030c <PIOD_Handler+0x2c>)
   802e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   802e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
   802ec:	2b00      	cmp	r3, #0
   802ee:	d009      	beq.n	80304 <PIOD_Handler+0x24>
		iEncoder_DR++;
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <PIOD_Handler+0x30>)
   802f2:	681b      	ldr	r3, [r3, #0]
   802f4:	1c5a      	adds	r2, r3, #1
   802f6:	4b06      	ldr	r3, [pc, #24]	; (80310 <PIOD_Handler+0x30>)
   802f8:	601a      	str	r2, [r3, #0]
		iEncoder_DR_current++;
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <PIOD_Handler+0x34>)
   802fc:	681b      	ldr	r3, [r3, #0]
   802fe:	1c5a      	adds	r2, r3, #1
   80300:	4b04      	ldr	r3, [pc, #16]	; (80314 <PIOD_Handler+0x34>)
   80302:	601a      	str	r2, [r3, #0]
	}
}
   80304:	46bd      	mov	sp, r7
   80306:	f85d 7b04 	ldr.w	r7, [sp], #4
   8030a:	4770      	bx	lr
   8030c:	400e1400 	.word	0x400e1400
   80310:	20000470 	.word	0x20000470
   80314:	20000460 	.word	0x20000460

00080318 <main>:
uint8_t c = 4;

// *************************************************************************************************************************************

int main(void)
{
   80318:	b580      	push	{r7, lr}
   8031a:	af00      	add	r7, sp, #0
    /* Initialize the SAM system */
    SystemInit();
   8031c:	4b14      	ldr	r3, [pc, #80]	; (80370 <main+0x58>)
   8031e:	4798      	blx	r3
	/* Initialize pins */
	Pin_Configuration();
   80320:	4b14      	ldr	r3, [pc, #80]	; (80374 <main+0x5c>)
   80322:	4798      	blx	r3
	/* Initialize PWM generator */
	InitPWMController_MCLK(); 
   80324:	4b14      	ldr	r3, [pc, #80]	; (80378 <main+0x60>)
   80326:	4798      	blx	r3
	/* Initialize timers */
	Configure_Timers();
   80328:	4b14      	ldr	r3, [pc, #80]	; (8037c <main+0x64>)
   8032a:	4798      	blx	r3
	/* Configre UART */
	configure_uart();
   8032c:	4b14      	ldr	r3, [pc, #80]	; (80380 <main+0x68>)
   8032e:	4798      	blx	r3
	
	
	/* Disable watchdog */
	WDT->WDT_MR |=  WDT_MR_WDDIS;
   80330:	4b14      	ldr	r3, [pc, #80]	; (80384 <main+0x6c>)
   80332:	4a14      	ldr	r2, [pc, #80]	; (80384 <main+0x6c>)
   80334:	6852      	ldr	r2, [r2, #4]
   80336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   8033a:	605a      	str	r2, [r3, #4]
	
	/* Run initialization sequence for motor drivers */
	InitMotors();
   8033c:	4b12      	ldr	r3, [pc, #72]	; (80388 <main+0x70>)
   8033e:	4798      	blx	r3

	//selfTest();
	
	while (1)
	{
		if(getNewSpeed()){
   80340:	4b12      	ldr	r3, [pc, #72]	; (8038c <main+0x74>)
   80342:	4798      	blx	r3
   80344:	4603      	mov	r3, r0
   80346:	2b00      	cmp	r3, #0
   80348:	d010      	beq.n	8036c <main+0x54>
			newSpeed = 0;
   8034a:	4b11      	ldr	r3, [pc, #68]	; (80390 <main+0x78>)
   8034c:	2200      	movs	r2, #0
   8034e:	701a      	strb	r2, [r3, #0]
			ControlledDrive(percentage_ST,percentage_DR);
   80350:	4b10      	ldr	r3, [pc, #64]	; (80394 <main+0x7c>)
   80352:	781b      	ldrb	r3, [r3, #0]
   80354:	b2da      	uxtb	r2, r3
   80356:	4b10      	ldr	r3, [pc, #64]	; (80398 <main+0x80>)
   80358:	781b      	ldrb	r3, [r3, #0]
   8035a:	b2db      	uxtb	r3, r3
   8035c:	4610      	mov	r0, r2
   8035e:	4619      	mov	r1, r3
   80360:	4b0e      	ldr	r3, [pc, #56]	; (8039c <main+0x84>)
   80362:	4798      	blx	r3
			flag12 = 0;
   80364:	4b0e      	ldr	r3, [pc, #56]	; (803a0 <main+0x88>)
   80366:	2200      	movs	r2, #0
   80368:	701a      	strb	r2, [r3, #0]
		}
		
		//ForwardDrive();
	}
   8036a:	e7e9      	b.n	80340 <main+0x28>
   8036c:	e7e8      	b.n	80340 <main+0x28>
   8036e:	bf00      	nop
   80370:	000801d9 	.word	0x000801d9
   80374:	000803d5 	.word	0x000803d5
   80378:	000805ad 	.word	0x000805ad
   8037c:	000808d1 	.word	0x000808d1
   80380:	00080c25 	.word	0x00080c25
   80384:	400e1a50 	.word	0x400e1a50
   80388:	00080769 	.word	0x00080769
   8038c:	00080af9 	.word	0x00080af9
   80390:	20000474 	.word	0x20000474
   80394:	2000048f 	.word	0x2000048f
   80398:	2000048c 	.word	0x2000048c
   8039c:	000807e1 	.word	0x000807e1
   803a0:	20000454 	.word	0x20000454

000803a4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   803a4:	b480      	push	{r7}
   803a6:	b083      	sub	sp, #12
   803a8:	af00      	add	r7, sp, #0
   803aa:	4603      	mov	r3, r0
   803ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   803ae:	4b08      	ldr	r3, [pc, #32]	; (803d0 <NVIC_EnableIRQ+0x2c>)
   803b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
   803b4:	0952      	lsrs	r2, r2, #5
   803b6:	79f9      	ldrb	r1, [r7, #7]
   803b8:	f001 011f 	and.w	r1, r1, #31
   803bc:	2001      	movs	r0, #1
   803be:	fa00 f101 	lsl.w	r1, r0, r1
   803c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803c6:	370c      	adds	r7, #12
   803c8:	46bd      	mov	sp, r7
   803ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   803ce:	4770      	bx	lr
   803d0:	e000e100 	.word	0xe000e100

000803d4 <Pin_Configuration>:
// ----- Defines
#define _BV(bit) (0x1u << bit)

// *************************************************************************************************************************************
void Pin_Configuration()
{
   803d4:	b580      	push	{r7, lr}
   803d6:	af00      	add	r7, sp, #0
	// Enable clock for line C
		PMC->PMC_PCER0 |= _BV(ID_PIOC);
   803d8:	4b6f      	ldr	r3, [pc, #444]	; (80598 <Pin_Configuration+0x1c4>)
   803da:	4a6f      	ldr	r2, [pc, #444]	; (80598 <Pin_Configuration+0x1c4>)
   803dc:	6912      	ldr	r2, [r2, #16]
   803de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   803e2:	611a      	str	r2, [r3, #16]
	// Enable clock for line B
		PMC->PMC_PCER0 |= _BV(ID_PIOB);
   803e4:	4b6c      	ldr	r3, [pc, #432]	; (80598 <Pin_Configuration+0x1c4>)
   803e6:	4a6c      	ldr	r2, [pc, #432]	; (80598 <Pin_Configuration+0x1c4>)
   803e8:	6912      	ldr	r2, [r2, #16]
   803ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   803ee:	611a      	str	r2, [r3, #16]
	// Enable clock for line D
		PMC->PMC_PCER0 |= _BV(ID_PIOD);
   803f0:	4b69      	ldr	r3, [pc, #420]	; (80598 <Pin_Configuration+0x1c4>)
   803f2:	4a69      	ldr	r2, [pc, #420]	; (80598 <Pin_Configuration+0x1c4>)
   803f4:	6912      	ldr	r2, [r2, #16]
   803f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   803fa:	611a      	str	r2, [r3, #16]

	// Set pin 13[B27] as input for encoder data - left[ST]
		PIOB -> PIO_PER |= PIO_PB27;
   803fc:	4b67      	ldr	r3, [pc, #412]	; (8059c <Pin_Configuration+0x1c8>)
   803fe:	4a67      	ldr	r2, [pc, #412]	; (8059c <Pin_Configuration+0x1c8>)
   80400:	6812      	ldr	r2, [r2, #0]
   80402:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80406:	601a      	str	r2, [r3, #0]
		PIOB -> PIO_ODR |= PIO_PB27;
   80408:	4b64      	ldr	r3, [pc, #400]	; (8059c <Pin_Configuration+0x1c8>)
   8040a:	4a64      	ldr	r2, [pc, #400]	; (8059c <Pin_Configuration+0x1c8>)
   8040c:	6952      	ldr	r2, [r2, #20]
   8040e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80412:	615a      	str	r2, [r3, #20]
		PIOB -> PIO_PUDR |= PIO_PB27;
   80414:	4b61      	ldr	r3, [pc, #388]	; (8059c <Pin_Configuration+0x1c8>)
   80416:	4a61      	ldr	r2, [pc, #388]	; (8059c <Pin_Configuration+0x1c8>)
   80418:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8041a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8041e:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOB->PIO_AIMER |= PIO_PB27;
   80420:	4b5e      	ldr	r3, [pc, #376]	; (8059c <Pin_Configuration+0x1c8>)
   80422:	4a5e      	ldr	r2, [pc, #376]	; (8059c <Pin_Configuration+0x1c8>)
   80424:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   80428:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8042c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOB->PIO_ESR |= PIO_PB27;
   80430:	4b5a      	ldr	r3, [pc, #360]	; (8059c <Pin_Configuration+0x1c8>)
   80432:	4a5a      	ldr	r2, [pc, #360]	; (8059c <Pin_Configuration+0x1c8>)
   80434:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   80438:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8043c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Falling Edge/Low Level Select Register
		PIOB->PIO_REHLSR |= PIO_PB27;
   80440:	4b56      	ldr	r3, [pc, #344]	; (8059c <Pin_Configuration+0x1c8>)
   80442:	4a56      	ldr	r2, [pc, #344]	; (8059c <Pin_Configuration+0x1c8>)
   80444:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   80448:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8044c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTB.PB27
		PIOB->PIO_IER |= PIO_PB27;
   80450:	4b52      	ldr	r3, [pc, #328]	; (8059c <Pin_Configuration+0x1c8>)
   80452:	4a52      	ldr	r2, [pc, #328]	; (8059c <Pin_Configuration+0x1c8>)
   80454:	6c12      	ldr	r2, [r2, #64]	; 0x40
   80456:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8045a:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOB_IRQn);
   8045c:	200c      	movs	r0, #12
   8045e:	4b50      	ldr	r3, [pc, #320]	; (805a0 <Pin_Configuration+0x1cc>)
   80460:	4798      	blx	r3
	
	// Set pin 12[D8] as input for encoder data - right[DR]
		PIOD -> PIO_PER |= PIO_PD8;
   80462:	4b50      	ldr	r3, [pc, #320]	; (805a4 <Pin_Configuration+0x1d0>)
   80464:	4a4f      	ldr	r2, [pc, #316]	; (805a4 <Pin_Configuration+0x1d0>)
   80466:	6812      	ldr	r2, [r2, #0]
   80468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8046c:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_ODR |= PIO_PD8;
   8046e:	4b4d      	ldr	r3, [pc, #308]	; (805a4 <Pin_Configuration+0x1d0>)
   80470:	4a4c      	ldr	r2, [pc, #304]	; (805a4 <Pin_Configuration+0x1d0>)
   80472:	6952      	ldr	r2, [r2, #20]
   80474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80478:	615a      	str	r2, [r3, #20]
		PIOD -> PIO_PUDR |= PIO_PD8;
   8047a:	4b4a      	ldr	r3, [pc, #296]	; (805a4 <Pin_Configuration+0x1d0>)
   8047c:	4a49      	ldr	r2, [pc, #292]	; (805a4 <Pin_Configuration+0x1d0>)
   8047e:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80484:	661a      	str	r2, [r3, #96]	; 0x60
		//Additional Interrupt Modes Enable Register
		PIOD -> PIO_AIMER |= PIO_PD8;
   80486:	4b47      	ldr	r3, [pc, #284]	; (805a4 <Pin_Configuration+0x1d0>)
   80488:	4a46      	ldr	r2, [pc, #280]	; (805a4 <Pin_Configuration+0x1d0>)
   8048a:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
   8048e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80492:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		//Edge Select Register
		PIOD -> PIO_ESR |= PIO_PD8;
   80496:	4b43      	ldr	r3, [pc, #268]	; (805a4 <Pin_Configuration+0x1d0>)
   80498:	4a42      	ldr	r2, [pc, #264]	; (805a4 <Pin_Configuration+0x1d0>)
   8049a:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   8049e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		//Falling Edge/Low Level Select Register
		PIOD -> PIO_REHLSR |= PIO_PD8;
   804a6:	4b3f      	ldr	r3, [pc, #252]	; (805a4 <Pin_Configuration+0x1d0>)
   804a8:	4a3e      	ldr	r2, [pc, #248]	; (805a4 <Pin_Configuration+0x1d0>)
   804aa:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
   804ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		//Finally enable interrupts on PORTD.PD8
		PIOD -> PIO_IER |= PIO_PD8;
   804b6:	4b3b      	ldr	r3, [pc, #236]	; (805a4 <Pin_Configuration+0x1d0>)
   804b8:	4a3a      	ldr	r2, [pc, #232]	; (805a4 <Pin_Configuration+0x1d0>)
   804ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
   804bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   804c0:	641a      	str	r2, [r3, #64]	; 0x40
		NVIC_EnableIRQ(PIOD_IRQn);
   804c2:	200e      	movs	r0, #14
   804c4:	4b36      	ldr	r3, [pc, #216]	; (805a0 <Pin_Configuration+0x1cc>)
   804c6:	4798      	blx	r3
		
	// Set pin 11[D7] as output for Buzzer - PCB2 pin U
		PIOD -> PIO_PER |= PIO_PD7; // PIO_PER = PIO enable register
   804c8:	4b36      	ldr	r3, [pc, #216]	; (805a4 <Pin_Configuration+0x1d0>)
   804ca:	4a36      	ldr	r2, [pc, #216]	; (805a4 <Pin_Configuration+0x1d0>)
   804cc:	6812      	ldr	r2, [r2, #0]
   804ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804d2:	601a      	str	r2, [r3, #0]
		PIOD -> PIO_OER |= PIO_PD7; // PIO_OER = Output Enable Register
   804d4:	4b33      	ldr	r3, [pc, #204]	; (805a4 <Pin_Configuration+0x1d0>)
   804d6:	4a33      	ldr	r2, [pc, #204]	; (805a4 <Pin_Configuration+0x1d0>)
   804d8:	6912      	ldr	r2, [r2, #16]
   804da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804de:	611a      	str	r2, [r3, #16]
		PIOD -> PIO_PUDR |= PIO_PD7; // Disable pull-up on pin D7
   804e0:	4b30      	ldr	r3, [pc, #192]	; (805a4 <Pin_Configuration+0x1d0>)
   804e2:	4a30      	ldr	r2, [pc, #192]	; (805a4 <Pin_Configuration+0x1d0>)
   804e4:	6e12      	ldr	r2, [r2, #96]	; 0x60
   804e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   804ea:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 9[C21] as PWM output for motors - left[ST]
		PIOC->PIO_PDR |= PIO_PC22; // PIO_PDR = PIO Disable register
   804ec:	4b2e      	ldr	r3, [pc, #184]	; (805a8 <Pin_Configuration+0x1d4>)
   804ee:	4a2e      	ldr	r2, [pc, #184]	; (805a8 <Pin_Configuration+0x1d4>)
   804f0:	6852      	ldr	r2, [r2, #4]
   804f2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   804f6:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC22; // PIO_ABSR = Peripheral AB Select Register
   804f8:	4b2b      	ldr	r3, [pc, #172]	; (805a8 <Pin_Configuration+0x1d4>)
   804fa:	4a2b      	ldr	r2, [pc, #172]	; (805a8 <Pin_Configuration+0x1d4>)
   804fc:	6f12      	ldr	r2, [r2, #112]	; 0x70
   804fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   80502:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC22; // Enable output on pin C22
   80504:	4b28      	ldr	r3, [pc, #160]	; (805a8 <Pin_Configuration+0x1d4>)
   80506:	4a28      	ldr	r2, [pc, #160]	; (805a8 <Pin_Configuration+0x1d4>)
   80508:	6912      	ldr	r2, [r2, #16]
   8050a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   8050e:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC22; // Disable pull-up on pin C22
   80510:	4b25      	ldr	r3, [pc, #148]	; (805a8 <Pin_Configuration+0x1d4>)
   80512:	4a25      	ldr	r2, [pc, #148]	; (805a8 <Pin_Configuration+0x1d4>)
   80514:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80516:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   8051a:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 8[C22] as PWM output for motors - right[DR]
		PIOC->PIO_PDR |= PIO_PC21; // Disable PIO Control on PC21 and set up for Peripheral B
   8051c:	4b22      	ldr	r3, [pc, #136]	; (805a8 <Pin_Configuration+0x1d4>)
   8051e:	4a22      	ldr	r2, [pc, #136]	; (805a8 <Pin_Configuration+0x1d4>)
   80520:	6852      	ldr	r2, [r2, #4]
   80522:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   80526:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC21;
   80528:	4b1f      	ldr	r3, [pc, #124]	; (805a8 <Pin_Configuration+0x1d4>)
   8052a:	4a1f      	ldr	r2, [pc, #124]	; (805a8 <Pin_Configuration+0x1d4>)
   8052c:	6f12      	ldr	r2, [r2, #112]	; 0x70
   8052e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   80532:	671a      	str	r2, [r3, #112]	; 0x70
		PIOC->PIO_OER |= PIO_PC21; // Enable output on pin C21
   80534:	4b1c      	ldr	r3, [pc, #112]	; (805a8 <Pin_Configuration+0x1d4>)
   80536:	4a1c      	ldr	r2, [pc, #112]	; (805a8 <Pin_Configuration+0x1d4>)
   80538:	6912      	ldr	r2, [r2, #16]
   8053a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   8053e:	611a      	str	r2, [r3, #16]
		PIOC->PIO_PUDR |= PIO_PC21; // Enable pull-up on pin C21
   80540:	4b19      	ldr	r3, [pc, #100]	; (805a8 <Pin_Configuration+0x1d4>)
   80542:	4a19      	ldr	r2, [pc, #100]	; (805a8 <Pin_Configuration+0x1d4>)
   80544:	6e12      	ldr	r2, [r2, #96]	; 0x60
   80546:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   8054a:	661a      	str	r2, [r3, #96]	; 0x60
	
	// Set pin 7[C23] as output for LED - PCB2 pinS
		PIOC -> PIO_PER |= PIO_PC23;
   8054c:	4b16      	ldr	r3, [pc, #88]	; (805a8 <Pin_Configuration+0x1d4>)
   8054e:	4a16      	ldr	r2, [pc, #88]	; (805a8 <Pin_Configuration+0x1d4>)
   80550:	6812      	ldr	r2, [r2, #0]
   80552:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80556:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC23;
   80558:	4b13      	ldr	r3, [pc, #76]	; (805a8 <Pin_Configuration+0x1d4>)
   8055a:	4a13      	ldr	r2, [pc, #76]	; (805a8 <Pin_Configuration+0x1d4>)
   8055c:	6912      	ldr	r2, [r2, #16]
   8055e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80562:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC23;
   80564:	4b10      	ldr	r3, [pc, #64]	; (805a8 <Pin_Configuration+0x1d4>)
   80566:	4a10      	ldr	r2, [pc, #64]	; (805a8 <Pin_Configuration+0x1d4>)
   80568:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8056a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8056e:	661a      	str	r2, [r3, #96]	; 0x60
		
	// Set pin 6[C24] as output for PUMP - PCB2 pinH
		PIOC -> PIO_PER |= PIO_PC24;
   80570:	4b0d      	ldr	r3, [pc, #52]	; (805a8 <Pin_Configuration+0x1d4>)
   80572:	4a0d      	ldr	r2, [pc, #52]	; (805a8 <Pin_Configuration+0x1d4>)
   80574:	6812      	ldr	r2, [r2, #0]
   80576:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8057a:	601a      	str	r2, [r3, #0]
		PIOC -> PIO_OER |= PIO_PC24;
   8057c:	4b0a      	ldr	r3, [pc, #40]	; (805a8 <Pin_Configuration+0x1d4>)
   8057e:	4a0a      	ldr	r2, [pc, #40]	; (805a8 <Pin_Configuration+0x1d4>)
   80580:	6912      	ldr	r2, [r2, #16]
   80582:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80586:	611a      	str	r2, [r3, #16]
		PIOC -> PIO_PUDR |= PIO_PC24;
   80588:	4b07      	ldr	r3, [pc, #28]	; (805a8 <Pin_Configuration+0x1d4>)
   8058a:	4a07      	ldr	r2, [pc, #28]	; (805a8 <Pin_Configuration+0x1d4>)
   8058c:	6e12      	ldr	r2, [r2, #96]	; 0x60
   8058e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80592:	661a      	str	r2, [r3, #96]	; 0x60
		////Falling Edge/Low Level Select Register
		//PIOB->PIO_REHLSR |= PIO_PB27;
		////Finally enable interrupts on PORTB.PB27
		//PIOB->PIO_IER |= PIO_PB27;
		//NVIC_EnableIRQ(PIOB_IRQn);
}
   80594:	bd80      	pop	{r7, pc}
   80596:	bf00      	nop
   80598:	400e0600 	.word	0x400e0600
   8059c:	400e1000 	.word	0x400e1000
   805a0:	000803a5 	.word	0x000803a5
   805a4:	400e1400 	.word	0x400e1400
   805a8:	400e1200 	.word	0x400e1200

000805ac <InitPWMController_MCLK>:
void signum(int x);

// *************************************************************************************************************************************

void InitPWMController_MCLK()
{
   805ac:	b580      	push	{r7, lr}
   805ae:	af00      	add	r7, sp, #0
	//Enable the PWM clock (36) 
	PMC->PMC_PCER1 |= _BV((ID_PWM - 32)); // PMC_PCER1 = Peripheral Clock Enable Register 1
   805b0:	4b14      	ldr	r3, [pc, #80]	; (80604 <InitPWMController_MCLK+0x58>)
   805b2:	4a14      	ldr	r2, [pc, #80]	; (80604 <InitPWMController_MCLK+0x58>)
   805b4:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   805b8:	f042 0210 	orr.w	r2, r2, #16
   805bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	//Channel Prescaler - Use ClockA as configured in PWM_CLK
	//Preliminary frequency = 84000000 / 1024 = 82031 Hz
	PWM->PWM_CH_NUM[CHAN_ST].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   805c0:	4b11      	ldr	r3, [pc, #68]	; (80608 <InitPWMController_MCLK+0x5c>)
   805c2:	220a      	movs	r2, #10
   805c4:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[CHAN_DR].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024; // PWM_CHR = PWM Channel Mode Register
   805c8:	4b0f      	ldr	r3, [pc, #60]	; (80608 <InitPWMController_MCLK+0x5c>)
   805ca:	220a      	movs	r2, #10
   805cc:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	//Final frequency = 82031 / 1600 = 51 Hz
	SetPeriod(CHAN_ST, 1640);
   805d0:	2004      	movs	r0, #4
   805d2:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   805d6:	4b0d      	ldr	r3, [pc, #52]	; (8060c <InitPWMController_MCLK+0x60>)
   805d8:	4798      	blx	r3
	//Duty cycle = (200 / 400) * 100 = 50%
	SetDuty(CHAN_ST, 100);
   805da:	2004      	movs	r0, #4
   805dc:	2164      	movs	r1, #100	; 0x64
   805de:	4b0c      	ldr	r3, [pc, #48]	; (80610 <InitPWMController_MCLK+0x64>)
   805e0:	4798      	blx	r3
	
	//Final frequency = 82031 / 1600 = 51Hz
	SetPeriod(CHAN_DR, 1640);
   805e2:	2005      	movs	r0, #5
   805e4:	f44f 61cd 	mov.w	r1, #1640	; 0x668
   805e8:	4b08      	ldr	r3, [pc, #32]	; (8060c <InitPWMController_MCLK+0x60>)
   805ea:	4798      	blx	r3
	//Duty cycle = (x / 800) * 100 = y%
	SetDuty(CHAN_DR, 100);
   805ec:	2005      	movs	r0, #5
   805ee:	2164      	movs	r1, #100	; 0x64
   805f0:	4b07      	ldr	r3, [pc, #28]	; (80610 <InitPWMController_MCLK+0x64>)
   805f2:	4798      	blx	r3
	
	PWM->PWM_ENA = _BV(CHAN_DR); // PWM_ENA = PWM Enable Register
   805f4:	4b04      	ldr	r3, [pc, #16]	; (80608 <InitPWMController_MCLK+0x5c>)
   805f6:	2220      	movs	r2, #32
   805f8:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA = _BV(CHAN_ST); // PWM_ENA = PWM Enable Register
   805fa:	4b03      	ldr	r3, [pc, #12]	; (80608 <InitPWMController_MCLK+0x5c>)
   805fc:	2210      	movs	r2, #16
   805fe:	605a      	str	r2, [r3, #4]
}
   80600:	bd80      	pop	{r7, pc}
   80602:	bf00      	nop
   80604:	400e0600 	.word	0x400e0600
   80608:	40094000 	.word	0x40094000
   8060c:	00080615 	.word	0x00080615
   80610:	00080661 	.word	0x00080661

00080614 <SetPeriod>:

static void SetPeriod(uint32_t chan, int period)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   8061e:	4b0f      	ldr	r3, [pc, #60]	; (8065c <SetPeriod+0x48>)
   80620:	68da      	ldr	r2, [r3, #12]
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	2101      	movs	r1, #1
   80626:	fa01 f303 	lsl.w	r3, r1, r3
   8062a:	4013      	ands	r3, r2
   8062c:	2b00      	cmp	r3, #0
   8062e:	d108      	bne.n	80642 <SetPeriod+0x2e>
		PWM->PWM_CH_NUM[chan].PWM_CPRD = period; // PWM_CPRD = PWM Channel Period Register
   80630:	490a      	ldr	r1, [pc, #40]	; (8065c <SetPeriod+0x48>)
   80632:	683a      	ldr	r2, [r7, #0]
   80634:	687b      	ldr	r3, [r7, #4]
   80636:	015b      	lsls	r3, r3, #5
   80638:	440b      	add	r3, r1
   8063a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8063e:	605a      	str	r2, [r3, #4]
   80640:	e007      	b.n	80652 <SetPeriod+0x3e>
	else
		PWM->PWM_CH_NUM[chan].PWM_CPRDUPD = period; // PWM_CPRDUPD = PWM Channel Period Update Register
   80642:	4906      	ldr	r1, [pc, #24]	; (8065c <SetPeriod+0x48>)
   80644:	683a      	ldr	r2, [r7, #0]
   80646:	687b      	ldr	r3, [r7, #4]
   80648:	015b      	lsls	r3, r3, #5
   8064a:	440b      	add	r3, r1
   8064c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80650:	601a      	str	r2, [r3, #0]
}
   80652:	370c      	adds	r7, #12
   80654:	46bd      	mov	sp, r7
   80656:	f85d 7b04 	ldr.w	r7, [sp], #4
   8065a:	4770      	bx	lr
   8065c:	40094000 	.word	0x40094000

00080660 <SetDuty>:

static void SetDuty(uint32_t chan, int duty)
{
   80660:	b480      	push	{r7}
   80662:	b083      	sub	sp, #12
   80664:	af00      	add	r7, sp, #0
   80666:	6078      	str	r0, [r7, #4]
   80668:	6039      	str	r1, [r7, #0]
	//If the channel is disabled then we can write directly to the register
	//	else if enabled we write to the update register which acts as a double buffer
	if ((PWM->PWM_SR & _BV(chan)) == 0)
   8066a:	4b0f      	ldr	r3, [pc, #60]	; (806a8 <SetDuty+0x48>)
   8066c:	68da      	ldr	r2, [r3, #12]
   8066e:	687b      	ldr	r3, [r7, #4]
   80670:	2101      	movs	r1, #1
   80672:	fa01 f303 	lsl.w	r3, r1, r3
   80676:	4013      	ands	r3, r2
   80678:	2b00      	cmp	r3, #0
   8067a:	d107      	bne.n	8068c <SetDuty+0x2c>
		PWM->PWM_CH_NUM[chan].PWM_CDTY = duty;
   8067c:	490a      	ldr	r1, [pc, #40]	; (806a8 <SetDuty+0x48>)
   8067e:	683a      	ldr	r2, [r7, #0]
   80680:	687b      	ldr	r3, [r7, #4]
   80682:	3310      	adds	r3, #16
   80684:	015b      	lsls	r3, r3, #5
   80686:	440b      	add	r3, r1
   80688:	605a      	str	r2, [r3, #4]
   8068a:	e007      	b.n	8069c <SetDuty+0x3c>
	else
		PWM->PWM_CH_NUM[chan].PWM_CDTYUPD = duty;
   8068c:	4906      	ldr	r1, [pc, #24]	; (806a8 <SetDuty+0x48>)
   8068e:	683a      	ldr	r2, [r7, #0]
   80690:	687b      	ldr	r3, [r7, #4]
   80692:	015b      	lsls	r3, r3, #5
   80694:	440b      	add	r3, r1
   80696:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8069a:	601a      	str	r2, [r3, #0]
}
   8069c:	370c      	adds	r7, #12
   8069e:	46bd      	mov	sp, r7
   806a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   806a4:	4770      	bx	lr
   806a6:	bf00      	nop
   806a8:	40094000 	.word	0x40094000
   806ac:	00000000 	.word	0x00000000

000806b0 <WriteMotors>:

void WriteMotors(int percent_ST, int percent_DR)
{
   806b0:	b590      	push	{r4, r7, lr}
   806b2:	b083      	sub	sp, #12
   806b4:	af00      	add	r7, sp, #0
   806b6:	6078      	str	r0, [r7, #4]
   806b8:	6039      	str	r1, [r7, #0]
	SetDuty(CHAN_ST,123+(percent_ST/2.43)); // PWM motor stanga
   806ba:	4b25      	ldr	r3, [pc, #148]	; (80750 <WriteMotors+0xa0>)
   806bc:	6878      	ldr	r0, [r7, #4]
   806be:	4798      	blx	r3
   806c0:	4602      	mov	r2, r0
   806c2:	460b      	mov	r3, r1
   806c4:	4c23      	ldr	r4, [pc, #140]	; (80754 <WriteMotors+0xa4>)
   806c6:	4610      	mov	r0, r2
   806c8:	4619      	mov	r1, r3
   806ca:	a31d      	add	r3, pc, #116	; (adr r3, 80740 <WriteMotors+0x90>)
   806cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   806d0:	47a0      	blx	r4
   806d2:	4602      	mov	r2, r0
   806d4:	460b      	mov	r3, r1
   806d6:	4c20      	ldr	r4, [pc, #128]	; (80758 <WriteMotors+0xa8>)
   806d8:	4610      	mov	r0, r2
   806da:	4619      	mov	r1, r3
   806dc:	a31a      	add	r3, pc, #104	; (adr r3, 80748 <WriteMotors+0x98>)
   806de:	e9d3 2300 	ldrd	r2, r3, [r3]
   806e2:	47a0      	blx	r4
   806e4:	4602      	mov	r2, r0
   806e6:	460b      	mov	r3, r1
   806e8:	4c1c      	ldr	r4, [pc, #112]	; (8075c <WriteMotors+0xac>)
   806ea:	4610      	mov	r0, r2
   806ec:	4619      	mov	r1, r3
   806ee:	47a0      	blx	r4
   806f0:	4603      	mov	r3, r0
   806f2:	2004      	movs	r0, #4
   806f4:	4619      	mov	r1, r3
   806f6:	4b1a      	ldr	r3, [pc, #104]	; (80760 <WriteMotors+0xb0>)
   806f8:	4798      	blx	r3
	SetDuty(CHAN_DR,123-(percent_DR/2.43)); // PWM motor dreapta
   806fa:	4b15      	ldr	r3, [pc, #84]	; (80750 <WriteMotors+0xa0>)
   806fc:	6838      	ldr	r0, [r7, #0]
   806fe:	4798      	blx	r3
   80700:	4602      	mov	r2, r0
   80702:	460b      	mov	r3, r1
   80704:	4c13      	ldr	r4, [pc, #76]	; (80754 <WriteMotors+0xa4>)
   80706:	4610      	mov	r0, r2
   80708:	4619      	mov	r1, r3
   8070a:	a30d      	add	r3, pc, #52	; (adr r3, 80740 <WriteMotors+0x90>)
   8070c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80710:	47a0      	blx	r4
   80712:	4602      	mov	r2, r0
   80714:	460b      	mov	r3, r1
   80716:	4c13      	ldr	r4, [pc, #76]	; (80764 <WriteMotors+0xb4>)
   80718:	a10b      	add	r1, pc, #44	; (adr r1, 80748 <WriteMotors+0x98>)
   8071a:	e9d1 0100 	ldrd	r0, r1, [r1]
   8071e:	47a0      	blx	r4
   80720:	4602      	mov	r2, r0
   80722:	460b      	mov	r3, r1
   80724:	4c0d      	ldr	r4, [pc, #52]	; (8075c <WriteMotors+0xac>)
   80726:	4610      	mov	r0, r2
   80728:	4619      	mov	r1, r3
   8072a:	47a0      	blx	r4
   8072c:	4603      	mov	r3, r0
   8072e:	2005      	movs	r0, #5
   80730:	4619      	mov	r1, r3
   80732:	4b0b      	ldr	r3, [pc, #44]	; (80760 <WriteMotors+0xb0>)
   80734:	4798      	blx	r3
}
   80736:	370c      	adds	r7, #12
   80738:	46bd      	mov	sp, r7
   8073a:	bd90      	pop	{r4, r7, pc}
   8073c:	f3af 8000 	nop.w
   80740:	d70a3d71 	.word	0xd70a3d71
   80744:	400370a3 	.word	0x400370a3
   80748:	00000000 	.word	0x00000000
   8074c:	405ec000 	.word	0x405ec000
   80750:	00080f81 	.word	0x00080f81
   80754:	000812a1 	.word	0x000812a1
   80758:	00080ce9 	.word	0x00080ce9
   8075c:	00081471 	.word	0x00081471
   80760:	00080661 	.word	0x00080661
   80764:	00080ce5 	.word	0x00080ce5

00080768 <InitMotors>:

void InitMotors()
{
   80768:	b580      	push	{r7, lr}
   8076a:	af00      	add	r7, sp, #0
	WriteMotors(0,0);
   8076c:	2000      	movs	r0, #0
   8076e:	2100      	movs	r1, #0
   80770:	4b18      	ldr	r3, [pc, #96]	; (807d4 <InitMotors+0x6c>)
   80772:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23; 
   80774:	4b18      	ldr	r3, [pc, #96]	; (807d8 <InitMotors+0x70>)
   80776:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8077a:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   8077c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80780:	4b16      	ldr	r3, [pc, #88]	; (807dc <InitMotors+0x74>)
   80782:	4798      	blx	r3
	
	WriteMotors(100,100);//Stop Motors; Percent_RIGHT|Percent_LEFT
   80784:	2064      	movs	r0, #100	; 0x64
   80786:	2164      	movs	r1, #100	; 0x64
   80788:	4b12      	ldr	r3, [pc, #72]	; (807d4 <InitMotors+0x6c>)
   8078a:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   8078c:	4b12      	ldr	r3, [pc, #72]	; (807d8 <InitMotors+0x70>)
   8078e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80792:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(1000);
   80794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80798:	4b10      	ldr	r3, [pc, #64]	; (807dc <InitMotors+0x74>)
   8079a:	4798      	blx	r3
	
	WriteMotors(-100,-100);
   8079c:	f06f 0063 	mvn.w	r0, #99	; 0x63
   807a0:	f06f 0163 	mvn.w	r1, #99	; 0x63
   807a4:	4b0b      	ldr	r3, [pc, #44]	; (807d4 <InitMotors+0x6c>)
   807a6:	4798      	blx	r3
	// Enable output
	PIOC->PIO_SODR = PIO_PC23;
   807a8:	4b0b      	ldr	r3, [pc, #44]	; (807d8 <InitMotors+0x70>)
   807aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   807ae:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
   807b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   807b4:	4b09      	ldr	r3, [pc, #36]	; (807dc <InitMotors+0x74>)
   807b6:	4798      	blx	r3
	
	WriteMotors(0,0);//Stop Motors; Percent_RIGHT|Percent_LEFT
   807b8:	2000      	movs	r0, #0
   807ba:	2100      	movs	r1, #0
   807bc:	4b05      	ldr	r3, [pc, #20]	; (807d4 <InitMotors+0x6c>)
   807be:	4798      	blx	r3
	// Disable output
	PIOC->PIO_CODR = PIO_PC23;
   807c0:	4b05      	ldr	r3, [pc, #20]	; (807d8 <InitMotors+0x70>)
   807c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   807c6:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms(3000);
   807c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   807cc:	4b03      	ldr	r3, [pc, #12]	; (807dc <InitMotors+0x74>)
   807ce:	4798      	blx	r3
}  
   807d0:	bd80      	pop	{r7, pc}
   807d2:	bf00      	nop
   807d4:	000806b1 	.word	0x000806b1
   807d8:	400e1200 	.word	0x400e1200
   807dc:	00080951 	.word	0x00080951

000807e0 <ControlledDrive>:
	WriteMotors(iSpeed_ST,iSpeed_DR);
}

// 255 impulsuri ~ 60 cm 
// 
void ControlledDrive(uint8_t percent_ST, uint8_t percent_DR){
   807e0:	b580      	push	{r7, lr}
   807e2:	b084      	sub	sp, #16
   807e4:	af00      	add	r7, sp, #0
   807e6:	4602      	mov	r2, r0
   807e8:	460b      	mov	r3, r1
   807ea:	71fa      	strb	r2, [r7, #7]
   807ec:	71bb      	strb	r3, [r7, #6]
	if(sign_ST==1){
   807ee:	4b25      	ldr	r3, [pc, #148]	; (80884 <ControlledDrive+0xa4>)
   807f0:	781b      	ldrb	r3, [r3, #0]
   807f2:	b2db      	uxtb	r3, r3
   807f4:	2b01      	cmp	r3, #1
   807f6:	d104      	bne.n	80802 <ControlledDrive+0x22>
		iSpeed_ST=-70;
   807f8:	4b23      	ldr	r3, [pc, #140]	; (80888 <ControlledDrive+0xa8>)
   807fa:	f06f 0245 	mvn.w	r2, #69	; 0x45
   807fe:	601a      	str	r2, [r3, #0]
   80800:	e002      	b.n	80808 <ControlledDrive+0x28>
	}else{
		iSpeed_ST=BASE_SPEED;
   80802:	4b21      	ldr	r3, [pc, #132]	; (80888 <ControlledDrive+0xa8>)
   80804:	2246      	movs	r2, #70	; 0x46
   80806:	601a      	str	r2, [r3, #0]
	}
	
	if(sign_DR==1){
   80808:	4b20      	ldr	r3, [pc, #128]	; (8088c <ControlledDrive+0xac>)
   8080a:	781b      	ldrb	r3, [r3, #0]
   8080c:	b2db      	uxtb	r3, r3
   8080e:	2b01      	cmp	r3, #1
   80810:	d104      	bne.n	8081c <ControlledDrive+0x3c>
		iSpeed_DR=-70;
   80812:	4b1f      	ldr	r3, [pc, #124]	; (80890 <ControlledDrive+0xb0>)
   80814:	f06f 0245 	mvn.w	r2, #69	; 0x45
   80818:	601a      	str	r2, [r3, #0]
   8081a:	e002      	b.n	80822 <ControlledDrive+0x42>
	}else{
		iSpeed_DR=BASE_SPEED;
   8081c:	4b1c      	ldr	r3, [pc, #112]	; (80890 <ControlledDrive+0xb0>)
   8081e:	2246      	movs	r2, #70	; 0x46
   80820:	601a      	str	r2, [r3, #0]
	}
	
	uint8_t st = 0;
   80822:	2300      	movs	r3, #0
   80824:	73fb      	strb	r3, [r7, #15]
	uint8_t dr = 0;
   80826:	2300      	movs	r3, #0
   80828:	73bb      	strb	r3, [r7, #14]
	
	iEncoder_ST_current = 0;
   8082a:	4b1a      	ldr	r3, [pc, #104]	; (80894 <ControlledDrive+0xb4>)
   8082c:	2200      	movs	r2, #0
   8082e:	601a      	str	r2, [r3, #0]
	iEncoder_DR_current = 0;
   80830:	4b19      	ldr	r3, [pc, #100]	; (80898 <ControlledDrive+0xb8>)
   80832:	2200      	movs	r2, #0
   80834:	601a      	str	r2, [r3, #0]
	
	//iSpeed_ST=-70;
	//iSpeed_DR=-70;
	
	while((st<1)||(dr<1)){
   80836:	e01b      	b.n	80870 <ControlledDrive+0x90>
		if(iEncoder_DR_current >= percent_DR){
   80838:	79ba      	ldrb	r2, [r7, #6]
   8083a:	4b17      	ldr	r3, [pc, #92]	; (80898 <ControlledDrive+0xb8>)
   8083c:	681b      	ldr	r3, [r3, #0]
   8083e:	429a      	cmp	r2, r3
   80840:	d804      	bhi.n	8084c <ControlledDrive+0x6c>
			iSpeed_DR = 0;
   80842:	4b13      	ldr	r3, [pc, #76]	; (80890 <ControlledDrive+0xb0>)
   80844:	2200      	movs	r2, #0
   80846:	601a      	str	r2, [r3, #0]
			st=1;
   80848:	2301      	movs	r3, #1
   8084a:	73fb      	strb	r3, [r7, #15]
		}
		if(iEncoder_ST_current >= percent_ST){
   8084c:	79fa      	ldrb	r2, [r7, #7]
   8084e:	4b11      	ldr	r3, [pc, #68]	; (80894 <ControlledDrive+0xb4>)
   80850:	681b      	ldr	r3, [r3, #0]
   80852:	429a      	cmp	r2, r3
   80854:	d804      	bhi.n	80860 <ControlledDrive+0x80>
			iSpeed_ST = 0;
   80856:	4b0c      	ldr	r3, [pc, #48]	; (80888 <ControlledDrive+0xa8>)
   80858:	2200      	movs	r2, #0
   8085a:	601a      	str	r2, [r3, #0]
			dr=1;
   8085c:	2301      	movs	r3, #1
   8085e:	73bb      	strb	r3, [r7, #14]
		}
		WriteMotors(iSpeed_ST,iSpeed_DR);
   80860:	4b09      	ldr	r3, [pc, #36]	; (80888 <ControlledDrive+0xa8>)
   80862:	681a      	ldr	r2, [r3, #0]
   80864:	4b0a      	ldr	r3, [pc, #40]	; (80890 <ControlledDrive+0xb0>)
   80866:	681b      	ldr	r3, [r3, #0]
   80868:	4610      	mov	r0, r2
   8086a:	4619      	mov	r1, r3
   8086c:	4b0b      	ldr	r3, [pc, #44]	; (8089c <ControlledDrive+0xbc>)
   8086e:	4798      	blx	r3
	iEncoder_DR_current = 0;
	
	//iSpeed_ST=-70;
	//iSpeed_DR=-70;
	
	while((st<1)||(dr<1)){
   80870:	7bfb      	ldrb	r3, [r7, #15]
   80872:	2b00      	cmp	r3, #0
   80874:	d0e0      	beq.n	80838 <ControlledDrive+0x58>
   80876:	7bbb      	ldrb	r3, [r7, #14]
   80878:	2b00      	cmp	r3, #0
   8087a:	d0dd      	beq.n	80838 <ControlledDrive+0x58>
		}
		WriteMotors(iSpeed_ST,iSpeed_DR);
	}
	
	
}
   8087c:	3710      	adds	r7, #16
   8087e:	46bd      	mov	sp, r7
   80880:	bd80      	pop	{r7, pc}
   80882:	bf00      	nop
   80884:	2000048e 	.word	0x2000048e
   80888:	2000046c 	.word	0x2000046c
   8088c:	2000048d 	.word	0x2000048d
   80890:	20000468 	.word	0x20000468
   80894:	20000464 	.word	0x20000464
   80898:	20000460 	.word	0x20000460
   8089c:	000806b1 	.word	0x000806b1

000808a0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   808a0:	b480      	push	{r7}
   808a2:	b083      	sub	sp, #12
   808a4:	af00      	add	r7, sp, #0
   808a6:	4603      	mov	r3, r0
   808a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   808aa:	4b08      	ldr	r3, [pc, #32]	; (808cc <NVIC_EnableIRQ+0x2c>)
   808ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
   808b0:	0952      	lsrs	r2, r2, #5
   808b2:	79f9      	ldrb	r1, [r7, #7]
   808b4:	f001 011f 	and.w	r1, r1, #31
   808b8:	2001      	movs	r0, #1
   808ba:	fa00 f101 	lsl.w	r1, r0, r1
   808be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   808c2:	370c      	adds	r7, #12
   808c4:	46bd      	mov	sp, r7
   808c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   808ca:	4770      	bx	lr
   808cc:	e000e100 	.word	0xe000e100

000808d0 <Configure_Timers>:
void Configure_TC0(void);
void delay_ms(uint32_t iPrescription);

// *************************************************************************************************************************************

void Configure_Timers(){
   808d0:	b580      	push	{r7, lr}
   808d2:	af00      	add	r7, sp, #0
	Configure_TC0();
   808d4:	4b01      	ldr	r3, [pc, #4]	; (808dc <Configure_Timers+0xc>)
   808d6:	4798      	blx	r3
}
   808d8:	bd80      	pop	{r7, pc}
   808da:	bf00      	nop
   808dc:	000808e1 	.word	0x000808e1

000808e0 <Configure_TC0>:

void Configure_TC0()
{
   808e0:	b580      	push	{r7, lr}
   808e2:	af00      	add	r7, sp, #0
	// Enable TC0 in PMC power management controller - ID 27
	PMC->PMC_PCER0 |= 1 << ID_TC0;
   808e4:	4b0e      	ldr	r3, [pc, #56]	; (80920 <Configure_TC0+0x40>)
   808e6:	4a0e      	ldr	r2, [pc, #56]	; (80920 <Configure_TC0+0x40>)
   808e8:	6912      	ldr	r2, [r2, #16]
   808ea:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   808ee:	611a      	str	r2, [r3, #16]
	
	// Disable the clock for TC0
	TC0->TC_CHANNEL->TC_CCR = TC_CCR_CLKDIS;
   808f0:	4b0c      	ldr	r3, [pc, #48]	; (80924 <Configure_TC0+0x44>)
   808f2:	2202      	movs	r2, #2
   808f4:	601a      	str	r2, [r3, #0]
	
	// Disable interrupts
	TC0->TC_CHANNEL->TC_IDR = 0xFFFFFFFF;
   808f6:	4b0b      	ldr	r3, [pc, #44]	; (80924 <Configure_TC0+0x44>)
   808f8:	f04f 32ff 	mov.w	r2, #4294967295
   808fc:	629a      	str	r2, [r3, #40]	; 0x28
	
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   808fe:	4b09      	ldr	r3, [pc, #36]	; (80924 <Configure_TC0+0x44>)
   80900:	6a1b      	ldr	r3, [r3, #32]
	
	// Set Mode
	TC0->TC_CHANNEL->TC_CMR = TC_CMR_CPCTRG | TC_CMR_TCCLKS_TIMER_CLOCK5;
   80902:	4b08      	ldr	r3, [pc, #32]	; (80924 <Configure_TC0+0x44>)
   80904:	f244 0204 	movw	r2, #16388	; 0x4004
   80908:	605a      	str	r2, [r3, #4]
	
	// Set compare value register TC_CR
	TC0->TC_CHANNEL[0].TC_RC = 10000;
   8090a:	4b06      	ldr	r3, [pc, #24]	; (80924 <Configure_TC0+0x44>)
   8090c:	f242 7210 	movw	r2, #10000	; 0x2710
   80910:	61da      	str	r2, [r3, #28]
	
	// Configure and enable interrupt on RC compare
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
   80912:	201b      	movs	r0, #27
   80914:	4b04      	ldr	r3, [pc, #16]	; (80928 <Configure_TC0+0x48>)
   80916:	4798      	blx	r3
	TC0->TC_CHANNEL->TC_IER = TC_IER_CPCS;
   80918:	4b02      	ldr	r3, [pc, #8]	; (80924 <Configure_TC0+0x44>)
   8091a:	2210      	movs	r2, #16
   8091c:	625a      	str	r2, [r3, #36]	; 0x24
	
	// Enable interrupts
	//TC0->TC_CHANNEL->TC_IER = 0xFFFFFFFF;
}
   8091e:	bd80      	pop	{r7, pc}
   80920:	400e0600 	.word	0x400e0600
   80924:	40080000 	.word	0x40080000
   80928:	000808a1 	.word	0x000808a1

0008092c <TC0_Handler>:

void TC0_Handler(void)
{
   8092c:	b480      	push	{r7}
   8092e:	af00      	add	r7, sp, #0
	// Clear status register
	TC0->TC_CHANNEL->TC_SR;
   80930:	4b05      	ldr	r3, [pc, #20]	; (80948 <TC0_Handler+0x1c>)
   80932:	6a1b      	ldr	r3, [r3, #32]
	
	// Disable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;
   80934:	4b04      	ldr	r3, [pc, #16]	; (80948 <TC0_Handler+0x1c>)
   80936:	2202      	movs	r2, #2
   80938:	601a      	str	r2, [r3, #0]
	
	iDelay = 1;
   8093a:	4b04      	ldr	r3, [pc, #16]	; (8094c <TC0_Handler+0x20>)
   8093c:	2201      	movs	r2, #1
   8093e:	701a      	strb	r2, [r3, #0]
}
   80940:	46bd      	mov	sp, r7
   80942:	f85d 7b04 	ldr.w	r7, [sp], #4
   80946:	4770      	bx	lr
   80948:	40080000 	.word	0x40080000
   8094c:	20000455 	.word	0x20000455

00080950 <delay_ms>:

void delay_ms(uint32_t iPrescription)
{
   80950:	b480      	push	{r7}
   80952:	b083      	sub	sp, #12
   80954:	af00      	add	r7, sp, #0
   80956:	6078      	str	r0, [r7, #4]
	// Set compare value for TC0
	TC0->TC_CHANNEL[0].TC_RC = iPrescription*29;
   80958:	490b      	ldr	r1, [pc, #44]	; (80988 <delay_ms+0x38>)
   8095a:	687a      	ldr	r2, [r7, #4]
   8095c:	4613      	mov	r3, r2
   8095e:	00db      	lsls	r3, r3, #3
   80960:	1a9b      	subs	r3, r3, r2
   80962:	009b      	lsls	r3, r3, #2
   80964:	4413      	add	r3, r2
   80966:	61cb      	str	r3, [r1, #28]
	
	// Reset and enable timer
	TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN|TC_CCR_SWTRG;
   80968:	4b07      	ldr	r3, [pc, #28]	; (80988 <delay_ms+0x38>)
   8096a:	2205      	movs	r2, #5
   8096c:	601a      	str	r2, [r3, #0]
	
	while(!iDelay);
   8096e:	bf00      	nop
   80970:	4b06      	ldr	r3, [pc, #24]	; (8098c <delay_ms+0x3c>)
   80972:	781b      	ldrb	r3, [r3, #0]
   80974:	2b00      	cmp	r3, #0
   80976:	d0fb      	beq.n	80970 <delay_ms+0x20>
	
	iDelay = 0;
   80978:	4b04      	ldr	r3, [pc, #16]	; (8098c <delay_ms+0x3c>)
   8097a:	2200      	movs	r2, #0
   8097c:	701a      	strb	r2, [r3, #0]
   8097e:	370c      	adds	r7, #12
   80980:	46bd      	mov	sp, r7
   80982:	f85d 7b04 	ldr.w	r7, [sp], #4
   80986:	4770      	bx	lr
   80988:	40080000 	.word	0x40080000
   8098c:	20000455 	.word	0x20000455

00080990 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80990:	b480      	push	{r7}
   80992:	b083      	sub	sp, #12
   80994:	af00      	add	r7, sp, #0
   80996:	4603      	mov	r3, r0
   80998:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8099a:	4b08      	ldr	r3, [pc, #32]	; (809bc <NVIC_EnableIRQ+0x2c>)
   8099c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   809a0:	0952      	lsrs	r2, r2, #5
   809a2:	79f9      	ldrb	r1, [r7, #7]
   809a4:	f001 011f 	and.w	r1, r1, #31
   809a8:	2001      	movs	r0, #1
   809aa:	fa00 f101 	lsl.w	r1, r0, r1
   809ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   809b2:	370c      	adds	r7, #12
   809b4:	46bd      	mov	sp, r7
   809b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   809ba:	4770      	bx	lr
   809bc:	e000e100 	.word	0xe000e100

000809c0 <uart_getchar>:
int signum(int x);

// *************************************************************************************************************************************

inline int uart_getchar(uint8_t *c)
{
   809c0:	b480      	push	{r7}
   809c2:	b083      	sub	sp, #12
   809c4:	af00      	add	r7, sp, #0
   809c6:	6078      	str	r0, [r7, #4]
	// Check if the receiver is ready
	if((UART->UART_SR & UART_SR_RXRDY) == 0)
   809c8:	4b09      	ldr	r3, [pc, #36]	; (809f0 <uart_getchar+0x30>)
   809ca:	695b      	ldr	r3, [r3, #20]
   809cc:	f003 0301 	and.w	r3, r3, #1
   809d0:	2b00      	cmp	r3, #0
   809d2:	d101      	bne.n	809d8 <uart_getchar+0x18>
	return 1;
   809d4:	2301      	movs	r3, #1
   809d6:	e005      	b.n	809e4 <uart_getchar+0x24>
	
	// Read the character
	*c = (uint8_t) UART->UART_RHR;
   809d8:	4b05      	ldr	r3, [pc, #20]	; (809f0 <uart_getchar+0x30>)
   809da:	699b      	ldr	r3, [r3, #24]
   809dc:	b2da      	uxtb	r2, r3
   809de:	687b      	ldr	r3, [r7, #4]
   809e0:	701a      	strb	r2, [r3, #0]
	return 0;
   809e2:	2300      	movs	r3, #0
}
   809e4:	4618      	mov	r0, r3
   809e6:	370c      	adds	r7, #12
   809e8:	46bd      	mov	sp, r7
   809ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   809ee:	4770      	bx	lr
   809f0:	400e0800 	.word	0x400e0800

000809f4 <uart_putchar>:

inline int uart_putchar(const uint8_t c)
{
   809f4:	b480      	push	{r7}
   809f6:	b083      	sub	sp, #12
   809f8:	af00      	add	r7, sp, #0
   809fa:	4603      	mov	r3, r0
   809fc:	71fb      	strb	r3, [r7, #7]
	// Check if the transmitter is ready
	if(!(UART->UART_SR & UART_SR_TXRDY))
   809fe:	4b09      	ldr	r3, [pc, #36]	; (80a24 <uart_putchar+0x30>)
   80a00:	695b      	ldr	r3, [r3, #20]
   80a02:	f003 0302 	and.w	r3, r3, #2
   80a06:	2b00      	cmp	r3, #0
   80a08:	d101      	bne.n	80a0e <uart_putchar+0x1a>
	return 1;
   80a0a:	2301      	movs	r3, #1
   80a0c:	e003      	b.n	80a16 <uart_putchar+0x22>
	
	// Send the character
	UART->UART_THR = c;
   80a0e:	4b05      	ldr	r3, [pc, #20]	; (80a24 <uart_putchar+0x30>)
   80a10:	79fa      	ldrb	r2, [r7, #7]
   80a12:	61da      	str	r2, [r3, #28]
	return 0;
   80a14:	2300      	movs	r3, #0
}
   80a16:	4618      	mov	r0, r3
   80a18:	370c      	adds	r7, #12
   80a1a:	46bd      	mov	sp, r7
   80a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a20:	4770      	bx	lr
   80a22:	bf00      	nop
   80a24:	400e0800 	.word	0x400e0800

00080a28 <UART_Handler>:

void UART_Handler(void)
{
   80a28:	b580      	push	{r7, lr}
   80a2a:	b082      	sub	sp, #8
   80a2c:	af00      	add	r7, sp, #0
	uint8_t c = 0;
   80a2e:	2300      	movs	r3, #0
   80a30:	71fb      	strb	r3, [r7, #7]
	
	// Check if the interrupt source is receive ready
	if((UART->UART_IMR & UART_IMR_RXRDY) && (!flag12))
   80a32:	4b19      	ldr	r3, [pc, #100]	; (80a98 <UART_Handler+0x70>)
   80a34:	691b      	ldr	r3, [r3, #16]
   80a36:	f003 0301 	and.w	r3, r3, #1
   80a3a:	2b00      	cmp	r3, #0
   80a3c:	d028      	beq.n	80a90 <UART_Handler+0x68>
   80a3e:	4b17      	ldr	r3, [pc, #92]	; (80a9c <UART_Handler+0x74>)
   80a40:	781b      	ldrb	r3, [r3, #0]
   80a42:	b2db      	uxtb	r3, r3
   80a44:	2b00      	cmp	r3, #0
   80a46:	d123      	bne.n	80a90 <UART_Handler+0x68>
	{
		if(!uart_getchar(&c)){
   80a48:	1dfb      	adds	r3, r7, #7
   80a4a:	4618      	mov	r0, r3
   80a4c:	4b14      	ldr	r3, [pc, #80]	; (80aa0 <UART_Handler+0x78>)
   80a4e:	4798      	blx	r3
   80a50:	4603      	mov	r3, r0
   80a52:	2b00      	cmp	r3, #0
   80a54:	d107      	bne.n	80a66 <UART_Handler+0x3e>
			buffer[i++] = c;
   80a56:	4b13      	ldr	r3, [pc, #76]	; (80aa4 <UART_Handler+0x7c>)
   80a58:	681b      	ldr	r3, [r3, #0]
   80a5a:	1c59      	adds	r1, r3, #1
   80a5c:	4a11      	ldr	r2, [pc, #68]	; (80aa4 <UART_Handler+0x7c>)
   80a5e:	6011      	str	r1, [r2, #0]
   80a60:	79f9      	ldrb	r1, [r7, #7]
   80a62:	4a11      	ldr	r2, [pc, #68]	; (80aa8 <UART_Handler+0x80>)
   80a64:	54d1      	strb	r1, [r2, r3]
		}
		if(c=='\n'){
   80a66:	79fb      	ldrb	r3, [r7, #7]
   80a68:	2b0a      	cmp	r3, #10
   80a6a:	d111      	bne.n	80a90 <UART_Handler+0x68>
			sendString(buffer, i); // make an echo of the whole buffer untill now
   80a6c:	4b0d      	ldr	r3, [pc, #52]	; (80aa4 <UART_Handler+0x7c>)
   80a6e:	681b      	ldr	r3, [r3, #0]
   80a70:	b29b      	uxth	r3, r3
   80a72:	480d      	ldr	r0, [pc, #52]	; (80aa8 <UART_Handler+0x80>)
   80a74:	4619      	mov	r1, r3
   80a76:	4b0d      	ldr	r3, [pc, #52]	; (80aac <UART_Handler+0x84>)
   80a78:	4798      	blx	r3
			parseSpeed(buffer);
   80a7a:	480b      	ldr	r0, [pc, #44]	; (80aa8 <UART_Handler+0x80>)
   80a7c:	4b0c      	ldr	r3, [pc, #48]	; (80ab0 <UART_Handler+0x88>)
   80a7e:	4798      	blx	r3
			memset(buffer, 0, sizeof(buffer));
   80a80:	4809      	ldr	r0, [pc, #36]	; (80aa8 <UART_Handler+0x80>)
   80a82:	2100      	movs	r1, #0
   80a84:	2214      	movs	r2, #20
   80a86:	4b0b      	ldr	r3, [pc, #44]	; (80ab4 <UART_Handler+0x8c>)
   80a88:	4798      	blx	r3
			i = 0;
   80a8a:	4b06      	ldr	r3, [pc, #24]	; (80aa4 <UART_Handler+0x7c>)
   80a8c:	2200      	movs	r2, #0
   80a8e:	601a      	str	r2, [r3, #0]
		}
	}
}
   80a90:	3708      	adds	r7, #8
   80a92:	46bd      	mov	sp, r7
   80a94:	bd80      	pop	{r7, pc}
   80a96:	bf00      	nop
   80a98:	400e0800 	.word	0x400e0800
   80a9c:	20000454 	.word	0x20000454
   80aa0:	000809c1 	.word	0x000809c1
   80aa4:	20000458 	.word	0x20000458
   80aa8:	20000478 	.word	0x20000478
   80aac:	00080ab9 	.word	0x00080ab9
   80ab0:	00080b1d 	.word	0x00080b1d
   80ab4:	00081511 	.word	0x00081511

00080ab8 <sendString>:

void sendString(const char* c, uint16_t length){
   80ab8:	b580      	push	{r7, lr}
   80aba:	b084      	sub	sp, #16
   80abc:	af00      	add	r7, sp, #0
   80abe:	6078      	str	r0, [r7, #4]
   80ac0:	460b      	mov	r3, r1
   80ac2:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<length;i++){
   80ac4:	2300      	movs	r3, #0
   80ac6:	60fb      	str	r3, [r7, #12]
   80ac8:	e00d      	b.n	80ae6 <sendString+0x2e>
		while(uart_putchar(*(c+i)));
   80aca:	bf00      	nop
   80acc:	68fb      	ldr	r3, [r7, #12]
   80ace:	687a      	ldr	r2, [r7, #4]
   80ad0:	4413      	add	r3, r2
   80ad2:	781b      	ldrb	r3, [r3, #0]
   80ad4:	4618      	mov	r0, r3
   80ad6:	4b07      	ldr	r3, [pc, #28]	; (80af4 <sendString+0x3c>)
   80ad8:	4798      	blx	r3
   80ada:	4603      	mov	r3, r0
   80adc:	2b00      	cmp	r3, #0
   80ade:	d1f5      	bne.n	80acc <sendString+0x14>
		}
	}
}

void sendString(const char* c, uint16_t length){
	for(int i = 0;i<length;i++){
   80ae0:	68fb      	ldr	r3, [r7, #12]
   80ae2:	3301      	adds	r3, #1
   80ae4:	60fb      	str	r3, [r7, #12]
   80ae6:	887a      	ldrh	r2, [r7, #2]
   80ae8:	68fb      	ldr	r3, [r7, #12]
   80aea:	429a      	cmp	r2, r3
   80aec:	dced      	bgt.n	80aca <sendString+0x12>
		while(uart_putchar(*(c+i)));
	}
}
   80aee:	3710      	adds	r7, #16
   80af0:	46bd      	mov	sp, r7
   80af2:	bd80      	pop	{r7, pc}
   80af4:	000809f5 	.word	0x000809f5

00080af8 <getNewSpeed>:
		i--;
	}
}

uint8_t getNewSpeed()
{
   80af8:	b480      	push	{r7}
   80afa:	af00      	add	r7, sp, #0
	if(flag12)
   80afc:	4b06      	ldr	r3, [pc, #24]	; (80b18 <getNewSpeed+0x20>)
   80afe:	781b      	ldrb	r3, [r3, #0]
   80b00:	b2db      	uxtb	r3, r3
   80b02:	2b00      	cmp	r3, #0
   80b04:	d001      	beq.n	80b0a <getNewSpeed+0x12>
	{
	//	sendString("Set:\n", 5);
		return 1;
   80b06:	2301      	movs	r3, #1
   80b08:	e000      	b.n	80b0c <getNewSpeed+0x14>
	}
	else
	{
		//sendString("UnSet:\n", 7);
		return 0;
   80b0a:	2300      	movs	r3, #0
	}
}
   80b0c:	4618      	mov	r0, r3
   80b0e:	46bd      	mov	sp, r7
   80b10:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b14:	4770      	bx	lr
   80b16:	bf00      	nop
   80b18:	20000454 	.word	0x20000454

00080b1c <parseSpeed>:

void parseSpeed(char* buffer)
{
   80b1c:	b580      	push	{r7, lr}
   80b1e:	b086      	sub	sp, #24
   80b20:	af00      	add	r7, sp, #0
   80b22:	6078      	str	r0, [r7, #4]
	sign_ST = 0;
   80b24:	4b31      	ldr	r3, [pc, #196]	; (80bec <parseSpeed+0xd0>)
   80b26:	2200      	movs	r2, #0
   80b28:	701a      	strb	r2, [r3, #0]
	sign_DR = 0;
   80b2a:	4b31      	ldr	r3, [pc, #196]	; (80bf0 <parseSpeed+0xd4>)
   80b2c:	2200      	movs	r2, #0
   80b2e:	701a      	strb	r2, [r3, #0]
	
	char* token1;
	token1 = strtok(buffer, "#");
   80b30:	6878      	ldr	r0, [r7, #4]
   80b32:	4930      	ldr	r1, [pc, #192]	; (80bf4 <parseSpeed+0xd8>)
   80b34:	4b30      	ldr	r3, [pc, #192]	; (80bf8 <parseSpeed+0xdc>)
   80b36:	4798      	blx	r3
   80b38:	6178      	str	r0, [r7, #20]
	
	if(token1 != NULL)
   80b3a:	697b      	ldr	r3, [r7, #20]
   80b3c:	2b00      	cmp	r3, #0
   80b3e:	d051      	beq.n	80be4 <parseSpeed+0xc8>
	{
		char* token2;
		token2 = strtok(NULL, "#");
   80b40:	2000      	movs	r0, #0
   80b42:	492c      	ldr	r1, [pc, #176]	; (80bf4 <parseSpeed+0xd8>)
   80b44:	4b2c      	ldr	r3, [pc, #176]	; (80bf8 <parseSpeed+0xdc>)
   80b46:	4798      	blx	r3
   80b48:	6138      	str	r0, [r7, #16]
		
		if(token2 != NULL)
   80b4a:	693b      	ldr	r3, [r7, #16]
   80b4c:	2b00      	cmp	r3, #0
   80b4e:	d049      	beq.n	80be4 <parseSpeed+0xc8>
		{
			char *end;
			percentage_ST = strtol(token1, &end, 10);
   80b50:	f107 030c 	add.w	r3, r7, #12
   80b54:	6978      	ldr	r0, [r7, #20]
   80b56:	4619      	mov	r1, r3
   80b58:	220a      	movs	r2, #10
   80b5a:	4b28      	ldr	r3, [pc, #160]	; (80bfc <parseSpeed+0xe0>)
   80b5c:	4798      	blx	r3
   80b5e:	4603      	mov	r3, r0
   80b60:	b2da      	uxtb	r2, r3
   80b62:	4b27      	ldr	r3, [pc, #156]	; (80c00 <parseSpeed+0xe4>)
   80b64:	701a      	strb	r2, [r3, #0]
			percentage_DR = strtol(token2, &end, 10);
   80b66:	f107 030c 	add.w	r3, r7, #12
   80b6a:	6938      	ldr	r0, [r7, #16]
   80b6c:	4619      	mov	r1, r3
   80b6e:	220a      	movs	r2, #10
   80b70:	4b22      	ldr	r3, [pc, #136]	; (80bfc <parseSpeed+0xe0>)
   80b72:	4798      	blx	r3
   80b74:	4603      	mov	r3, r0
   80b76:	b2da      	uxtb	r2, r3
   80b78:	4b22      	ldr	r3, [pc, #136]	; (80c04 <parseSpeed+0xe8>)
   80b7a:	701a      	strb	r2, [r3, #0]
			
			sendString("Speed ST: ", 10);
   80b7c:	4822      	ldr	r0, [pc, #136]	; (80c08 <parseSpeed+0xec>)
   80b7e:	210a      	movs	r1, #10
   80b80:	4b22      	ldr	r3, [pc, #136]	; (80c0c <parseSpeed+0xf0>)
   80b82:	4798      	blx	r3
			sendString(token1, strlen(token1));
   80b84:	6978      	ldr	r0, [r7, #20]
   80b86:	4b22      	ldr	r3, [pc, #136]	; (80c10 <parseSpeed+0xf4>)
   80b88:	4798      	blx	r3
   80b8a:	4603      	mov	r3, r0
   80b8c:	b29b      	uxth	r3, r3
   80b8e:	6978      	ldr	r0, [r7, #20]
   80b90:	4619      	mov	r1, r3
   80b92:	4b1e      	ldr	r3, [pc, #120]	; (80c0c <parseSpeed+0xf0>)
   80b94:	4798      	blx	r3
			if (strstr(token1, "-") != NULL) {
   80b96:	6978      	ldr	r0, [r7, #20]
   80b98:	212d      	movs	r1, #45	; 0x2d
   80b9a:	4b1e      	ldr	r3, [pc, #120]	; (80c14 <parseSpeed+0xf8>)
   80b9c:	4798      	blx	r3
   80b9e:	4603      	mov	r3, r0
   80ba0:	2b00      	cmp	r3, #0
   80ba2:	d002      	beq.n	80baa <parseSpeed+0x8e>
				// minus
				sign_ST = 1;
   80ba4:	4b11      	ldr	r3, [pc, #68]	; (80bec <parseSpeed+0xd0>)
   80ba6:	2201      	movs	r2, #1
   80ba8:	701a      	strb	r2, [r3, #0]
			}
			
			sendString("Speed DR: ", 10);
   80baa:	481b      	ldr	r0, [pc, #108]	; (80c18 <parseSpeed+0xfc>)
   80bac:	210a      	movs	r1, #10
   80bae:	4b17      	ldr	r3, [pc, #92]	; (80c0c <parseSpeed+0xf0>)
   80bb0:	4798      	blx	r3
			sendString(token2, strlen(token2));
   80bb2:	6938      	ldr	r0, [r7, #16]
   80bb4:	4b16      	ldr	r3, [pc, #88]	; (80c10 <parseSpeed+0xf4>)
   80bb6:	4798      	blx	r3
   80bb8:	4603      	mov	r3, r0
   80bba:	b29b      	uxth	r3, r3
   80bbc:	6938      	ldr	r0, [r7, #16]
   80bbe:	4619      	mov	r1, r3
   80bc0:	4b12      	ldr	r3, [pc, #72]	; (80c0c <parseSpeed+0xf0>)
   80bc2:	4798      	blx	r3
			if (strstr(token2, "-") != NULL) {
   80bc4:	6938      	ldr	r0, [r7, #16]
   80bc6:	212d      	movs	r1, #45	; 0x2d
   80bc8:	4b12      	ldr	r3, [pc, #72]	; (80c14 <parseSpeed+0xf8>)
   80bca:	4798      	blx	r3
   80bcc:	4603      	mov	r3, r0
   80bce:	2b00      	cmp	r3, #0
   80bd0:	d002      	beq.n	80bd8 <parseSpeed+0xbc>
				 // minus
				 sign_DR = 1;
   80bd2:	4b07      	ldr	r3, [pc, #28]	; (80bf0 <parseSpeed+0xd4>)
   80bd4:	2201      	movs	r2, #1
   80bd6:	701a      	strb	r2, [r3, #0]
			}
			
			newSpeed = 1;
   80bd8:	4b10      	ldr	r3, [pc, #64]	; (80c1c <parseSpeed+0x100>)
   80bda:	2201      	movs	r2, #1
   80bdc:	701a      	strb	r2, [r3, #0]
			flag12=1;
   80bde:	4b10      	ldr	r3, [pc, #64]	; (80c20 <parseSpeed+0x104>)
   80be0:	2201      	movs	r2, #1
   80be2:	701a      	strb	r2, [r3, #0]
		}
	}
}
   80be4:	3718      	adds	r7, #24
   80be6:	46bd      	mov	sp, r7
   80be8:	bd80      	pop	{r7, pc}
   80bea:	bf00      	nop
   80bec:	2000048e 	.word	0x2000048e
   80bf0:	2000048d 	.word	0x2000048d
   80bf4:	00081990 	.word	0x00081990
   80bf8:	000816f9 	.word	0x000816f9
   80bfc:	00081881 	.word	0x00081881
   80c00:	2000048f 	.word	0x2000048f
   80c04:	2000048c 	.word	0x2000048c
   80c08:	00081994 	.word	0x00081994
   80c0c:	00080ab9 	.word	0x00080ab9
   80c10:	00081699 	.word	0x00081699
   80c14:	000815a5 	.word	0x000815a5
   80c18:	000819a0 	.word	0x000819a0
   80c1c:	20000474 	.word	0x20000474
   80c20:	20000454 	.word	0x20000454

00080c24 <configure_uart>:

void configure_uart(void)
{
   80c24:	b580      	push	{r7, lr}
   80c26:	b082      	sub	sp, #8
   80c28:	af00      	add	r7, sp, #0
	uint32_t ul_sr;
	
	// ==> Pin configuration
	// Disable interrupts on Rx and Tx
	PIOA->PIO_IDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c2a:	4b28      	ldr	r3, [pc, #160]	; (80ccc <configure_uart+0xa8>)
   80c2c:	4a27      	ldr	r2, [pc, #156]	; (80ccc <configure_uart+0xa8>)
   80c2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
   80c30:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   80c34:	645a      	str	r2, [r3, #68]	; 0x44
	
	// Disable the PIO of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR |= PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c36:	4b25      	ldr	r3, [pc, #148]	; (80ccc <configure_uart+0xa8>)
   80c38:	4a24      	ldr	r2, [pc, #144]	; (80ccc <configure_uart+0xa8>)
   80c3a:	6852      	ldr	r2, [r2, #4]
   80c3c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   80c40:	605a      	str	r2, [r3, #4]
	
	// Read current peripheral AB select register and set the Rx and Tx pins to 0 (Peripheral A function)
	ul_sr = PIOA->PIO_ABSR;
   80c42:	4b22      	ldr	r3, [pc, #136]	; (80ccc <configure_uart+0xa8>)
   80c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80c46:	607b      	str	r3, [r7, #4]
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80c48:	4b20      	ldr	r3, [pc, #128]	; (80ccc <configure_uart+0xa8>)
   80c4a:	4a20      	ldr	r2, [pc, #128]	; (80ccc <configure_uart+0xa8>)
   80c4c:	6f11      	ldr	r1, [r2, #112]	; 0x70
   80c4e:	687a      	ldr	r2, [r7, #4]
   80c50:	400a      	ands	r2, r1
   80c52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80c56:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Enable the pull up on the Rx and Tx pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c58:	4b1c      	ldr	r3, [pc, #112]	; (80ccc <configure_uart+0xa8>)
   80c5a:	f44f 7240 	mov.w	r2, #768	; 0x300
   80c5e:	665a      	str	r2, [r3, #100]	; 0x64
	
	// ==> Actual uart configuration
	// Enable the peripheral uart controller
	PMC->PMC_PCER0 |= 1 << ID_UART;
   80c60:	4b1b      	ldr	r3, [pc, #108]	; (80cd0 <configure_uart+0xac>)
   80c62:	4a1b      	ldr	r2, [pc, #108]	; (80cd0 <configure_uart+0xac>)
   80c64:	6912      	ldr	r2, [r2, #16]
   80c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80c6a:	611a      	str	r2, [r3, #16]
	
	// Reset and disable receiver & transmitter
	UART->UART_CR |= UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80c6c:	4b19      	ldr	r3, [pc, #100]	; (80cd4 <configure_uart+0xb0>)
   80c6e:	4a19      	ldr	r2, [pc, #100]	; (80cd4 <configure_uart+0xb0>)
   80c70:	6812      	ldr	r2, [r2, #0]
   80c72:	f042 02ac 	orr.w	r2, r2, #172	; 0xac
   80c76:	601a      	str	r2, [r3, #0]
	
	// Set the baudrate to 115200
	UART->UART_BRGR |= 45; // 84000000 / 16 * x = BaudRate (write x into UART_BRGR)
   80c78:	4b16      	ldr	r3, [pc, #88]	; (80cd4 <configure_uart+0xb0>)
   80c7a:	4a16      	ldr	r2, [pc, #88]	; (80cd4 <configure_uart+0xb0>)
   80c7c:	6a12      	ldr	r2, [r2, #32]
   80c7e:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
   80c82:	621a      	str	r2, [r3, #32]
	
	// No Parity
	UART->UART_MR |= UART_MR_PAR_NO;
   80c84:	4b13      	ldr	r3, [pc, #76]	; (80cd4 <configure_uart+0xb0>)
   80c86:	4a13      	ldr	r2, [pc, #76]	; (80cd4 <configure_uart+0xb0>)
   80c88:	6852      	ldr	r2, [r2, #4]
   80c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   80c8e:	605a      	str	r2, [r3, #4]
	
	// Disable PDC channel requests
	UART->UART_PTCR |= UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80c90:	4a10      	ldr	r2, [pc, #64]	; (80cd4 <configure_uart+0xb0>)
   80c92:	4b10      	ldr	r3, [pc, #64]	; (80cd4 <configure_uart+0xb0>)
   80c94:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   80c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80c9c:	f043 0302 	orr.w	r3, r3, #2
   80ca0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	
	// Disable / Enable interrupts on end of receive
	UART->UART_IDR = 0xFFFFFFFF;
   80ca4:	4b0b      	ldr	r3, [pc, #44]	; (80cd4 <configure_uart+0xb0>)
   80ca6:	f04f 32ff 	mov.w	r2, #4294967295
   80caa:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ((IRQn_Type) ID_UART);
   80cac:	2008      	movs	r0, #8
   80cae:	4b0a      	ldr	r3, [pc, #40]	; (80cd8 <configure_uart+0xb4>)
   80cb0:	4798      	blx	r3
	UART->UART_IER = UART_IER_RXRDY;
   80cb2:	4b08      	ldr	r3, [pc, #32]	; (80cd4 <configure_uart+0xb0>)
   80cb4:	2201      	movs	r2, #1
   80cb6:	609a      	str	r2, [r3, #8]
	
	// Enable receiver and trasmitter
	UART->UART_CR |= UART_CR_RXEN | UART_CR_TXEN;
   80cb8:	4b06      	ldr	r3, [pc, #24]	; (80cd4 <configure_uart+0xb0>)
   80cba:	4a06      	ldr	r2, [pc, #24]	; (80cd4 <configure_uart+0xb0>)
   80cbc:	6812      	ldr	r2, [r2, #0]
   80cbe:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   80cc2:	601a      	str	r2, [r3, #0]
	
}
   80cc4:	3708      	adds	r7, #8
   80cc6:	46bd      	mov	sp, r7
   80cc8:	bd80      	pop	{r7, pc}
   80cca:	bf00      	nop
   80ccc:	400e0e00 	.word	0x400e0e00
   80cd0:	400e0600 	.word	0x400e0600
   80cd4:	400e0800 	.word	0x400e0800
   80cd8:	00080991 	.word	0x00080991

00080cdc <__aeabi_drsub>:
   80cdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80ce0:	e002      	b.n	80ce8 <__adddf3>
   80ce2:	bf00      	nop

00080ce4 <__aeabi_dsub>:
   80ce4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080ce8 <__adddf3>:
   80ce8:	b530      	push	{r4, r5, lr}
   80cea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80cee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80cf2:	ea94 0f05 	teq	r4, r5
   80cf6:	bf08      	it	eq
   80cf8:	ea90 0f02 	teqeq	r0, r2
   80cfc:	bf1f      	itttt	ne
   80cfe:	ea54 0c00 	orrsne.w	ip, r4, r0
   80d02:	ea55 0c02 	orrsne.w	ip, r5, r2
   80d06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80d0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80d0e:	f000 80e2 	beq.w	80ed6 <__adddf3+0x1ee>
   80d12:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80d16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80d1a:	bfb8      	it	lt
   80d1c:	426d      	neglt	r5, r5
   80d1e:	dd0c      	ble.n	80d3a <__adddf3+0x52>
   80d20:	442c      	add	r4, r5
   80d22:	ea80 0202 	eor.w	r2, r0, r2
   80d26:	ea81 0303 	eor.w	r3, r1, r3
   80d2a:	ea82 0000 	eor.w	r0, r2, r0
   80d2e:	ea83 0101 	eor.w	r1, r3, r1
   80d32:	ea80 0202 	eor.w	r2, r0, r2
   80d36:	ea81 0303 	eor.w	r3, r1, r3
   80d3a:	2d36      	cmp	r5, #54	; 0x36
   80d3c:	bf88      	it	hi
   80d3e:	bd30      	pophi	{r4, r5, pc}
   80d40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80d44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80d48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80d4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80d50:	d002      	beq.n	80d58 <__adddf3+0x70>
   80d52:	4240      	negs	r0, r0
   80d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80d58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80d5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80d60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80d64:	d002      	beq.n	80d6c <__adddf3+0x84>
   80d66:	4252      	negs	r2, r2
   80d68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80d6c:	ea94 0f05 	teq	r4, r5
   80d70:	f000 80a7 	beq.w	80ec2 <__adddf3+0x1da>
   80d74:	f1a4 0401 	sub.w	r4, r4, #1
   80d78:	f1d5 0e20 	rsbs	lr, r5, #32
   80d7c:	db0d      	blt.n	80d9a <__adddf3+0xb2>
   80d7e:	fa02 fc0e 	lsl.w	ip, r2, lr
   80d82:	fa22 f205 	lsr.w	r2, r2, r5
   80d86:	1880      	adds	r0, r0, r2
   80d88:	f141 0100 	adc.w	r1, r1, #0
   80d8c:	fa03 f20e 	lsl.w	r2, r3, lr
   80d90:	1880      	adds	r0, r0, r2
   80d92:	fa43 f305 	asr.w	r3, r3, r5
   80d96:	4159      	adcs	r1, r3
   80d98:	e00e      	b.n	80db8 <__adddf3+0xd0>
   80d9a:	f1a5 0520 	sub.w	r5, r5, #32
   80d9e:	f10e 0e20 	add.w	lr, lr, #32
   80da2:	2a01      	cmp	r2, #1
   80da4:	fa03 fc0e 	lsl.w	ip, r3, lr
   80da8:	bf28      	it	cs
   80daa:	f04c 0c02 	orrcs.w	ip, ip, #2
   80dae:	fa43 f305 	asr.w	r3, r3, r5
   80db2:	18c0      	adds	r0, r0, r3
   80db4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80db8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80dbc:	d507      	bpl.n	80dce <__adddf3+0xe6>
   80dbe:	f04f 0e00 	mov.w	lr, #0
   80dc2:	f1dc 0c00 	rsbs	ip, ip, #0
   80dc6:	eb7e 0000 	sbcs.w	r0, lr, r0
   80dca:	eb6e 0101 	sbc.w	r1, lr, r1
   80dce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80dd2:	d31b      	bcc.n	80e0c <__adddf3+0x124>
   80dd4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80dd8:	d30c      	bcc.n	80df4 <__adddf3+0x10c>
   80dda:	0849      	lsrs	r1, r1, #1
   80ddc:	ea5f 0030 	movs.w	r0, r0, rrx
   80de0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80de4:	f104 0401 	add.w	r4, r4, #1
   80de8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80dec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80df0:	f080 809a 	bcs.w	80f28 <__adddf3+0x240>
   80df4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80df8:	bf08      	it	eq
   80dfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80dfe:	f150 0000 	adcs.w	r0, r0, #0
   80e02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80e06:	ea41 0105 	orr.w	r1, r1, r5
   80e0a:	bd30      	pop	{r4, r5, pc}
   80e0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80e10:	4140      	adcs	r0, r0
   80e12:	eb41 0101 	adc.w	r1, r1, r1
   80e16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80e1a:	f1a4 0401 	sub.w	r4, r4, #1
   80e1e:	d1e9      	bne.n	80df4 <__adddf3+0x10c>
   80e20:	f091 0f00 	teq	r1, #0
   80e24:	bf04      	itt	eq
   80e26:	4601      	moveq	r1, r0
   80e28:	2000      	moveq	r0, #0
   80e2a:	fab1 f381 	clz	r3, r1
   80e2e:	bf08      	it	eq
   80e30:	3320      	addeq	r3, #32
   80e32:	f1a3 030b 	sub.w	r3, r3, #11
   80e36:	f1b3 0220 	subs.w	r2, r3, #32
   80e3a:	da0c      	bge.n	80e56 <__adddf3+0x16e>
   80e3c:	320c      	adds	r2, #12
   80e3e:	dd08      	ble.n	80e52 <__adddf3+0x16a>
   80e40:	f102 0c14 	add.w	ip, r2, #20
   80e44:	f1c2 020c 	rsb	r2, r2, #12
   80e48:	fa01 f00c 	lsl.w	r0, r1, ip
   80e4c:	fa21 f102 	lsr.w	r1, r1, r2
   80e50:	e00c      	b.n	80e6c <__adddf3+0x184>
   80e52:	f102 0214 	add.w	r2, r2, #20
   80e56:	bfd8      	it	le
   80e58:	f1c2 0c20 	rsble	ip, r2, #32
   80e5c:	fa01 f102 	lsl.w	r1, r1, r2
   80e60:	fa20 fc0c 	lsr.w	ip, r0, ip
   80e64:	bfdc      	itt	le
   80e66:	ea41 010c 	orrle.w	r1, r1, ip
   80e6a:	4090      	lslle	r0, r2
   80e6c:	1ae4      	subs	r4, r4, r3
   80e6e:	bfa2      	ittt	ge
   80e70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80e74:	4329      	orrge	r1, r5
   80e76:	bd30      	popge	{r4, r5, pc}
   80e78:	ea6f 0404 	mvn.w	r4, r4
   80e7c:	3c1f      	subs	r4, #31
   80e7e:	da1c      	bge.n	80eba <__adddf3+0x1d2>
   80e80:	340c      	adds	r4, #12
   80e82:	dc0e      	bgt.n	80ea2 <__adddf3+0x1ba>
   80e84:	f104 0414 	add.w	r4, r4, #20
   80e88:	f1c4 0220 	rsb	r2, r4, #32
   80e8c:	fa20 f004 	lsr.w	r0, r0, r4
   80e90:	fa01 f302 	lsl.w	r3, r1, r2
   80e94:	ea40 0003 	orr.w	r0, r0, r3
   80e98:	fa21 f304 	lsr.w	r3, r1, r4
   80e9c:	ea45 0103 	orr.w	r1, r5, r3
   80ea0:	bd30      	pop	{r4, r5, pc}
   80ea2:	f1c4 040c 	rsb	r4, r4, #12
   80ea6:	f1c4 0220 	rsb	r2, r4, #32
   80eaa:	fa20 f002 	lsr.w	r0, r0, r2
   80eae:	fa01 f304 	lsl.w	r3, r1, r4
   80eb2:	ea40 0003 	orr.w	r0, r0, r3
   80eb6:	4629      	mov	r1, r5
   80eb8:	bd30      	pop	{r4, r5, pc}
   80eba:	fa21 f004 	lsr.w	r0, r1, r4
   80ebe:	4629      	mov	r1, r5
   80ec0:	bd30      	pop	{r4, r5, pc}
   80ec2:	f094 0f00 	teq	r4, #0
   80ec6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80eca:	bf06      	itte	eq
   80ecc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80ed0:	3401      	addeq	r4, #1
   80ed2:	3d01      	subne	r5, #1
   80ed4:	e74e      	b.n	80d74 <__adddf3+0x8c>
   80ed6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80eda:	bf18      	it	ne
   80edc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80ee0:	d029      	beq.n	80f36 <__adddf3+0x24e>
   80ee2:	ea94 0f05 	teq	r4, r5
   80ee6:	bf08      	it	eq
   80ee8:	ea90 0f02 	teqeq	r0, r2
   80eec:	d005      	beq.n	80efa <__adddf3+0x212>
   80eee:	ea54 0c00 	orrs.w	ip, r4, r0
   80ef2:	bf04      	itt	eq
   80ef4:	4619      	moveq	r1, r3
   80ef6:	4610      	moveq	r0, r2
   80ef8:	bd30      	pop	{r4, r5, pc}
   80efa:	ea91 0f03 	teq	r1, r3
   80efe:	bf1e      	ittt	ne
   80f00:	2100      	movne	r1, #0
   80f02:	2000      	movne	r0, #0
   80f04:	bd30      	popne	{r4, r5, pc}
   80f06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80f0a:	d105      	bne.n	80f18 <__adddf3+0x230>
   80f0c:	0040      	lsls	r0, r0, #1
   80f0e:	4149      	adcs	r1, r1
   80f10:	bf28      	it	cs
   80f12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80f16:	bd30      	pop	{r4, r5, pc}
   80f18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80f1c:	bf3c      	itt	cc
   80f1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80f22:	bd30      	popcc	{r4, r5, pc}
   80f24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80f2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80f30:	f04f 0000 	mov.w	r0, #0
   80f34:	bd30      	pop	{r4, r5, pc}
   80f36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80f3a:	bf1a      	itte	ne
   80f3c:	4619      	movne	r1, r3
   80f3e:	4610      	movne	r0, r2
   80f40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80f44:	bf1c      	itt	ne
   80f46:	460b      	movne	r3, r1
   80f48:	4602      	movne	r2, r0
   80f4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80f4e:	bf06      	itte	eq
   80f50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80f54:	ea91 0f03 	teqeq	r1, r3
   80f58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80f5c:	bd30      	pop	{r4, r5, pc}
   80f5e:	bf00      	nop

00080f60 <__aeabi_ui2d>:
   80f60:	f090 0f00 	teq	r0, #0
   80f64:	bf04      	itt	eq
   80f66:	2100      	moveq	r1, #0
   80f68:	4770      	bxeq	lr
   80f6a:	b530      	push	{r4, r5, lr}
   80f6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80f70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80f74:	f04f 0500 	mov.w	r5, #0
   80f78:	f04f 0100 	mov.w	r1, #0
   80f7c:	e750      	b.n	80e20 <__adddf3+0x138>
   80f7e:	bf00      	nop

00080f80 <__aeabi_i2d>:
   80f80:	f090 0f00 	teq	r0, #0
   80f84:	bf04      	itt	eq
   80f86:	2100      	moveq	r1, #0
   80f88:	4770      	bxeq	lr
   80f8a:	b530      	push	{r4, r5, lr}
   80f8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80f90:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80f94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80f98:	bf48      	it	mi
   80f9a:	4240      	negmi	r0, r0
   80f9c:	f04f 0100 	mov.w	r1, #0
   80fa0:	e73e      	b.n	80e20 <__adddf3+0x138>
   80fa2:	bf00      	nop

00080fa4 <__aeabi_f2d>:
   80fa4:	0042      	lsls	r2, r0, #1
   80fa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80faa:	ea4f 0131 	mov.w	r1, r1, rrx
   80fae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80fb2:	bf1f      	itttt	ne
   80fb4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80fb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80fbc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80fc0:	4770      	bxne	lr
   80fc2:	f092 0f00 	teq	r2, #0
   80fc6:	bf14      	ite	ne
   80fc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80fcc:	4770      	bxeq	lr
   80fce:	b530      	push	{r4, r5, lr}
   80fd0:	f44f 7460 	mov.w	r4, #896	; 0x380
   80fd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80fd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80fdc:	e720      	b.n	80e20 <__adddf3+0x138>
   80fde:	bf00      	nop

00080fe0 <__aeabi_ul2d>:
   80fe0:	ea50 0201 	orrs.w	r2, r0, r1
   80fe4:	bf08      	it	eq
   80fe6:	4770      	bxeq	lr
   80fe8:	b530      	push	{r4, r5, lr}
   80fea:	f04f 0500 	mov.w	r5, #0
   80fee:	e00a      	b.n	81006 <__aeabi_l2d+0x16>

00080ff0 <__aeabi_l2d>:
   80ff0:	ea50 0201 	orrs.w	r2, r0, r1
   80ff4:	bf08      	it	eq
   80ff6:	4770      	bxeq	lr
   80ff8:	b530      	push	{r4, r5, lr}
   80ffa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80ffe:	d502      	bpl.n	81006 <__aeabi_l2d+0x16>
   81000:	4240      	negs	r0, r0
   81002:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81006:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8100a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8100e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81012:	f43f aedc 	beq.w	80dce <__adddf3+0xe6>
   81016:	f04f 0203 	mov.w	r2, #3
   8101a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8101e:	bf18      	it	ne
   81020:	3203      	addne	r2, #3
   81022:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81026:	bf18      	it	ne
   81028:	3203      	addne	r2, #3
   8102a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8102e:	f1c2 0320 	rsb	r3, r2, #32
   81032:	fa00 fc03 	lsl.w	ip, r0, r3
   81036:	fa20 f002 	lsr.w	r0, r0, r2
   8103a:	fa01 fe03 	lsl.w	lr, r1, r3
   8103e:	ea40 000e 	orr.w	r0, r0, lr
   81042:	fa21 f102 	lsr.w	r1, r1, r2
   81046:	4414      	add	r4, r2
   81048:	e6c1      	b.n	80dce <__adddf3+0xe6>
   8104a:	bf00      	nop

0008104c <__aeabi_dmul>:
   8104c:	b570      	push	{r4, r5, r6, lr}
   8104e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81052:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81056:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8105a:	bf1d      	ittte	ne
   8105c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81060:	ea94 0f0c 	teqne	r4, ip
   81064:	ea95 0f0c 	teqne	r5, ip
   81068:	f000 f8de 	bleq	81228 <__aeabi_dmul+0x1dc>
   8106c:	442c      	add	r4, r5
   8106e:	ea81 0603 	eor.w	r6, r1, r3
   81072:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81076:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8107a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8107e:	bf18      	it	ne
   81080:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81084:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8108c:	d038      	beq.n	81100 <__aeabi_dmul+0xb4>
   8108e:	fba0 ce02 	umull	ip, lr, r0, r2
   81092:	f04f 0500 	mov.w	r5, #0
   81096:	fbe1 e502 	umlal	lr, r5, r1, r2
   8109a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8109e:	fbe0 e503 	umlal	lr, r5, r0, r3
   810a2:	f04f 0600 	mov.w	r6, #0
   810a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   810aa:	f09c 0f00 	teq	ip, #0
   810ae:	bf18      	it	ne
   810b0:	f04e 0e01 	orrne.w	lr, lr, #1
   810b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   810b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   810bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   810c0:	d204      	bcs.n	810cc <__aeabi_dmul+0x80>
   810c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   810c6:	416d      	adcs	r5, r5
   810c8:	eb46 0606 	adc.w	r6, r6, r6
   810cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   810d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   810d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   810d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   810dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   810e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   810e4:	bf88      	it	hi
   810e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   810ea:	d81e      	bhi.n	8112a <__aeabi_dmul+0xde>
   810ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   810f0:	bf08      	it	eq
   810f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   810f6:	f150 0000 	adcs.w	r0, r0, #0
   810fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   810fe:	bd70      	pop	{r4, r5, r6, pc}
   81100:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81104:	ea46 0101 	orr.w	r1, r6, r1
   81108:	ea40 0002 	orr.w	r0, r0, r2
   8110c:	ea81 0103 	eor.w	r1, r1, r3
   81110:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81114:	bfc2      	ittt	gt
   81116:	ebd4 050c 	rsbsgt	r5, r4, ip
   8111a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8111e:	bd70      	popgt	{r4, r5, r6, pc}
   81120:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81124:	f04f 0e00 	mov.w	lr, #0
   81128:	3c01      	subs	r4, #1
   8112a:	f300 80ab 	bgt.w	81284 <__aeabi_dmul+0x238>
   8112e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81132:	bfde      	ittt	le
   81134:	2000      	movle	r0, #0
   81136:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8113a:	bd70      	pople	{r4, r5, r6, pc}
   8113c:	f1c4 0400 	rsb	r4, r4, #0
   81140:	3c20      	subs	r4, #32
   81142:	da35      	bge.n	811b0 <__aeabi_dmul+0x164>
   81144:	340c      	adds	r4, #12
   81146:	dc1b      	bgt.n	81180 <__aeabi_dmul+0x134>
   81148:	f104 0414 	add.w	r4, r4, #20
   8114c:	f1c4 0520 	rsb	r5, r4, #32
   81150:	fa00 f305 	lsl.w	r3, r0, r5
   81154:	fa20 f004 	lsr.w	r0, r0, r4
   81158:	fa01 f205 	lsl.w	r2, r1, r5
   8115c:	ea40 0002 	orr.w	r0, r0, r2
   81160:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81164:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81168:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8116c:	fa21 f604 	lsr.w	r6, r1, r4
   81170:	eb42 0106 	adc.w	r1, r2, r6
   81174:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81178:	bf08      	it	eq
   8117a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8117e:	bd70      	pop	{r4, r5, r6, pc}
   81180:	f1c4 040c 	rsb	r4, r4, #12
   81184:	f1c4 0520 	rsb	r5, r4, #32
   81188:	fa00 f304 	lsl.w	r3, r0, r4
   8118c:	fa20 f005 	lsr.w	r0, r0, r5
   81190:	fa01 f204 	lsl.w	r2, r1, r4
   81194:	ea40 0002 	orr.w	r0, r0, r2
   81198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8119c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   811a0:	f141 0100 	adc.w	r1, r1, #0
   811a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   811a8:	bf08      	it	eq
   811aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   811ae:	bd70      	pop	{r4, r5, r6, pc}
   811b0:	f1c4 0520 	rsb	r5, r4, #32
   811b4:	fa00 f205 	lsl.w	r2, r0, r5
   811b8:	ea4e 0e02 	orr.w	lr, lr, r2
   811bc:	fa20 f304 	lsr.w	r3, r0, r4
   811c0:	fa01 f205 	lsl.w	r2, r1, r5
   811c4:	ea43 0302 	orr.w	r3, r3, r2
   811c8:	fa21 f004 	lsr.w	r0, r1, r4
   811cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   811d0:	fa21 f204 	lsr.w	r2, r1, r4
   811d4:	ea20 0002 	bic.w	r0, r0, r2
   811d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   811dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   811e0:	bf08      	it	eq
   811e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   811e6:	bd70      	pop	{r4, r5, r6, pc}
   811e8:	f094 0f00 	teq	r4, #0
   811ec:	d10f      	bne.n	8120e <__aeabi_dmul+0x1c2>
   811ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   811f2:	0040      	lsls	r0, r0, #1
   811f4:	eb41 0101 	adc.w	r1, r1, r1
   811f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   811fc:	bf08      	it	eq
   811fe:	3c01      	subeq	r4, #1
   81200:	d0f7      	beq.n	811f2 <__aeabi_dmul+0x1a6>
   81202:	ea41 0106 	orr.w	r1, r1, r6
   81206:	f095 0f00 	teq	r5, #0
   8120a:	bf18      	it	ne
   8120c:	4770      	bxne	lr
   8120e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81212:	0052      	lsls	r2, r2, #1
   81214:	eb43 0303 	adc.w	r3, r3, r3
   81218:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8121c:	bf08      	it	eq
   8121e:	3d01      	subeq	r5, #1
   81220:	d0f7      	beq.n	81212 <__aeabi_dmul+0x1c6>
   81222:	ea43 0306 	orr.w	r3, r3, r6
   81226:	4770      	bx	lr
   81228:	ea94 0f0c 	teq	r4, ip
   8122c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81230:	bf18      	it	ne
   81232:	ea95 0f0c 	teqne	r5, ip
   81236:	d00c      	beq.n	81252 <__aeabi_dmul+0x206>
   81238:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8123c:	bf18      	it	ne
   8123e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81242:	d1d1      	bne.n	811e8 <__aeabi_dmul+0x19c>
   81244:	ea81 0103 	eor.w	r1, r1, r3
   81248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8124c:	f04f 0000 	mov.w	r0, #0
   81250:	bd70      	pop	{r4, r5, r6, pc}
   81252:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81256:	bf06      	itte	eq
   81258:	4610      	moveq	r0, r2
   8125a:	4619      	moveq	r1, r3
   8125c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81260:	d019      	beq.n	81296 <__aeabi_dmul+0x24a>
   81262:	ea94 0f0c 	teq	r4, ip
   81266:	d102      	bne.n	8126e <__aeabi_dmul+0x222>
   81268:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8126c:	d113      	bne.n	81296 <__aeabi_dmul+0x24a>
   8126e:	ea95 0f0c 	teq	r5, ip
   81272:	d105      	bne.n	81280 <__aeabi_dmul+0x234>
   81274:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81278:	bf1c      	itt	ne
   8127a:	4610      	movne	r0, r2
   8127c:	4619      	movne	r1, r3
   8127e:	d10a      	bne.n	81296 <__aeabi_dmul+0x24a>
   81280:	ea81 0103 	eor.w	r1, r1, r3
   81284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81288:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8128c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81290:	f04f 0000 	mov.w	r0, #0
   81294:	bd70      	pop	{r4, r5, r6, pc}
   81296:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8129a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8129e:	bd70      	pop	{r4, r5, r6, pc}

000812a0 <__aeabi_ddiv>:
   812a0:	b570      	push	{r4, r5, r6, lr}
   812a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   812a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   812aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   812ae:	bf1d      	ittte	ne
   812b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   812b4:	ea94 0f0c 	teqne	r4, ip
   812b8:	ea95 0f0c 	teqne	r5, ip
   812bc:	f000 f8a7 	bleq	8140e <__aeabi_ddiv+0x16e>
   812c0:	eba4 0405 	sub.w	r4, r4, r5
   812c4:	ea81 0e03 	eor.w	lr, r1, r3
   812c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   812cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   812d0:	f000 8088 	beq.w	813e4 <__aeabi_ddiv+0x144>
   812d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   812d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   812dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   812e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   812e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   812e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   812ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   812f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   812f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   812f8:	429d      	cmp	r5, r3
   812fa:	bf08      	it	eq
   812fc:	4296      	cmpeq	r6, r2
   812fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81302:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81306:	d202      	bcs.n	8130e <__aeabi_ddiv+0x6e>
   81308:	085b      	lsrs	r3, r3, #1
   8130a:	ea4f 0232 	mov.w	r2, r2, rrx
   8130e:	1ab6      	subs	r6, r6, r2
   81310:	eb65 0503 	sbc.w	r5, r5, r3
   81314:	085b      	lsrs	r3, r3, #1
   81316:	ea4f 0232 	mov.w	r2, r2, rrx
   8131a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8131e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81322:	ebb6 0e02 	subs.w	lr, r6, r2
   81326:	eb75 0e03 	sbcs.w	lr, r5, r3
   8132a:	bf22      	ittt	cs
   8132c:	1ab6      	subcs	r6, r6, r2
   8132e:	4675      	movcs	r5, lr
   81330:	ea40 000c 	orrcs.w	r0, r0, ip
   81334:	085b      	lsrs	r3, r3, #1
   81336:	ea4f 0232 	mov.w	r2, r2, rrx
   8133a:	ebb6 0e02 	subs.w	lr, r6, r2
   8133e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81342:	bf22      	ittt	cs
   81344:	1ab6      	subcs	r6, r6, r2
   81346:	4675      	movcs	r5, lr
   81348:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8134c:	085b      	lsrs	r3, r3, #1
   8134e:	ea4f 0232 	mov.w	r2, r2, rrx
   81352:	ebb6 0e02 	subs.w	lr, r6, r2
   81356:	eb75 0e03 	sbcs.w	lr, r5, r3
   8135a:	bf22      	ittt	cs
   8135c:	1ab6      	subcs	r6, r6, r2
   8135e:	4675      	movcs	r5, lr
   81360:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81364:	085b      	lsrs	r3, r3, #1
   81366:	ea4f 0232 	mov.w	r2, r2, rrx
   8136a:	ebb6 0e02 	subs.w	lr, r6, r2
   8136e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81372:	bf22      	ittt	cs
   81374:	1ab6      	subcs	r6, r6, r2
   81376:	4675      	movcs	r5, lr
   81378:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8137c:	ea55 0e06 	orrs.w	lr, r5, r6
   81380:	d018      	beq.n	813b4 <__aeabi_ddiv+0x114>
   81382:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81386:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8138a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8138e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81392:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81396:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8139a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8139e:	d1c0      	bne.n	81322 <__aeabi_ddiv+0x82>
   813a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813a4:	d10b      	bne.n	813be <__aeabi_ddiv+0x11e>
   813a6:	ea41 0100 	orr.w	r1, r1, r0
   813aa:	f04f 0000 	mov.w	r0, #0
   813ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   813b2:	e7b6      	b.n	81322 <__aeabi_ddiv+0x82>
   813b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813b8:	bf04      	itt	eq
   813ba:	4301      	orreq	r1, r0
   813bc:	2000      	moveq	r0, #0
   813be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   813c2:	bf88      	it	hi
   813c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   813c8:	f63f aeaf 	bhi.w	8112a <__aeabi_dmul+0xde>
   813cc:	ebb5 0c03 	subs.w	ip, r5, r3
   813d0:	bf04      	itt	eq
   813d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   813d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   813da:	f150 0000 	adcs.w	r0, r0, #0
   813de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   813e2:	bd70      	pop	{r4, r5, r6, pc}
   813e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   813e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   813ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   813f0:	bfc2      	ittt	gt
   813f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   813f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   813fa:	bd70      	popgt	{r4, r5, r6, pc}
   813fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81400:	f04f 0e00 	mov.w	lr, #0
   81404:	3c01      	subs	r4, #1
   81406:	e690      	b.n	8112a <__aeabi_dmul+0xde>
   81408:	ea45 0e06 	orr.w	lr, r5, r6
   8140c:	e68d      	b.n	8112a <__aeabi_dmul+0xde>
   8140e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81412:	ea94 0f0c 	teq	r4, ip
   81416:	bf08      	it	eq
   81418:	ea95 0f0c 	teqeq	r5, ip
   8141c:	f43f af3b 	beq.w	81296 <__aeabi_dmul+0x24a>
   81420:	ea94 0f0c 	teq	r4, ip
   81424:	d10a      	bne.n	8143c <__aeabi_ddiv+0x19c>
   81426:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8142a:	f47f af34 	bne.w	81296 <__aeabi_dmul+0x24a>
   8142e:	ea95 0f0c 	teq	r5, ip
   81432:	f47f af25 	bne.w	81280 <__aeabi_dmul+0x234>
   81436:	4610      	mov	r0, r2
   81438:	4619      	mov	r1, r3
   8143a:	e72c      	b.n	81296 <__aeabi_dmul+0x24a>
   8143c:	ea95 0f0c 	teq	r5, ip
   81440:	d106      	bne.n	81450 <__aeabi_ddiv+0x1b0>
   81442:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81446:	f43f aefd 	beq.w	81244 <__aeabi_dmul+0x1f8>
   8144a:	4610      	mov	r0, r2
   8144c:	4619      	mov	r1, r3
   8144e:	e722      	b.n	81296 <__aeabi_dmul+0x24a>
   81450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81454:	bf18      	it	ne
   81456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8145a:	f47f aec5 	bne.w	811e8 <__aeabi_dmul+0x19c>
   8145e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81462:	f47f af0d 	bne.w	81280 <__aeabi_dmul+0x234>
   81466:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8146a:	f47f aeeb 	bne.w	81244 <__aeabi_dmul+0x1f8>
   8146e:	e712      	b.n	81296 <__aeabi_dmul+0x24a>

00081470 <__aeabi_d2iz>:
   81470:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81474:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81478:	d215      	bcs.n	814a6 <__aeabi_d2iz+0x36>
   8147a:	d511      	bpl.n	814a0 <__aeabi_d2iz+0x30>
   8147c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81480:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81484:	d912      	bls.n	814ac <__aeabi_d2iz+0x3c>
   81486:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8148a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8148e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81492:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81496:	fa23 f002 	lsr.w	r0, r3, r2
   8149a:	bf18      	it	ne
   8149c:	4240      	negne	r0, r0
   8149e:	4770      	bx	lr
   814a0:	f04f 0000 	mov.w	r0, #0
   814a4:	4770      	bx	lr
   814a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   814aa:	d105      	bne.n	814b8 <__aeabi_d2iz+0x48>
   814ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   814b0:	bf08      	it	eq
   814b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   814b6:	4770      	bx	lr
   814b8:	f04f 0000 	mov.w	r0, #0
   814bc:	4770      	bx	lr
   814be:	bf00      	nop

000814c0 <__libc_init_array>:
   814c0:	b570      	push	{r4, r5, r6, lr}
   814c2:	4e0f      	ldr	r6, [pc, #60]	; (81500 <__libc_init_array+0x40>)
   814c4:	4d0f      	ldr	r5, [pc, #60]	; (81504 <__libc_init_array+0x44>)
   814c6:	1b76      	subs	r6, r6, r5
   814c8:	10b6      	asrs	r6, r6, #2
   814ca:	d007      	beq.n	814dc <__libc_init_array+0x1c>
   814cc:	3d04      	subs	r5, #4
   814ce:	2400      	movs	r4, #0
   814d0:	3401      	adds	r4, #1
   814d2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   814d6:	4798      	blx	r3
   814d8:	42a6      	cmp	r6, r4
   814da:	d1f9      	bne.n	814d0 <__libc_init_array+0x10>
   814dc:	4e0a      	ldr	r6, [pc, #40]	; (81508 <__libc_init_array+0x48>)
   814de:	4d0b      	ldr	r5, [pc, #44]	; (8150c <__libc_init_array+0x4c>)
   814e0:	f000 faea 	bl	81ab8 <_init>
   814e4:	1b76      	subs	r6, r6, r5
   814e6:	10b6      	asrs	r6, r6, #2
   814e8:	d008      	beq.n	814fc <__libc_init_array+0x3c>
   814ea:	3d04      	subs	r5, #4
   814ec:	2400      	movs	r4, #0
   814ee:	3401      	adds	r4, #1
   814f0:	f855 3f04 	ldr.w	r3, [r5, #4]!
   814f4:	4798      	blx	r3
   814f6:	42a6      	cmp	r6, r4
   814f8:	d1f9      	bne.n	814ee <__libc_init_array+0x2e>
   814fa:	bd70      	pop	{r4, r5, r6, pc}
   814fc:	bd70      	pop	{r4, r5, r6, pc}
   814fe:	bf00      	nop
   81500:	00081ac4 	.word	0x00081ac4
   81504:	00081ac4 	.word	0x00081ac4
   81508:	00081acc 	.word	0x00081acc
   8150c:	00081ac4 	.word	0x00081ac4

00081510 <memset>:
   81510:	b4f0      	push	{r4, r5, r6, r7}
   81512:	0784      	lsls	r4, r0, #30
   81514:	d043      	beq.n	8159e <memset+0x8e>
   81516:	1e54      	subs	r4, r2, #1
   81518:	2a00      	cmp	r2, #0
   8151a:	d03e      	beq.n	8159a <memset+0x8a>
   8151c:	b2cd      	uxtb	r5, r1
   8151e:	4603      	mov	r3, r0
   81520:	e003      	b.n	8152a <memset+0x1a>
   81522:	1e62      	subs	r2, r4, #1
   81524:	2c00      	cmp	r4, #0
   81526:	d038      	beq.n	8159a <memset+0x8a>
   81528:	4614      	mov	r4, r2
   8152a:	f803 5b01 	strb.w	r5, [r3], #1
   8152e:	079a      	lsls	r2, r3, #30
   81530:	d1f7      	bne.n	81522 <memset+0x12>
   81532:	2c03      	cmp	r4, #3
   81534:	d92a      	bls.n	8158c <memset+0x7c>
   81536:	b2cd      	uxtb	r5, r1
   81538:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8153c:	2c0f      	cmp	r4, #15
   8153e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81542:	d915      	bls.n	81570 <memset+0x60>
   81544:	f1a4 0710 	sub.w	r7, r4, #16
   81548:	093f      	lsrs	r7, r7, #4
   8154a:	f103 0610 	add.w	r6, r3, #16
   8154e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81552:	461a      	mov	r2, r3
   81554:	6015      	str	r5, [r2, #0]
   81556:	6055      	str	r5, [r2, #4]
   81558:	6095      	str	r5, [r2, #8]
   8155a:	60d5      	str	r5, [r2, #12]
   8155c:	3210      	adds	r2, #16
   8155e:	42b2      	cmp	r2, r6
   81560:	d1f8      	bne.n	81554 <memset+0x44>
   81562:	f004 040f 	and.w	r4, r4, #15
   81566:	3701      	adds	r7, #1
   81568:	2c03      	cmp	r4, #3
   8156a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8156e:	d90d      	bls.n	8158c <memset+0x7c>
   81570:	461e      	mov	r6, r3
   81572:	4622      	mov	r2, r4
   81574:	3a04      	subs	r2, #4
   81576:	2a03      	cmp	r2, #3
   81578:	f846 5b04 	str.w	r5, [r6], #4
   8157c:	d8fa      	bhi.n	81574 <memset+0x64>
   8157e:	1f22      	subs	r2, r4, #4
   81580:	f022 0203 	bic.w	r2, r2, #3
   81584:	3204      	adds	r2, #4
   81586:	4413      	add	r3, r2
   81588:	f004 0403 	and.w	r4, r4, #3
   8158c:	b12c      	cbz	r4, 8159a <memset+0x8a>
   8158e:	b2c9      	uxtb	r1, r1
   81590:	441c      	add	r4, r3
   81592:	f803 1b01 	strb.w	r1, [r3], #1
   81596:	42a3      	cmp	r3, r4
   81598:	d1fb      	bne.n	81592 <memset+0x82>
   8159a:	bcf0      	pop	{r4, r5, r6, r7}
   8159c:	4770      	bx	lr
   8159e:	4614      	mov	r4, r2
   815a0:	4603      	mov	r3, r0
   815a2:	e7c6      	b.n	81532 <memset+0x22>

000815a4 <strchr>:
   815a4:	b2c9      	uxtb	r1, r1
   815a6:	b4f0      	push	{r4, r5, r6, r7}
   815a8:	2900      	cmp	r1, #0
   815aa:	d047      	beq.n	8163c <strchr+0x98>
   815ac:	0785      	lsls	r5, r0, #30
   815ae:	d00f      	beq.n	815d0 <strchr+0x2c>
   815b0:	7802      	ldrb	r2, [r0, #0]
   815b2:	2a00      	cmp	r2, #0
   815b4:	d03f      	beq.n	81636 <strchr+0x92>
   815b6:	4291      	cmp	r1, r2
   815b8:	d03e      	beq.n	81638 <strchr+0x94>
   815ba:	1c43      	adds	r3, r0, #1
   815bc:	e005      	b.n	815ca <strchr+0x26>
   815be:	f813 2b01 	ldrb.w	r2, [r3], #1
   815c2:	2a00      	cmp	r2, #0
   815c4:	d037      	beq.n	81636 <strchr+0x92>
   815c6:	4291      	cmp	r1, r2
   815c8:	d036      	beq.n	81638 <strchr+0x94>
   815ca:	079a      	lsls	r2, r3, #30
   815cc:	4618      	mov	r0, r3
   815ce:	d1f6      	bne.n	815be <strchr+0x1a>
   815d0:	6803      	ldr	r3, [r0, #0]
   815d2:	ea41 2701 	orr.w	r7, r1, r1, lsl #8
   815d6:	ea47 4707 	orr.w	r7, r7, r7, lsl #16
   815da:	ea83 0207 	eor.w	r2, r3, r7
   815de:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   815e2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   815e6:	ea25 0202 	bic.w	r2, r5, r2
   815ea:	ea24 0303 	bic.w	r3, r4, r3
   815ee:	4313      	orrs	r3, r2
   815f0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   815f4:	d111      	bne.n	8161a <strchr+0x76>
   815f6:	1d02      	adds	r2, r0, #4
   815f8:	4610      	mov	r0, r2
   815fa:	f852 3b04 	ldr.w	r3, [r2], #4
   815fe:	ea83 0407 	eor.w	r4, r3, r7
   81602:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   81606:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   8160a:	ea26 0404 	bic.w	r4, r6, r4
   8160e:	ea25 0303 	bic.w	r3, r5, r3
   81612:	4323      	orrs	r3, r4
   81614:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   81618:	d0ee      	beq.n	815f8 <strchr+0x54>
   8161a:	7803      	ldrb	r3, [r0, #0]
   8161c:	2b00      	cmp	r3, #0
   8161e:	d039      	beq.n	81694 <strchr+0xf0>
   81620:	4299      	cmp	r1, r3
   81622:	d009      	beq.n	81638 <strchr+0x94>
   81624:	1c43      	adds	r3, r0, #1
   81626:	e001      	b.n	8162c <strchr+0x88>
   81628:	4291      	cmp	r1, r2
   8162a:	d005      	beq.n	81638 <strchr+0x94>
   8162c:	4618      	mov	r0, r3
   8162e:	f813 2b01 	ldrb.w	r2, [r3], #1
   81632:	2a00      	cmp	r2, #0
   81634:	d1f8      	bne.n	81628 <strchr+0x84>
   81636:	4610      	mov	r0, r2
   81638:	bcf0      	pop	{r4, r5, r6, r7}
   8163a:	4770      	bx	lr
   8163c:	0784      	lsls	r4, r0, #30
   8163e:	d00b      	beq.n	81658 <strchr+0xb4>
   81640:	7803      	ldrb	r3, [r0, #0]
   81642:	2b00      	cmp	r3, #0
   81644:	d0f8      	beq.n	81638 <strchr+0x94>
   81646:	1c43      	adds	r3, r0, #1
   81648:	e003      	b.n	81652 <strchr+0xae>
   8164a:	7802      	ldrb	r2, [r0, #0]
   8164c:	3301      	adds	r3, #1
   8164e:	2a00      	cmp	r2, #0
   81650:	d0f2      	beq.n	81638 <strchr+0x94>
   81652:	0799      	lsls	r1, r3, #30
   81654:	4618      	mov	r0, r3
   81656:	d1f8      	bne.n	8164a <strchr+0xa6>
   81658:	6803      	ldr	r3, [r0, #0]
   8165a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8165e:	ea22 0303 	bic.w	r3, r2, r3
   81662:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   81666:	d10a      	bne.n	8167e <strchr+0xda>
   81668:	1d03      	adds	r3, r0, #4
   8166a:	4618      	mov	r0, r3
   8166c:	f853 2b04 	ldr.w	r2, [r3], #4
   81670:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   81674:	ea21 0202 	bic.w	r2, r1, r2
   81678:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   8167c:	d0f5      	beq.n	8166a <strchr+0xc6>
   8167e:	7803      	ldrb	r3, [r0, #0]
   81680:	2b00      	cmp	r3, #0
   81682:	d0d9      	beq.n	81638 <strchr+0x94>
   81684:	1c43      	adds	r3, r0, #1
   81686:	781a      	ldrb	r2, [r3, #0]
   81688:	4618      	mov	r0, r3
   8168a:	3301      	adds	r3, #1
   8168c:	2a00      	cmp	r2, #0
   8168e:	d1fa      	bne.n	81686 <strchr+0xe2>
   81690:	bcf0      	pop	{r4, r5, r6, r7}
   81692:	4770      	bx	lr
   81694:	4618      	mov	r0, r3
   81696:	e7cf      	b.n	81638 <strchr+0x94>

00081698 <strlen>:
   81698:	f020 0103 	bic.w	r1, r0, #3
   8169c:	f010 0003 	ands.w	r0, r0, #3
   816a0:	f1c0 0000 	rsb	r0, r0, #0
   816a4:	f851 3b04 	ldr.w	r3, [r1], #4
   816a8:	f100 0c04 	add.w	ip, r0, #4
   816ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   816b0:	f06f 0200 	mvn.w	r2, #0
   816b4:	bf1c      	itt	ne
   816b6:	fa22 f20c 	lsrne.w	r2, r2, ip
   816ba:	4313      	orrne	r3, r2
   816bc:	f04f 0c01 	mov.w	ip, #1
   816c0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   816c4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   816c8:	eba3 020c 	sub.w	r2, r3, ip
   816cc:	ea22 0203 	bic.w	r2, r2, r3
   816d0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   816d4:	bf04      	itt	eq
   816d6:	f851 3b04 	ldreq.w	r3, [r1], #4
   816da:	3004      	addeq	r0, #4
   816dc:	d0f4      	beq.n	816c8 <strlen+0x30>
   816de:	f013 0fff 	tst.w	r3, #255	; 0xff
   816e2:	bf1f      	itttt	ne
   816e4:	3001      	addne	r0, #1
   816e6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   816ea:	3001      	addne	r0, #1
   816ec:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   816f0:	bf18      	it	ne
   816f2:	3001      	addne	r0, #1
   816f4:	4770      	bx	lr
   816f6:	bf00      	nop

000816f8 <strtok>:
   816f8:	4a02      	ldr	r2, [pc, #8]	; (81704 <strtok+0xc>)
   816fa:	2301      	movs	r3, #1
   816fc:	6812      	ldr	r2, [r2, #0]
   816fe:	325c      	adds	r2, #92	; 0x5c
   81700:	f000 b802 	b.w	81708 <__strtok_r>
   81704:	20000430 	.word	0x20000430

00081708 <__strtok_r>:
   81708:	b4f0      	push	{r4, r5, r6, r7}
   8170a:	b320      	cbz	r0, 81756 <__strtok_r+0x4e>
   8170c:	4607      	mov	r7, r0
   8170e:	f817 6b01 	ldrb.w	r6, [r7], #1
   81712:	460d      	mov	r5, r1
   81714:	e001      	b.n	8171a <__strtok_r+0x12>
   81716:	42a6      	cmp	r6, r4
   81718:	d016      	beq.n	81748 <__strtok_r+0x40>
   8171a:	f815 4b01 	ldrb.w	r4, [r5], #1
   8171e:	2c00      	cmp	r4, #0
   81720:	d1f9      	bne.n	81716 <__strtok_r+0xe>
   81722:	b1ee      	cbz	r6, 81760 <__strtok_r+0x58>
   81724:	463e      	mov	r6, r7
   81726:	f816 5b01 	ldrb.w	r5, [r6], #1
   8172a:	460c      	mov	r4, r1
   8172c:	e000      	b.n	81730 <__strtok_r+0x28>
   8172e:	b173      	cbz	r3, 8174e <__strtok_r+0x46>
   81730:	f814 3b01 	ldrb.w	r3, [r4], #1
   81734:	42ab      	cmp	r3, r5
   81736:	d1fa      	bne.n	8172e <__strtok_r+0x26>
   81738:	b15d      	cbz	r5, 81752 <__strtok_r+0x4a>
   8173a:	2300      	movs	r3, #0
   8173c:	703b      	strb	r3, [r7, #0]
   8173e:	6016      	str	r6, [r2, #0]
   81740:	4606      	mov	r6, r0
   81742:	4630      	mov	r0, r6
   81744:	bcf0      	pop	{r4, r5, r6, r7}
   81746:	4770      	bx	lr
   81748:	b163      	cbz	r3, 81764 <__strtok_r+0x5c>
   8174a:	4638      	mov	r0, r7
   8174c:	e7de      	b.n	8170c <__strtok_r+0x4>
   8174e:	4637      	mov	r7, r6
   81750:	e7e8      	b.n	81724 <__strtok_r+0x1c>
   81752:	462e      	mov	r6, r5
   81754:	e7f3      	b.n	8173e <__strtok_r+0x36>
   81756:	6810      	ldr	r0, [r2, #0]
   81758:	2800      	cmp	r0, #0
   8175a:	d1d7      	bne.n	8170c <__strtok_r+0x4>
   8175c:	4606      	mov	r6, r0
   8175e:	e7f0      	b.n	81742 <__strtok_r+0x3a>
   81760:	6016      	str	r6, [r2, #0]
   81762:	e7ee      	b.n	81742 <__strtok_r+0x3a>
   81764:	6017      	str	r7, [r2, #0]
   81766:	4606      	mov	r6, r0
   81768:	7003      	strb	r3, [r0, #0]
   8176a:	e7ea      	b.n	81742 <__strtok_r+0x3a>

0008176c <_strtol_r>:
   8176c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81770:	4c42      	ldr	r4, [pc, #264]	; (8187c <_strtol_r+0x110>)
   81772:	b082      	sub	sp, #8
   81774:	f8d4 c000 	ldr.w	ip, [r4]
   81778:	9001      	str	r0, [sp, #4]
   8177a:	460e      	mov	r6, r1
   8177c:	e000      	b.n	81780 <_strtol_r+0x14>
   8177e:	4626      	mov	r6, r4
   81780:	4634      	mov	r4, r6
   81782:	f814 5b01 	ldrb.w	r5, [r4], #1
   81786:	eb0c 0005 	add.w	r0, ip, r5
   8178a:	7840      	ldrb	r0, [r0, #1]
   8178c:	f000 0008 	and.w	r0, r0, #8
   81790:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   81794:	2800      	cmp	r0, #0
   81796:	d1f2      	bne.n	8177e <_strtol_r+0x12>
   81798:	2d2d      	cmp	r5, #45	; 0x2d
   8179a:	d05b      	beq.n	81854 <_strtol_r+0xe8>
   8179c:	2d2b      	cmp	r5, #43	; 0x2b
   8179e:	bf04      	itt	eq
   817a0:	7875      	ldrbeq	r5, [r6, #1]
   817a2:	1cb4      	addeq	r4, r6, #2
   817a4:	f033 0010 	bics.w	r0, r3, #16
   817a8:	d03c      	beq.n	81824 <_strtol_r+0xb8>
   817aa:	4699      	mov	r9, r3
   817ac:	f1ba 0f00 	cmp.w	sl, #0
   817b0:	bf0c      	ite	eq
   817b2:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
   817b6:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
   817ba:	fbbb f8f9 	udiv	r8, fp, r9
   817be:	2700      	movs	r7, #0
   817c0:	fb09 bb18 	mls	fp, r9, r8, fp
   817c4:	4638      	mov	r0, r7
   817c6:	e00c      	b.n	817e2 <_strtol_r+0x76>
   817c8:	3d30      	subs	r5, #48	; 0x30
   817ca:	42ab      	cmp	r3, r5
   817cc:	dd19      	ble.n	81802 <_strtol_r+0x96>
   817ce:	1c7e      	adds	r6, r7, #1
   817d0:	d005      	beq.n	817de <_strtol_r+0x72>
   817d2:	4540      	cmp	r0, r8
   817d4:	d823      	bhi.n	8181e <_strtol_r+0xb2>
   817d6:	d020      	beq.n	8181a <_strtol_r+0xae>
   817d8:	fb09 5000 	mla	r0, r9, r0, r5
   817dc:	2701      	movs	r7, #1
   817de:	f814 5b01 	ldrb.w	r5, [r4], #1
   817e2:	eb0c 0605 	add.w	r6, ip, r5
   817e6:	7876      	ldrb	r6, [r6, #1]
   817e8:	f016 0f04 	tst.w	r6, #4
   817ec:	d1ec      	bne.n	817c8 <_strtol_r+0x5c>
   817ee:	f016 0603 	ands.w	r6, r6, #3
   817f2:	d006      	beq.n	81802 <_strtol_r+0x96>
   817f4:	2e01      	cmp	r6, #1
   817f6:	bf14      	ite	ne
   817f8:	2657      	movne	r6, #87	; 0x57
   817fa:	2637      	moveq	r6, #55	; 0x37
   817fc:	1bad      	subs	r5, r5, r6
   817fe:	42ab      	cmp	r3, r5
   81800:	dce5      	bgt.n	817ce <_strtol_r+0x62>
   81802:	1c7b      	adds	r3, r7, #1
   81804:	d015      	beq.n	81832 <_strtol_r+0xc6>
   81806:	f1ba 0f00 	cmp.w	sl, #0
   8180a:	d121      	bne.n	81850 <_strtol_r+0xe4>
   8180c:	b10a      	cbz	r2, 81812 <_strtol_r+0xa6>
   8180e:	b9ef      	cbnz	r7, 8184c <_strtol_r+0xe0>
   81810:	6011      	str	r1, [r2, #0]
   81812:	b002      	add	sp, #8
   81814:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81818:	4770      	bx	lr
   8181a:	455d      	cmp	r5, fp
   8181c:	dddc      	ble.n	817d8 <_strtol_r+0x6c>
   8181e:	f04f 37ff 	mov.w	r7, #4294967295
   81822:	e7dc      	b.n	817de <_strtol_r+0x72>
   81824:	2d30      	cmp	r5, #48	; 0x30
   81826:	d01a      	beq.n	8185e <_strtol_r+0xf2>
   81828:	2b00      	cmp	r3, #0
   8182a:	d1be      	bne.n	817aa <_strtol_r+0x3e>
   8182c:	230a      	movs	r3, #10
   8182e:	4699      	mov	r9, r3
   81830:	e7bc      	b.n	817ac <_strtol_r+0x40>
   81832:	9901      	ldr	r1, [sp, #4]
   81834:	f1ba 0f00 	cmp.w	sl, #0
   81838:	f04f 0322 	mov.w	r3, #34	; 0x22
   8183c:	bf0c      	ite	eq
   8183e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81842:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   81846:	600b      	str	r3, [r1, #0]
   81848:	2a00      	cmp	r2, #0
   8184a:	d0e2      	beq.n	81812 <_strtol_r+0xa6>
   8184c:	1e61      	subs	r1, r4, #1
   8184e:	e7df      	b.n	81810 <_strtol_r+0xa4>
   81850:	4240      	negs	r0, r0
   81852:	e7db      	b.n	8180c <_strtol_r+0xa0>
   81854:	1cb4      	adds	r4, r6, #2
   81856:	7875      	ldrb	r5, [r6, #1]
   81858:	f04f 0a01 	mov.w	sl, #1
   8185c:	e7a2      	b.n	817a4 <_strtol_r+0x38>
   8185e:	7820      	ldrb	r0, [r4, #0]
   81860:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   81864:	2858      	cmp	r0, #88	; 0x58
   81866:	d003      	beq.n	81870 <_strtol_r+0x104>
   81868:	2b00      	cmp	r3, #0
   8186a:	d19e      	bne.n	817aa <_strtol_r+0x3e>
   8186c:	2308      	movs	r3, #8
   8186e:	e79c      	b.n	817aa <_strtol_r+0x3e>
   81870:	2310      	movs	r3, #16
   81872:	7865      	ldrb	r5, [r4, #1]
   81874:	4699      	mov	r9, r3
   81876:	3402      	adds	r4, #2
   81878:	e798      	b.n	817ac <_strtol_r+0x40>
   8187a:	bf00      	nop
   8187c:	20000434 	.word	0x20000434

00081880 <strtol>:
   81880:	b430      	push	{r4, r5}
   81882:	4c04      	ldr	r4, [pc, #16]	; (81894 <strtol+0x14>)
   81884:	460d      	mov	r5, r1
   81886:	4613      	mov	r3, r2
   81888:	4601      	mov	r1, r0
   8188a:	462a      	mov	r2, r5
   8188c:	6820      	ldr	r0, [r4, #0]
   8188e:	bc30      	pop	{r4, r5}
   81890:	f7ff bf6c 	b.w	8176c <_strtol_r>
   81894:	20000430 	.word	0x20000430

00081898 <register_fini>:
   81898:	4b02      	ldr	r3, [pc, #8]	; (818a4 <register_fini+0xc>)
   8189a:	b113      	cbz	r3, 818a2 <register_fini+0xa>
   8189c:	4802      	ldr	r0, [pc, #8]	; (818a8 <register_fini+0x10>)
   8189e:	f000 b805 	b.w	818ac <atexit>
   818a2:	4770      	bx	lr
   818a4:	00000000 	.word	0x00000000
   818a8:	000818b9 	.word	0x000818b9

000818ac <atexit>:
   818ac:	4601      	mov	r1, r0
   818ae:	2000      	movs	r0, #0
   818b0:	4602      	mov	r2, r0
   818b2:	4603      	mov	r3, r0
   818b4:	f000 b818 	b.w	818e8 <__register_exitproc>

000818b8 <__libc_fini_array>:
   818b8:	b538      	push	{r3, r4, r5, lr}
   818ba:	4d09      	ldr	r5, [pc, #36]	; (818e0 <__libc_fini_array+0x28>)
   818bc:	4c09      	ldr	r4, [pc, #36]	; (818e4 <__libc_fini_array+0x2c>)
   818be:	1b64      	subs	r4, r4, r5
   818c0:	10a4      	asrs	r4, r4, #2
   818c2:	bf18      	it	ne
   818c4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   818c8:	d005      	beq.n	818d6 <__libc_fini_array+0x1e>
   818ca:	3c01      	subs	r4, #1
   818cc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   818d0:	4798      	blx	r3
   818d2:	2c00      	cmp	r4, #0
   818d4:	d1f9      	bne.n	818ca <__libc_fini_array+0x12>
   818d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   818da:	f000 b8f7 	b.w	81acc <_fini>
   818de:	bf00      	nop
   818e0:	00081ad8 	.word	0x00081ad8
   818e4:	00081adc 	.word	0x00081adc

000818e8 <__register_exitproc>:
   818e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   818ea:	4c27      	ldr	r4, [pc, #156]	; (81988 <__register_exitproc+0xa0>)
   818ec:	b085      	sub	sp, #20
   818ee:	6826      	ldr	r6, [r4, #0]
   818f0:	4607      	mov	r7, r0
   818f2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   818f6:	2c00      	cmp	r4, #0
   818f8:	d040      	beq.n	8197c <__register_exitproc+0x94>
   818fa:	6865      	ldr	r5, [r4, #4]
   818fc:	2d1f      	cmp	r5, #31
   818fe:	dd1e      	ble.n	8193e <__register_exitproc+0x56>
   81900:	4822      	ldr	r0, [pc, #136]	; (8198c <__register_exitproc+0xa4>)
   81902:	b918      	cbnz	r0, 8190c <__register_exitproc+0x24>
   81904:	f04f 30ff 	mov.w	r0, #4294967295
   81908:	b005      	add	sp, #20
   8190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8190c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81910:	9103      	str	r1, [sp, #12]
   81912:	9202      	str	r2, [sp, #8]
   81914:	9301      	str	r3, [sp, #4]
   81916:	f3af 8000 	nop.w
   8191a:	9903      	ldr	r1, [sp, #12]
   8191c:	4604      	mov	r4, r0
   8191e:	9a02      	ldr	r2, [sp, #8]
   81920:	9b01      	ldr	r3, [sp, #4]
   81922:	2800      	cmp	r0, #0
   81924:	d0ee      	beq.n	81904 <__register_exitproc+0x1c>
   81926:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8192a:	2000      	movs	r0, #0
   8192c:	6025      	str	r5, [r4, #0]
   8192e:	6060      	str	r0, [r4, #4]
   81930:	4605      	mov	r5, r0
   81932:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81936:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8193a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8193e:	b93f      	cbnz	r7, 81950 <__register_exitproc+0x68>
   81940:	1c6b      	adds	r3, r5, #1
   81942:	2000      	movs	r0, #0
   81944:	3502      	adds	r5, #2
   81946:	6063      	str	r3, [r4, #4]
   81948:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8194c:	b005      	add	sp, #20
   8194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81950:	2601      	movs	r6, #1
   81952:	40ae      	lsls	r6, r5
   81954:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   81958:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   8195c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   81960:	2f02      	cmp	r7, #2
   81962:	ea42 0206 	orr.w	r2, r2, r6
   81966:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8196a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8196e:	d1e7      	bne.n	81940 <__register_exitproc+0x58>
   81970:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81974:	431e      	orrs	r6, r3
   81976:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8197a:	e7e1      	b.n	81940 <__register_exitproc+0x58>
   8197c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81980:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81984:	e7b9      	b.n	818fa <__register_exitproc+0x12>
   81986:	bf00      	nop
   81988:	000819b0 	.word	0x000819b0
   8198c:	00000000 	.word	0x00000000
   81990:	00000023 	.word	0x00000023
   81994:	65657053 	.word	0x65657053
   81998:	54532064 	.word	0x54532064
   8199c:	0000203a 	.word	0x0000203a
   819a0:	65657053 	.word	0x65657053
   819a4:	52442064 	.word	0x52442064
   819a8:	0000203a 	.word	0x0000203a
   819ac:	00000043 	.word	0x00000043

000819b0 <_global_impure_ptr>:
   819b0:	20000008                                ... 

000819b4 <_ctype_>:
   819b4:	20202000 20202020 28282020 20282828     .         ((((( 
   819c4:	20202020 20202020 20202020 20202020                     
   819d4:	10108820 10101010 10101010 10101010      ...............
   819e4:	04040410 04040404 10040404 10101010     ................
   819f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   81a04:	01010101 01010101 01010101 10101010     ................
   81a14:	42421010 42424242 02020202 02020202     ..BBBBBB........
   81a24:	02020202 02020202 02020202 10101010     ................
   81a34:	00000020 00000000 00000000 00000000      ...............
	...

00081ab8 <_init>:
   81ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81aba:	bf00      	nop
   81abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81abe:	bc08      	pop	{r3}
   81ac0:	469e      	mov	lr, r3
   81ac2:	4770      	bx	lr

00081ac4 <__init_array_start>:
   81ac4:	00081899 	.word	0x00081899

00081ac8 <__frame_dummy_init_array_entry>:
   81ac8:	00080119                                ....

00081acc <_fini>:
   81acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ace:	bf00      	nop
   81ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81ad2:	bc08      	pop	{r3}
   81ad4:	469e      	mov	lr, r3
   81ad6:	4770      	bx	lr

00081ad8 <__fini_array_start>:
   81ad8:	000800f5 	.word	0x000800f5
